!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ARCH	template.mk	/^    ARCH=hppa$/;"	m
ARCH	template.mk	/^    ARCH=ibmrs$/;"	m
ARCH	template.mk	/^    ARCH=lnx86 $/;"	m
ARCH	template.mk	/^    ARCH=sun4v$/;"	m
AntennaInoutCbk	lef/lefrCallBacks.hpp	/^    lefrDoubleCbkFnType AntennaInoutCbk;$/;"	m	class:lefrCallbacks
AntennaInoutWarnings	lef/lefrSettings.hpp	/^    int AntennaInoutWarnings;$/;"	m	class:lefrSettings
AntennaInputCbk	lef/lefrCallBacks.hpp	/^    lefrDoubleCbkFnType AntennaInputCbk;$/;"	m	class:lefrCallbacks
AntennaInputWarnings	lef/lefrSettings.hpp	/^    int AntennaInputWarnings;$/;"	m	class:lefrSettings
AntennaOutputCbk	lef/lefrCallBacks.hpp	/^    lefrDoubleCbkFnType AntennaOutputCbk;$/;"	m	class:lefrCallbacks
AntennaOutputWarnings	lef/lefrSettings.hpp	/^    int AntennaOutputWarnings;$/;"	m	class:lefrSettings
ArrayBeginCbk	lef/lefrCallBacks.hpp	/^    lefrStringCbkFnType ArrayBeginCbk;$/;"	m	class:lefrCallbacks
ArrayCbk	lef/lefrCallBacks.hpp	/^    lefrArrayCbkFnType ArrayCbk;$/;"	m	class:lefrCallbacks
ArrayEndCbk	lef/lefrCallBacks.hpp	/^    lefrStringCbkFnType ArrayEndCbk;$/;"	m	class:lefrCallbacks
ArrayWarnings	lef/lefrSettings.hpp	/^    int ArrayWarnings;$/;"	m	class:lefrSettings
BEGIN_LEFDEF_PARSER_NAMESPACE	lef/lefiKRDefs.hpp	33;"	d
BINOBJS	template.mk	/^BINOBJS =	$(TMP4:.c=.o)$/;"	m
BINSRCS	lefdiff/Makefile	/^BINSRCS =	\\$/;"	m
BINSRCS	lefrw/Makefile	/^BINSRCS =	lefrw.cpp$/;"	m
BINSRCS	lefwrite/Makefile	/^BINSRCS =	lefwrite.cpp$/;"	m
BINTARGET	lefdiff/Makefile	/^BINTARGET =	lefdiff$/;"	m
BINTARGET	lefrw/Makefile	/^BINTARGET = lefrw$/;"	m
BINTARGET	lefwrite/Makefile	/^BINTARGET = lefwrite$/;"	m
BIN_LINK_FLAGS	template.mk	/^    BIN_LINK_FLAGS=-lPW$/;"	m
BUILD_ORDER	Makefile	/^BUILD_ORDER	= \\$/;"	m
BusBitCharsCbk	lef/lefrCallBacks.hpp	/^    lefrStringCbkFnType BusBitCharsCbk;$/;"	m	class:lefrCallbacks
CASE	clef/xlefiDebug.cpp	/^const char* CASE (const char * x) {$/;"	f
CASE	lef/lefiDebug.cpp	/^CASE(const char *x)$/;"	f
CC	template.mk	/^    CC=\/usr\/bin\/cc_r -Dibmrs$/;"	m
CC	template.mk	/^    CC=gcc$/;"	m
CHECK_STATUS	lefwrite/lefwrite.cpp	43;"	d	file:
CHECK_STATUS	lefwrite/lefwriteCbs.cpp	44;"	d	file:
CLEFIARRAY_H	clef/lefiArray.h	35;"	d
CLEFICROSSTALK_H	clef/lefiCrossTalk.h	35;"	d
CLEFIDEBUG_H	clef/lefiDebug.h	35;"	d
CLEFIENCRYPTINT_H	clef/lefiEncryptInt.h	35;"	d
CLEFILAYER_H	clef/lefiLayer.h	35;"	d
CLEFIMACRO_H	clef/lefiMacro.h	35;"	d
CLEFIMISC_H	clef/lefiMisc.h	35;"	d
CLEFINONDEFAULT_H	clef/lefiNonDefault.h	35;"	d
CLEFIPROPTYPE_H	clef/lefiPropType.h	35;"	d
CLEFIPROP_H	clef/lefiProp.h	35;"	d
CLEFITYPEDEFS_H	clef/lefiTypedefs.h	35;"	d
CLEFIUNITS_H	clef/lefiUnits.h	35;"	d
CLEFIUSER_H	clef/lefiUser.h	44;"	d
CLEFIUTIL_H	clef/lefiUtil.h	35;"	d
CLEFIVIARULE_H	clef/lefiViaRule.h	35;"	d
CLEFIVIA_H	clef/lefiVia.h	35;"	d
CLEFRREADER_H	clef/lefrReader.h	35;"	d
CLEFWWRITERCALLS_H	clef/lefwWriterCalls.h	35;"	d
CLEFWWRITER_H	clef/lefwWriter.h	35;"	d
CLEFZLIB_H	clefzlib/lefzlib.h	26;"	d
CRYPT_H	lef/crypt.hpp	31;"	d
CURRENT_VERSION	lef/lefrData.hpp	53;"	d
CXX	template.mk	/^    CXX=CC$/;"	m
CXX	template.mk	/^    CXX=\/opt\/aCC\/bin\/aCC$/;"	m
CXX	template.mk	/^    CXX=\/usr\/bin\/xlC_r -+ -Dibmrs$/;"	m
CXX	template.mk	/^    CXX=g++$/;"	m
CXXFLAGS	template.mk	/^    CXXFLAGS=+DAportable -AA$/;"	m
CXXFLAGS	template.mk	/^    CXXFLAGS=-g$/;"	m
CaseSensitive	lef/lefrSettings.hpp	/^    int CaseSensitive;$/;"	m	class:lefrSettings
CaseSensitiveCbk	lef/lefrCallBacks.hpp	/^    lefrIntegerCbkFnType CaseSensitiveCbk;$/;"	m	class:lefrCallbacks
CaseSensitiveSet	lef/lefrSettings.hpp	/^    int CaseSensitiveSet;$/;"	m	class:lefrSettings
CaseSensitiveWarnings	lef/lefrSettings.hpp	/^    int CaseSensitiveWarnings;$/;"	m	class:lefrSettings
Clear	lef/lefiPropType.cpp	/^lefiPropType::Clear()$/;"	f	class:lefiPropType
ClearanceMeasureCbk	lef/lefrCallBacks.hpp	/^    lefrStringCbkFnType ClearanceMeasureCbk;$/;"	m	class:lefrCallbacks
CommentChar	lef/lefrSettings.hpp	/^    char CommentChar;$/;"	m	class:lefrSettings
CorrectionTableCbk	lef/lefrCallBacks.hpp	/^    lefrCorrectionTableCbkFnType CorrectionTableCbk;$/;"	m	class:lefrCallbacks
CorrectionTableWarnings	lef/lefrSettings.hpp	/^    int CorrectionTableWarnings;$/;"	m	class:lefrSettings
DEFI_ENCRYPTINT_H	lef/lefiEncryptInt.hpp	31;"	d
DIFFDEFRW_H	lefdiff/diffLefRW.hpp	31;"	d
DIRNAME	clef/Makefile	/^DIRNAME = lef$/;"	m
DIRNAME	clefzlib/Makefile	/^DIRNAME = clefzlib$/;"	m
DIRNAME	lef/Makefile	/^DIRNAME = lef$/;"	m
DIRNAME	lefzlib/Makefile	/^DIRNAME = lefzlib$/;"	m
DeltaNumberLines	lef/lefrSettings.hpp	/^    int DeltaNumberLines;$/;"	m	class:lefrSettings
DensityCbk	lef/lefrCallBacks.hpp	/^    lefrDensityCbkFnType DensityCbk;$/;"	m	class:lefrCallbacks
Destroy	lef/lefiArray.cpp	/^lefiArray::Destroy()$/;"	f	class:lefiArray
Destroy	lef/lefiArray.cpp	/^lefiArrayFloorPlan::Destroy()$/;"	f	class:lefiArrayFloorPlan
Destroy	lef/lefiCrossTalk.cpp	/^lefiCorrectionEdge::Destroy()$/;"	f	class:lefiCorrectionEdge
Destroy	lef/lefiCrossTalk.cpp	/^lefiCorrectionResistance::Destroy()$/;"	f	class:lefiCorrectionResistance
Destroy	lef/lefiCrossTalk.cpp	/^lefiCorrectionTable::Destroy()$/;"	f	class:lefiCorrectionTable
Destroy	lef/lefiCrossTalk.cpp	/^lefiCorrectionVictim::Destroy()$/;"	f	class:lefiCorrectionVictim
Destroy	lef/lefiCrossTalk.cpp	/^lefiNoiseEdge::Destroy()$/;"	f	class:lefiNoiseEdge
Destroy	lef/lefiCrossTalk.cpp	/^lefiNoiseResistance::Destroy()$/;"	f	class:lefiNoiseResistance
Destroy	lef/lefiCrossTalk.cpp	/^lefiNoiseTable::Destroy()$/;"	f	class:lefiNoiseTable
Destroy	lef/lefiCrossTalk.cpp	/^lefiNoiseVictim::Destroy()$/;"	f	class:lefiNoiseVictim
Destroy	lef/lefiLayer.cpp	/^lefiAntennaModel::Destroy()$/;"	f	class:lefiAntennaModel
Destroy	lef/lefiLayer.cpp	/^lefiAntennaPWL::Destroy()$/;"	f	class:lefiAntennaPWL
Destroy	lef/lefiLayer.cpp	/^lefiInfluence::Destroy()$/;"	f	class:lefiInfluence
Destroy	lef/lefiLayer.cpp	/^lefiLayer::Destroy()$/;"	f	class:lefiLayer
Destroy	lef/lefiLayer.cpp	/^lefiLayerDensity::Destroy()$/;"	f	class:lefiLayerDensity
Destroy	lef/lefiLayer.cpp	/^lefiOrthogonal::Destroy()$/;"	f	class:lefiOrthogonal
Destroy	lef/lefiLayer.cpp	/^lefiParallel::Destroy()$/;"	f	class:lefiParallel
Destroy	lef/lefiLayer.cpp	/^lefiSpacingTable::Destroy()$/;"	f	class:lefiSpacingTable
Destroy	lef/lefiLayer.cpp	/^lefiTwoWidths::Destroy()$/;"	f	class:lefiTwoWidths
Destroy	lef/lefiMacro.cpp	/^lefiDensity::Destroy()$/;"	f	class:lefiDensity
Destroy	lef/lefiMacro.cpp	/^lefiMacro::Destroy()$/;"	f	class:lefiMacro
Destroy	lef/lefiMacro.cpp	/^lefiObstruction::Destroy()$/;"	f	class:lefiObstruction
Destroy	lef/lefiMacro.cpp	/^lefiPin::Destroy()$/;"	f	class:lefiPin
Destroy	lef/lefiMacro.cpp	/^lefiPinAntennaModel::Destroy()$/;"	f	class:lefiPinAntennaModel
Destroy	lef/lefiMacro.cpp	/^lefiTiming::Destroy()$/;"	f	class:lefiTiming
Destroy	lef/lefiMisc.cpp	/^lefiGcellPattern::Destroy()$/;"	f	class:lefiGcellPattern
Destroy	lef/lefiMisc.cpp	/^lefiGeometries::Destroy()$/;"	f	class:lefiGeometries
Destroy	lef/lefiMisc.cpp	/^lefiIRDrop::Destroy()$/;"	f	class:lefiIRDrop
Destroy	lef/lefiMisc.cpp	/^lefiMaxStackVia::Destroy()$/;"	f	class:lefiMaxStackVia
Destroy	lef/lefiMisc.cpp	/^lefiMinFeature::Destroy()$/;"	f	class:lefiMinFeature
Destroy	lef/lefiMisc.cpp	/^lefiSite::Destroy()$/;"	f	class:lefiSite
Destroy	lef/lefiMisc.cpp	/^lefiSitePattern::Destroy()$/;"	f	class:lefiSitePattern
Destroy	lef/lefiMisc.cpp	/^lefiSpacing::Destroy()$/;"	f	class:lefiSpacing
Destroy	lef/lefiMisc.cpp	/^lefiTrackPattern::Destroy()$/;"	f	class:lefiTrackPattern
Destroy	lef/lefiMisc.cpp	/^lefiUseMinSpacing::Destroy()$/;"	f	class:lefiUseMinSpacing
Destroy	lef/lefiNonDefault.cpp	/^lefiNonDefault::Destroy()$/;"	f	class:lefiNonDefault
Destroy	lef/lefiProp.cpp	/^lefiProp::Destroy()$/;"	f	class:lefiProp
Destroy	lef/lefiPropType.cpp	/^lefiPropType::Destroy()$/;"	f	class:lefiPropType
Destroy	lef/lefiUnits.cpp	/^lefiUnits::Destroy()$/;"	f	class:lefiUnits
Destroy	lef/lefiVia.cpp	/^lefiVia::Destroy()$/;"	f	class:lefiVia
Destroy	lef/lefiVia.cpp	/^lefiViaLayer::Destroy()$/;"	f	class:lefiViaLayer
Destroy	lef/lefiViaRule.cpp	/^lefiViaRule::Destroy()$/;"	f	class:lefiViaRule
Destroy	lef/lefiViaRule.cpp	/^lefiViaRuleLayer::Destroy()$/;"	f	class:lefiViaRuleLayer
DielectricCbk	lef/lefrCallBacks.hpp	/^    lefrDoubleCbkFnType DielectricCbk;$/;"	m	class:lefrCallbacks
DielectricWarnings	lef/lefrSettings.hpp	/^    int DielectricWarnings;$/;"	m	class:lefrSettings
DisPropStrProcess	lef/lefrSettings.hpp	/^    int DisPropStrProcess;$/;"	m	class:lefrSettings
DividerCharCbk	lef/lefrCallBacks.hpp	/^    lefrStringCbkFnType DividerCharCbk;$/;"	m	class:lefrCallbacks
EEQ	lef/lefiMacro.cpp	/^lefiMacro::EEQ() const$/;"	f	class:lefiMacro
EEQSize_	lef/lefiMacro.hpp	/^  int EEQSize_;$/;"	m	class:lefiMacro
EEQ_	lef/lefiMacro.hpp	/^  char* EEQ_;$/;"	m	class:lefiMacro
END_LEFDEF_PARSER_NAMESPACE	lef/lefiKRDefs.hpp	34;"	d
EXTERN	clef/lefiTypedefs.h	38;"	d
EXTERN	clef/xlefiArray.cpp	34;"	d	file:
EXTERN	clef/xlefiCrossTalk.cpp	34;"	d	file:
EXTERN	clef/xlefiDebug.cpp	34;"	d	file:
EXTERN	clef/xlefiEncryptInt.cpp	34;"	d	file:
EXTERN	clef/xlefiLayer.cpp	34;"	d	file:
EXTERN	clef/xlefiMacro.cpp	34;"	d	file:
EXTERN	clef/xlefiMisc.cpp	34;"	d	file:
EXTERN	clef/xlefiNonDefault.cpp	34;"	d	file:
EXTERN	clef/xlefiProp.cpp	34;"	d	file:
EXTERN	clef/xlefiPropType.cpp	34;"	d	file:
EXTERN	clef/xlefiUnits.cpp	34;"	d	file:
EXTERN	clef/xlefiUtil.cpp	34;"	d	file:
EXTERN	clef/xlefiVia.cpp	34;"	d	file:
EXTERN	clef/xlefiViaRule.cpp	34;"	d	file:
EXTERN	clef/xlefrReader.cpp	34;"	d	file:
EXTERN	clef/xlefwWriter.cpp	34;"	d	file:
EXTERN	clef/xlefwWriterCalls.cpp	34;"	d	file:
EdgeRateScaleFactorCbk	lef/lefrCallBacks.hpp	/^    lefrDoubleCbkFnType EdgeRateScaleFactorCbk;$/;"	m	class:lefrCallbacks
EdgeRateScaleFactorWarnings	lef/lefrSettings.hpp	/^    int EdgeRateScaleFactorWarnings;$/;"	m	class:lefrSettings
EdgeRateThreshold1Cbk	lef/lefrCallBacks.hpp	/^    lefrDoubleCbkFnType EdgeRateThreshold1Cbk;$/;"	m	class:lefrCallbacks
EdgeRateThreshold1Warnings	lef/lefrSettings.hpp	/^    int EdgeRateThreshold1Warnings;$/;"	m	class:lefrSettings
EdgeRateThreshold2Cbk	lef/lefrCallBacks.hpp	/^    lefrDoubleCbkFnType EdgeRateThreshold2Cbk;$/;"	m	class:lefrCallbacks
EdgeRateThreshold2Warnings	lef/lefrSettings.hpp	/^    int EdgeRateThreshold2Warnings;$/;"	m	class:lefrSettings
ErrorLogFunction	lef/lefrSettings.hpp	/^    LEFI_LOG_FUNCTION ErrorLogFunction;$/;"	m	class:lefrSettings
ExtensionCbk	lef/lefrCallBacks.hpp	/^    lefrStringCbkFnType ExtensionCbk;$/;"	m	class:lefrCallbacks
FALSE	lef/lefiDefs.hpp	49;"	d
FixedMaskCbk	lef/lefrCallBacks.hpp	/^    lefrIntegerCbkFnType FixedMaskCbk;$/;"	m	class:lefrCallbacks
FreeFunction	lef/lefrSettings.hpp	/^    LEFI_FREE_FUNCTION FreeFunction;$/;"	m	class:lefrSettings
GetToken	lef/lef_keywords.cpp	/^GetToken(char **buffer, int *bufferSize)$/;"	f	file:
GetTokenFromStack	lef/lef_keywords.cpp	/^GetTokenFromStack(char *s)$/;"	f	file:
HEADERS	lef/Makefile	/^HEADERS =	\\$/;"	m
HEADERS	lefdiff/Makefile	/^HEADERS =	\\$/;"	m
Hist_text	lef/lefrData.hpp	/^    std::vector<char>  Hist_text; $/;"	m	class:lefrData
INSTALLED_BIN	template.mk	/^INSTALLED_BIN = ..\/bin\/$(BINTARGET)$/;"	m
INSTALLED_HDRS	template.mk	/^INSTALLED_HDRS = $(PUBLIC_HDRS:%=..\/include\/%)$/;"	m
INSTALLED_LIB	template.mk	/^INSTALLED_LIB = ..\/lib\/$(LIBTARGET)$/;"	m
IN_BUF_SIZE	lef/lefrData.hpp	55;"	d
IRDropBeginCbk	lef/lefrCallBacks.hpp	/^    lefrVoidCbkFnType IRDropBeginCbk;$/;"	m	class:lefrCallbacks
IRDropCbk	lef/lefrCallBacks.hpp	/^    lefrIRDropCbkFnType IRDropCbk;$/;"	m	class:lefrCallbacks
IRDropEndCbk	lef/lefrCallBacks.hpp	/^    lefrVoidCbkFnType IRDropEndCbk;$/;"	m	class:lefrCallbacks
IRDropWarnings	lef/lefrSettings.hpp	/^    int IRDropWarnings;$/;"	m	class:lefrSettings
IncCurPos	lef/lef_keywords.cpp	/^IncCurPos(char **curPos, char **buffer, int *bufferSize)$/;"	f	file:
Init	lef/lefiArray.cpp	/^lefiArray::Init()$/;"	f	class:lefiArray
Init	lef/lefiArray.cpp	/^lefiArrayFloorPlan::Init(const char *name)$/;"	f	class:lefiArrayFloorPlan
Init	lef/lefiCrossTalk.cpp	/^lefiCorrectionEdge::Init()$/;"	f	class:lefiCorrectionEdge
Init	lef/lefiCrossTalk.cpp	/^lefiCorrectionResistance::Init()$/;"	f	class:lefiCorrectionResistance
Init	lef/lefiCrossTalk.cpp	/^lefiCorrectionTable::Init()$/;"	f	class:lefiCorrectionTable
Init	lef/lefiCrossTalk.cpp	/^lefiCorrectionVictim::Init(double d)$/;"	f	class:lefiCorrectionVictim
Init	lef/lefiCrossTalk.cpp	/^lefiNoiseEdge::Init()$/;"	f	class:lefiNoiseEdge
Init	lef/lefiCrossTalk.cpp	/^lefiNoiseResistance::Init()$/;"	f	class:lefiNoiseResistance
Init	lef/lefiCrossTalk.cpp	/^lefiNoiseTable::Init()$/;"	f	class:lefiNoiseTable
Init	lef/lefiCrossTalk.cpp	/^lefiNoiseVictim::Init(double d)$/;"	f	class:lefiNoiseVictim
Init	lef/lefiLayer.cpp	/^lefiAntennaModel::Init()$/;"	f	class:lefiAntennaModel
Init	lef/lefiLayer.cpp	/^lefiAntennaPWL::Init()$/;"	f	class:lefiAntennaPWL
Init	lef/lefiLayer.cpp	/^lefiInfluence::Init()$/;"	f	class:lefiInfluence
Init	lef/lefiLayer.cpp	/^lefiLayer::Init()$/;"	f	class:lefiLayer
Init	lef/lefiLayer.cpp	/^lefiLayerDensity::Init(const char *type)$/;"	f	class:lefiLayerDensity
Init	lef/lefiLayer.cpp	/^lefiOrthogonal::Init()$/;"	f	class:lefiOrthogonal
Init	lef/lefiLayer.cpp	/^lefiParallel::Init()$/;"	f	class:lefiParallel
Init	lef/lefiLayer.cpp	/^lefiSpacingTable::Init()$/;"	f	class:lefiSpacingTable
Init	lef/lefiLayer.cpp	/^lefiTwoWidths::Init()$/;"	f	class:lefiTwoWidths
Init	lef/lefiMacro.cpp	/^lefiDensity::Init()$/;"	f	class:lefiDensity
Init	lef/lefiMacro.cpp	/^lefiMacro::Init()$/;"	f	class:lefiMacro
Init	lef/lefiMacro.cpp	/^lefiObstruction::Init()$/;"	f	class:lefiObstruction
Init	lef/lefiMacro.cpp	/^lefiPin::Init()$/;"	f	class:lefiPin
Init	lef/lefiMacro.cpp	/^lefiPinAntennaModel::Init()$/;"	f	class:lefiPinAntennaModel
Init	lef/lefiMacro.cpp	/^lefiTiming::Init()$/;"	f	class:lefiTiming
Init	lef/lefiMisc.cpp	/^lefiGcellPattern::Init()$/;"	f	class:lefiGcellPattern
Init	lef/lefiMisc.cpp	/^lefiGeometries::Init()$/;"	f	class:lefiGeometries
Init	lef/lefiMisc.cpp	/^lefiIRDrop::Init()$/;"	f	class:lefiIRDrop
Init	lef/lefiMisc.cpp	/^lefiMaxStackVia::Init()$/;"	f	class:lefiMaxStackVia
Init	lef/lefiMisc.cpp	/^lefiMinFeature::Init()$/;"	f	class:lefiMinFeature
Init	lef/lefiMisc.cpp	/^lefiSite::Init()$/;"	f	class:lefiSite
Init	lef/lefiMisc.cpp	/^lefiSitePattern::Init()$/;"	f	class:lefiSitePattern
Init	lef/lefiMisc.cpp	/^lefiSpacing::Init()$/;"	f	class:lefiSpacing
Init	lef/lefiMisc.cpp	/^lefiTrackPattern::Init()$/;"	f	class:lefiTrackPattern
Init	lef/lefiMisc.cpp	/^lefiUseMinSpacing::Init()$/;"	f	class:lefiUseMinSpacing
Init	lef/lefiNonDefault.cpp	/^lefiNonDefault::Init()$/;"	f	class:lefiNonDefault
Init	lef/lefiProp.cpp	/^lefiProp::Init()$/;"	f	class:lefiProp
Init	lef/lefiPropType.cpp	/^lefiPropType::Init()$/;"	f	class:lefiPropType
Init	lef/lefiUnits.cpp	/^lefiUnits::Init()$/;"	f	class:lefiUnits
Init	lef/lefiVia.cpp	/^lefiVia::Init()$/;"	f	class:lefiVia
Init	lef/lefiVia.cpp	/^lefiViaLayer::Init()$/;"	f	class:lefiViaLayer
Init	lef/lefiViaRule.cpp	/^lefiViaRule::Init()$/;"	f	class:lefiViaRule
Init	lef/lefiViaRule.cpp	/^lefiViaRuleLayer::Init()$/;"	f	class:lefiViaRuleLayer
InoutAntennaCbk	lef/lefrCallBacks.hpp	/^    lefrDoubleCbkFnType InoutAntennaCbk;$/;"	m	class:lefrCallbacks
InoutAntennaWarnings	lef/lefrSettings.hpp	/^    int InoutAntennaWarnings;$/;"	m	class:lefrSettings
InputAntennaCbk	lef/lefrCallBacks.hpp	/^    lefrDoubleCbkFnType InputAntennaCbk;$/;"	m	class:lefrCallbacks
InputAntennaWarnings	lef/lefrSettings.hpp	/^    int InputAntennaWarnings;$/;"	m	class:lefrSettings
Keyword_set	lef/lefrSettings.hpp	/^    lefKeywordMap       Keyword_set; $/;"	m	class:lefrSettings
LAYER_SPEC	lef/lefiDefs.hpp	82;"	d
LDLIBS	lefdiff/Makefile	/^LDLIBS = ..\/lib\/liblef.a$/;"	m
LDLIBS	lefrw/Makefile	/^LDLIBS =	..\/lib\/liblef.a$/;"	m
LDLIBS	lefwrite/Makefile	/^LDLIBS =	..\/lib\/liblef.a$/;"	m
LEFEmsMsgTable	clef/lefMsgTable.h	/^emsError_t LEFEmsMsgTable[] =$/;"	v
LEFI_DEFS_H	lef/lefiDefs.hpp	33;"	d
LEFI_FREE_FUNCTION	clef/lefrReader.h	/^typedef void (*LEFI_FREE_FUNCTION) (void *);$/;"	t
LEFI_FREE_FUNCTION	lef/lefrReader.hpp	/^typedef void (*LEFI_FREE_FUNCTION) (void *);$/;"	t
LEFI_LINE_NUMBER_FUNCTION	clef/lefrReader.h	/^typedef void (*LEFI_LINE_NUMBER_FUNCTION) (int);$/;"	t
LEFI_LINE_NUMBER_FUNCTION	lef/lefrReader.hpp	/^typedef void (*LEFI_LINE_NUMBER_FUNCTION) (int);$/;"	t
LEFI_LOG_FUNCTION	clef/lefrReader.h	/^typedef void (*LEFI_LOG_FUNCTION) (const char*);$/;"	t
LEFI_LOG_FUNCTION	clef/lefwWriterCalls.h	/^typedef void (*LEFI_LOG_FUNCTION)(const char*);$/;"	t
LEFI_LOG_FUNCTION	lef/lefrReader.hpp	/^typedef void (*LEFI_LOG_FUNCTION) (const char*);$/;"	t
LEFI_LOG_FUNCTION	lef/lefwWriter.cpp	/^typedef void (*LEFI_LOG_FUNCTION)(const char*);$/;"	t	file:
LEFI_LOG_FUNCTION	lef/lefwWriterCalls.hpp	/^typedef void (*LEFI_LOG_FUNCTION)(const char*);$/;"	t
LEFI_MALLOC_FUNCTION	clef/lefrReader.h	/^typedef void* (*LEFI_MALLOC_FUNCTION) (int);$/;"	t
LEFI_MALLOC_FUNCTION	lef/lefrReader.hpp	/^typedef void* (*LEFI_MALLOC_FUNCTION) (int);$/;"	t
LEFI_READ_FUNCTION	clef/lefrReader.h	/^typedef size_t (*LEFI_READ_FUNCTION) (FILE*, char*, size_t);$/;"	t
LEFI_READ_FUNCTION	lef/lefrReader.hpp	/^typedef size_t (*LEFI_READ_FUNCTION) (FILE*, char*, size_t);$/;"	t
LEFI_REALLOC_FUNCTION	clef/lefrReader.h	/^typedef void* (*LEFI_REALLOC_FUNCTION) (void *, int);$/;"	t
LEFI_REALLOC_FUNCTION	lef/lefrReader.hpp	/^typedef void* (*LEFI_REALLOC_FUNCTION) (void *, int);$/;"	t
LEFI_USER_H	lef/lefiUser.hpp	40;"	d
LEFI_WARNING_LOG_FUNCTION	clef/lefrReader.h	/^typedef void (*LEFI_WARNING_LOG_FUNCTION) (const char*);$/;"	t
LEFI_WARNING_LOG_FUNCTION	clef/lefwWriterCalls.h	/^typedef void (*LEFI_WARNING_LOG_FUNCTION)(const char*);$/;"	t
LEFI_WARNING_LOG_FUNCTION	lef/lefrReader.hpp	/^typedef void (*LEFI_WARNING_LOG_FUNCTION) (const char*);$/;"	t
LEFI_WARNING_LOG_FUNCTION	lef/lefwWriter.cpp	/^typedef void (*LEFI_WARNING_LOG_FUNCTION)(const char*);$/;"	t	file:
LEFI_WARNING_LOG_FUNCTION	lef/lefwWriterCalls.hpp	/^typedef void (*LEFI_WARNING_LOG_FUNCTION)(const char*);$/;"	t
LEFI_WRITER_H	lef/lefwWriterCalls.hpp	31;"	d
LEFRREADER_H	lef/lefrReader.hpp	31;"	d
LEFW_ALREADY_DEFINED	clef/lefwWriter.h	45;"	d
LEFW_ALREADY_DEFINED	lef/lefwWriter.hpp	46;"	d
LEFW_ANTENNAAREAFACTOR	lef/lefwWriter.cpp	156;"	d	file:
LEFW_ANTENNAAREARATIO	lef/lefwWriter.cpp	150;"	d	file:
LEFW_ANTENNACUMAREARATIO	lef/lefwWriter.cpp	153;"	d	file:
LEFW_ANTENNACUMDIFFAREARATIO	lef/lefwWriter.cpp	154;"	d	file:
LEFW_ANTENNACUMDIFFAREARATIOPWL	lef/lefwWriter.cpp	155;"	d	file:
LEFW_ANTENNACUMDIFFSIDEAREARATIO	lef/lefwWriter.cpp	161;"	d	file:
LEFW_ANTENNACUMDIFFSIDEAREARATIOPWL	lef/lefwWriter.cpp	162;"	d	file:
LEFW_ANTENNACUMSIDEAREARATIO	lef/lefwWriter.cpp	160;"	d	file:
LEFW_ANTENNADIFFAREA	lef/lefwWriter.cpp	168;"	d	file:
LEFW_ANTENNADIFFAREARATIO	lef/lefwWriter.cpp	151;"	d	file:
LEFW_ANTENNADIFFAREARATIOPWL	lef/lefwWriter.cpp	152;"	d	file:
LEFW_ANTENNADIFFSIDEAREARATIO	lef/lefwWriter.cpp	158;"	d	file:
LEFW_ANTENNADIFFSIDEAREARATIOPWL	lef/lefwWriter.cpp	159;"	d	file:
LEFW_ANTENNAGATEAREA	lef/lefwWriter.cpp	167;"	d	file:
LEFW_ANTENNAINOUTDIFFAREA	lef/lefwWriter.cpp	147;"	d	file:
LEFW_ANTENNAINPUTGATEAREA	lef/lefwWriter.cpp	146;"	d	file:
LEFW_ANTENNAMAXAREACAR	lef/lefwWriter.cpp	169;"	d	file:
LEFW_ANTENNAMAXCUTCAR	lef/lefwWriter.cpp	172;"	d	file:
LEFW_ANTENNAMAXSIDEAREACAR	lef/lefwWriter.cpp	170;"	d	file:
LEFW_ANTENNAMODEL	lef/lefwWriter.cpp	149;"	d	file:
LEFW_ANTENNAOUTPUTDIFFAREA	lef/lefwWriter.cpp	148;"	d	file:
LEFW_ANTENNAPARTIALCUTAREA	lef/lefwWriter.cpp	171;"	d	file:
LEFW_ANTENNAPARTIALMETALAREA	lef/lefwWriter.cpp	165;"	d	file:
LEFW_ANTENNAPARTIALMETALSIDEAREA	lef/lefwWriter.cpp	166;"	d	file:
LEFW_ANTENNASIDEAREAFACTOR	lef/lefwWriter.cpp	163;"	d	file:
LEFW_ANTENNASIDEAREARATIO	lef/lefwWriter.cpp	157;"	d	file:
LEFW_ANTENNASIZE	lef/lefwWriter.cpp	63;"	d	file:
LEFW_ARRAY	lef/lefwWriter.cpp	64;"	d	file:
LEFW_ARRAY_END	lef/lefwWriter.cpp	126;"	d	file:
LEFW_ARRAY_START	lef/lefwWriter.cpp	46;"	d	file:
LEFW_BAD_DATA	clef/lefwWriter.h	44;"	d
LEFW_BAD_DATA	lef/lefwWriter.hpp	45;"	d
LEFW_BAD_ORDER	clef/lefwWriter.h	43;"	d
LEFW_BAD_ORDER	lef/lefwWriter.hpp	44;"	d
LEFW_BEGINEXT	lef/lefwWriter.cpp	65;"	d	file:
LEFW_BEGINEXT_END	lef/lefwWriter.cpp	127;"	d	file:
LEFW_BEGINEXT_START	lef/lefwWriter.cpp	47;"	d	file:
LEFW_BUSBITCHARS	lef/lefwWriter.cpp	66;"	d	file:
LEFW_CASESENSITIVE	lef/lefwWriter.cpp	67;"	d	file:
LEFW_CLEARANCEMEASURE	lef/lefwWriter.cpp	173;"	d	file:
LEFW_CORRECTTABLE	lef/lefwWriter.cpp	68;"	d	file:
LEFW_CORRECTTABLE_END	lef/lefwWriter.cpp	128;"	d	file:
LEFW_CORRECTTABLE_START	lef/lefwWriter.cpp	48;"	d	file:
LEFW_DENSITYCHECKSTEP	lef/lefwWriter.cpp	175;"	d	file:
LEFW_DENSITYCHECKWINDOW	lef/lefwWriter.cpp	174;"	d	file:
LEFW_DESIGNRULEWIDTH	lef/lefwWriter.cpp	176;"	d	file:
LEFW_DIELECTRIC	lef/lefwWriter.cpp	69;"	d	file:
LEFW_DIVIDERCHAR	lef/lefwWriter.cpp	70;"	d	file:
LEFW_DONE	lef/lefwWriter.cpp	194;"	d	file:
LEFW_EDGERATE	lef/lefwWriter.cpp	71;"	d	file:
LEFW_END	lef/lefwWriter.cpp	125;"	d	file:
LEFW_FILLACTIVESPACING	lef/lefwWriter.cpp	177;"	d	file:
LEFW_FIXEDMASK	lef/lefwWriter.cpp	192;"	d	file:
LEFW_INIT	lef/lefwWriter.cpp	45;"	d	file:
LEFW_IRDROP	lef/lefwWriter.cpp	72;"	d	file:
LEFW_IRDROP_END	lef/lefwWriter.cpp	129;"	d	file:
LEFW_IRDROP_START	lef/lefwWriter.cpp	49;"	d	file:
LEFW_LAYER	lef/lefwWriter.cpp	73;"	d	file:
LEFW_LAYERACCURRENT	lef/lefwWriter.cpp	74;"	d	file:
LEFW_LAYERDCCURRENT	lef/lefwWriter.cpp	75;"	d	file:
LEFW_LAYERROUTING	lef/lefwWriter.cpp	76;"	d	file:
LEFW_LAYERROUTINGWIDTH	lef/lefwWriter.cpp	77;"	d	file:
LEFW_LAYERROUTING_END	lef/lefwWriter.cpp	131;"	d	file:
LEFW_LAYERROUTING_SPACINGTABLE_END	lef/lefwWriter.cpp	132;"	d	file:
LEFW_LAYERROUTING_SP_START	lef/lefwWriter.cpp	52;"	d	file:
LEFW_LAYERROUTING_START	lef/lefwWriter.cpp	51;"	d	file:
LEFW_LAYER_END	lef/lefwWriter.cpp	130;"	d	file:
LEFW_LAYER_START	lef/lefwWriter.cpp	50;"	d	file:
LEFW_MACRO	lef/lefwWriter.cpp	78;"	d	file:
LEFW_MACRO_CAPACITANCE	lef/lefwWriter.cpp	79;"	d	file:
LEFW_MACRO_END	lef/lefwWriter.cpp	133;"	d	file:
LEFW_MACRO_FALLCURRENTSOURCE	lef/lefwWriter.cpp	81;"	d	file:
LEFW_MACRO_FALLSATCUR	lef/lefwWriter.cpp	82;"	d	file:
LEFW_MACRO_FALLTHRESH	lef/lefwWriter.cpp	83;"	d	file:
LEFW_MACRO_FALLVOLTAGETHRESHOLD	lef/lefwWriter.cpp	84;"	d	file:
LEFW_MACRO_INPUTNOISEMARGIN	lef/lefwWriter.cpp	80;"	d	file:
LEFW_MACRO_IV_TABLES	lef/lefwWriter.cpp	85;"	d	file:
LEFW_MACRO_LEAKAGE	lef/lefwWriter.cpp	86;"	d	file:
LEFW_MACRO_LEQ	lef/lefwWriter.cpp	87;"	d	file:
LEFW_MACRO_OUTPUTNOISEMARGIN	lef/lefwWriter.cpp	88;"	d	file:
LEFW_MACRO_OUTPUTRESISTANCE	lef/lefwWriter.cpp	89;"	d	file:
LEFW_MACRO_PINFOREIGN	lef/lefwWriter.cpp	90;"	d	file:
LEFW_MACRO_PINLEQ	lef/lefwWriter.cpp	91;"	d	file:
LEFW_MACRO_POWER	lef/lefwWriter.cpp	92;"	d	file:
LEFW_MACRO_PULLDOWNRES	lef/lefwWriter.cpp	93;"	d	file:
LEFW_MACRO_RESISTANCE	lef/lefwWriter.cpp	94;"	d	file:
LEFW_MACRO_RISESATCUR	lef/lefwWriter.cpp	95;"	d	file:
LEFW_MACRO_RISETHRESH	lef/lefwWriter.cpp	96;"	d	file:
LEFW_MACRO_RISEVOLTAGETHRESHOLD	lef/lefwWriter.cpp	97;"	d	file:
LEFW_MACRO_SOURCE	lef/lefwWriter.cpp	98;"	d	file:
LEFW_MACRO_START	lef/lefwWriter.cpp	53;"	d	file:
LEFW_MACRO_TIEOFFR	lef/lefwWriter.cpp	99;"	d	file:
LEFW_MACRO_TIMING	lef/lefwWriter.cpp	100;"	d	file:
LEFW_MACRO_VHI	lef/lefwWriter.cpp	101;"	d	file:
LEFW_MACRO_VLO	lef/lefwWriter.cpp	102;"	d	file:
LEFW_MANUFACTURINGGRID	lef/lefwWriter.cpp	178;"	d	file:
LEFW_MAXADJACENTSLOTSPACING	lef/lefwWriter.cpp	179;"	d	file:
LEFW_MAXCOAXIALSLOTSPACING	lef/lefwWriter.cpp	180;"	d	file:
LEFW_MAXEDGESLOTSPACING	lef/lefwWriter.cpp	181;"	d	file:
LEFW_MAXIMUMDENSITY	lef/lefwWriter.cpp	182;"	d	file:
LEFW_MINFEATURE	lef/lefwWriter.cpp	103;"	d	file:
LEFW_MINIMUMDENSITY	lef/lefwWriter.cpp	183;"	d	file:
LEFW_MIX_VERSION_DATA	clef/lefwWriter.h	47;"	d
LEFW_MIX_VERSION_DATA	lef/lefwWriter.hpp	48;"	d
LEFW_NOISEMARGIN	lef/lefwWriter.cpp	106;"	d	file:
LEFW_NOISETABLE	lef/lefwWriter.cpp	107;"	d	file:
LEFW_NOISETABLE_END	lef/lefwWriter.cpp	134;"	d	file:
LEFW_NOISETABLE_START	lef/lefwWriter.cpp	54;"	d	file:
LEFW_NONDEFAULTRULE	lef/lefwWriter.cpp	104;"	d	file:
LEFW_NONDEFAULTRULELAYER	lef/lefwWriter.cpp	105;"	d	file:
LEFW_NONDEFAULTRULE_END	lef/lefwWriter.cpp	135;"	d	file:
LEFW_NONDEFAULTRULE_START	lef/lefwWriter.cpp	55;"	d	file:
LEFW_NOWIREEXTATPIN	lef/lefwWriter.cpp	108;"	d	file:
LEFW_OBSOLETE	clef/lefwWriter.h	48;"	d
LEFW_OBSOLETE	lef/lefwWriter.hpp	49;"	d
LEFW_OK	clef/lefwWriter.h	41;"	d
LEFW_OK	lef/lefwWriter.hpp	42;"	d
LEFW_PROPERTYDEF	lef/lefwWriter.cpp	109;"	d	file:
LEFW_PROPERTYDEF_END	lef/lefwWriter.cpp	136;"	d	file:
LEFW_PROPERTYDEF_START	lef/lefwWriter.cpp	56;"	d	file:
LEFW_ROWABUTSPACING	lef/lefwWriter.cpp	184;"	d	file:
LEFW_ROWMINSPACING	lef/lefwWriter.cpp	185;"	d	file:
LEFW_SCALEFACTOR	lef/lefwWriter.cpp	110;"	d	file:
LEFW_SITE	lef/lefwWriter.cpp	111;"	d	file:
LEFW_SITE_END	lef/lefwWriter.cpp	137;"	d	file:
LEFW_SLOTLENGTH	lef/lefwWriter.cpp	189;"	d	file:
LEFW_SLOTWIDTH	lef/lefwWriter.cpp	188;"	d	file:
LEFW_SLOTWIRELENGTH	lef/lefwWriter.cpp	187;"	d	file:
LEFW_SLOTWIREWIDTH	lef/lefwWriter.cpp	186;"	d	file:
LEFW_SPACING	lef/lefwWriter.cpp	112;"	d	file:
LEFW_SPACING_END	lef/lefwWriter.cpp	138;"	d	file:
LEFW_SPACING_START	lef/lefwWriter.cpp	57;"	d	file:
LEFW_SPLITWIREWIDTH	lef/lefwWriter.cpp	190;"	d	file:
LEFW_THRESHOLD1	lef/lefwWriter.cpp	113;"	d	file:
LEFW_THRESHOLD2	lef/lefwWriter.cpp	114;"	d	file:
LEFW_UNINIT	lef/lefwWriter.cpp	44;"	d	file:
LEFW_UNINITIALIZED	clef/lefwWriter.h	42;"	d
LEFW_UNINITIALIZED	lef/lefwWriter.hpp	43;"	d
LEFW_UNITS	lef/lefwWriter.cpp	115;"	d	file:
LEFW_UNITS_END	lef/lefwWriter.cpp	142;"	d	file:
LEFW_UNITS_START	lef/lefwWriter.cpp	58;"	d	file:
LEFW_USEMINSPACING	lef/lefwWriter.cpp	191;"	d	file:
LEFW_VERSION	lef/lefwWriter.cpp	116;"	d	file:
LEFW_VIA	lef/lefwWriter.cpp	117;"	d	file:
LEFW_VIAFOREIGN	lef/lefwWriter.cpp	118;"	d	file:
LEFW_VIARULE	lef/lefwWriter.cpp	119;"	d	file:
LEFW_VIARULEGEN	lef/lefwWriter.cpp	121;"	d	file:
LEFW_VIARULEGENERATE	lef/lefwWriter.cpp	120;"	d	file:
LEFW_VIARULEGEN_END	lef/lefwWriter.cpp	141;"	d	file:
LEFW_VIARULEGEN_START	lef/lefwWriter.cpp	61;"	d	file:
LEFW_VIARULE_END	lef/lefwWriter.cpp	140;"	d	file:
LEFW_VIARULE_START	lef/lefwWriter.cpp	60;"	d	file:
LEFW_VIATOPOFSTACKONLY	lef/lefwWriter.cpp	122;"	d	file:
LEFW_VIAVIARULE	lef/lefwWriter.cpp	123;"	d	file:
LEFW_VIA_END	lef/lefwWriter.cpp	139;"	d	file:
LEFW_VIA_START	lef/lefwWriter.cpp	59;"	d	file:
LEFW_WRITERCALLS_H	lef/lefwWriter.hpp	31;"	d
LEFW_WRONG_VERSION	clef/lefwWriter.h	46;"	d
LEFW_WRONG_VERSION	lef/lefwWriter.hpp	47;"	d
LEF_BISON_SRCS	clef/Makefile	/^LEF_BISON_SRCS  = lef.y$/;"	m
LEF_BISON_SRCS	lef/Makefile	/^LEF_BISON_SRCS  = lef.y$/;"	m
LEF_INIT	lef/lefrReader.cpp	42;"	d	file:
LEF_TABNAME	clef/Makefile	/^LEF_TABNAME     = lef$/;"	m
LEF_TABNAME	clefzlib/Makefile	/^LEF_TABNAME     = clefzlib$/;"	m
LEF_TABNAME	lef/Makefile	/^LEF_TABNAME     = lef$/;"	m
LEF_TABNAME	lefzlib/Makefile	/^LEF_TABNAME     = lefzlib$/;"	m
LEQ	lef/lefiMacro.cpp	/^lefiMacro::LEQ() const$/;"	f	class:lefiMacro
LEQ	lef/lefiMacro.cpp	/^lefiPin::LEQ() const$/;"	f	class:lefiPin
LEQSize_	lef/lefiMacro.hpp	/^  int    LEQSize_;$/;"	m	class:lefiPin
LEQSize_	lef/lefiMacro.hpp	/^  int LEQSize_;$/;"	m	class:lefiMacro
LEQ_	lef/lefiMacro.hpp	/^  char*  LEQ_;$/;"	m	class:lefiPin
LEQ_	lef/lefiMacro.hpp	/^  char* LEQ_;$/;"	m	class:lefiMacro
LIBOBJS	template.mk	/^LIBOBJS =	$(TMP2:.c=.o)$/;"	m
LIBSRCS	clef/Makefile	/^LIBSRCS =           xlefiArray.cpp \\$/;"	m
LIBSRCS	clefzlib/Makefile	/^LIBSRCS =	clefzlib.c $/;"	m
LIBSRCS	lef/Makefile	/^LIBSRCS =  \\$/;"	m
LIBSRCS	lefzlib/Makefile	/^LIBSRCS =	lefzlib.cpp$/;"	m
LIBTARGET	clef/Makefile	/^LIBTARGET =	libclef.a$/;"	m
LIBTARGET	clefzlib/Makefile	/^LIBTARGET =	libclefzlib.a$/;"	m
LIBTARGET	lef/Makefile	/^LIBTARGET =	liblef.a$/;"	m
LIBTARGET	lefrw/Makefile	/^LIBTARGET =	$/;"	m
LIBTARGET	lefwrite/Makefile	/^LIBTARGET =	$/;"	m
LIBTARGET	lefzlib/Makefile	/^LIBTARGET =	liblefzlib.a$/;"	m
LayerCbk	lef/lefrCallBacks.hpp	/^    lefrLayerCbkFnType LayerCbk;$/;"	m	class:lefrCallbacks
LayerWarnings	lef/lefrSettings.hpp	/^    int LayerWarnings;$/;"	m	class:lefrSettings
Lef58TypePairs	lef/lefrSettings.hpp	/^    StringSet Lef58TypePairs;$/;"	m	class:lefrSettings
LibraryEndCbk	lef/lefrCallBacks.hpp	/^    lefrVoidCbkFnType LibraryEndCbk;$/;"	m	class:lefrCallbacks
LineNumberFunction	lef/lefrSettings.hpp	/^    LEFI_LINE_NUMBER_FUNCTION LineNumberFunction;$/;"	m	class:lefrSettings
LogFileAppend	lef/lefrSettings.hpp	/^    int LogFileAppend;$/;"	m	class:lefrSettings
MAX	lef/lefiDefs.hpp	97;"	d
MAXCBS	lef/lefwWriterCalls.cpp	46;"	d	file:
MAXINT	lef/lefiDefs.hpp	86;"	d
MAXSYN	lef/lefwWriter.cpp	196;"	d	file:
MAX_LEF_MSGS	clef/lefrReader.h	40;"	d
MAX_LEF_MSGS	lef/lefrReader.hpp	41;"	d
MIN	lef/lefiDefs.hpp	93;"	d
MININT	lef/lefiDefs.hpp	89;"	d
MacroBeginCbk	lef/lefrCallBacks.hpp	/^    lefrStringCbkFnType MacroBeginCbk;$/;"	m	class:lefrCallbacks
MacroCbk	lef/lefrCallBacks.hpp	/^    lefrMacroCbkFnType MacroCbk;$/;"	m	class:lefrCallbacks
MacroClassTypeCbk	lef/lefrCallBacks.hpp	/^    lefrStringCbkFnType MacroClassTypeCbk;$/;"	m	class:lefrCallbacks
MacroEndCbk	lef/lefrCallBacks.hpp	/^    lefrStringCbkFnType MacroEndCbk;$/;"	m	class:lefrCallbacks
MacroFixedMaskCbk	lef/lefrCallBacks.hpp	/^    lefrIntegerCbkFnType MacroFixedMaskCbk;$/;"	m	class:lefrCallbacks
MacroForeignCbk	lef/lefrCallBacks.hpp	/^    lefrMacroForeignCbkFnType MacroForeignCbk;$/;"	m	class:lefrCallbacks
MacroOriginCbk	lef/lefrCallBacks.hpp	/^    lefrMacroNumCbkFnType MacroOriginCbk;$/;"	m	class:lefrCallbacks
MacroSiteCbk	lef/lefrCallBacks.hpp	/^    lefrMacroSiteCbkFnType MacroSiteCbk;$/;"	m	class:lefrCallbacks
MacroSizeCbk	lef/lefrCallBacks.hpp	/^    lefrMacroNumCbkFnType MacroSizeCbk;$/;"	m	class:lefrCallbacks
MacroWarnings	lef/lefrSettings.hpp	/^    int MacroWarnings;$/;"	m	class:lefrSettings
MallocFunction	lef/lefrSettings.hpp	/^    LEFI_MALLOC_FUNCTION MallocFunction;$/;"	m	class:lefrSettings
ManufacturingCbk	lef/lefrCallBacks.hpp	/^    lefrDoubleCbkFnType ManufacturingCbk;$/;"	m	class:lefrCallbacks
MaxStackViaCbk	lef/lefrCallBacks.hpp	/^    lefrMaxStackViaCbkFnType MaxStackViaCbk;$/;"	m	class:lefrCallbacks
MaxStackViaWarnings	lef/lefrSettings.hpp	/^    int MaxStackViaWarnings;$/;"	m	class:lefrSettings
MinFeatureCbk	lef/lefrCallBacks.hpp	/^    lefrMinFeatureCbkFnType MinFeatureCbk;$/;"	m	class:lefrCallbacks
MinFeatureWarnings	lef/lefrSettings.hpp	/^    int MinFeatureWarnings;$/;"	m	class:lefrSettings
MsgLimit	lef/lefrSettings.hpp	/^    int MsgLimit[MAX_LEF_MSGS];$/;"	m	class:lefrSettings
MsgsDisableMap	lef/lefrSettings.hpp	/^typedef std::map<int, int>                              MsgsDisableMap;$/;"	t
NOCBK	lef/lefrReader.cpp	39;"	d	file:
NOLEFMSG	lef/lefrReader.cpp	40;"	d	file:
NULL	lef/lefiDefs.hpp	53;"	d
NoWireExtensionCbk	lef/lefrCallBacks.hpp	/^    lefrStringCbkFnType NoWireExtensionCbk;$/;"	m	class:lefrCallbacks
NoWireExtensionWarnings	lef/lefrSettings.hpp	/^    int NoWireExtensionWarnings;$/;"	m	class:lefrSettings
NoiseMarginCbk	lef/lefrCallBacks.hpp	/^    lefrNoiseMarginCbkFnType NoiseMarginCbk;$/;"	m	class:lefrCallbacks
NoiseMarginWarnings	lef/lefrSettings.hpp	/^    int NoiseMarginWarnings;$/;"	m	class:lefrSettings
NoiseTableCbk	lef/lefrCallBacks.hpp	/^    lefrNoiseTableCbkFnType NoiseTableCbk;$/;"	m	class:lefrCallbacks
NoiseTableWarnings	lef/lefrSettings.hpp	/^    int NoiseTableWarnings;$/;"	m	class:lefrSettings
NonDefaultCbk	lef/lefrCallBacks.hpp	/^    lefrNonDefaultCbkFnType NonDefaultCbk;$/;"	m	class:lefrCallbacks
NonDefaultWarnings	lef/lefrSettings.hpp	/^    int NonDefaultWarnings;$/;"	m	class:lefrSettings
OPTIMIZE_FLAG	Makefile	/^OPTIMIZE_FLAG = +O2$/;"	m
OPTIMIZE_FLAG	Makefile	/^OPTIMIZE_FLAG = -O$/;"	m
OS_TYPE	Makefile	/^OS_TYPE := $(shell uname)$/;"	m
OS_TYPE	template.mk	/^OS_TYPE	:= $(shell uname -s)$/;"	m
OS_VER	Makefile	/^OS_VER := $(shell uname -r)$/;"	m
ObstructionCbk	lef/lefrCallBacks.hpp	/^    lefrObstructionCbkFnType ObstructionCbk;$/;"	m	class:lefrCallbacks
OutputAntennaCbk	lef/lefrCallBacks.hpp	/^    lefrDoubleCbkFnType OutputAntennaCbk;$/;"	m	class:lefrCallbacks
OutputAntennaWarnings	lef/lefrSettings.hpp	/^    int OutputAntennaWarnings;$/;"	m	class:lefrSettings
PARSE_ERROR	clef/lefrReader.h	507;"	d
PARSE_ERROR	lef/lefrReader.hpp	580;"	d
PARSE_OK	clef/lefrReader.h	505;"	d
PARSE_OK	lef/lefrReader.hpp	578;"	d
POINT_SPEC	lef/lefiDefs.hpp	79;"	d
PUBLIC_HDRS	clef/Makefile	/^PUBLIC_HDRS =       lefiArray.h \\$/;"	m
PUBLIC_HDRS	clefzlib/Makefile	/^PUBLIC_HDRS =   lefzlib.h$/;"	m
PUBLIC_HDRS	lef/Makefile	/^PUBLIC_HDRS =       lefiArray.hpp \\$/;"	m
PUBLIC_HDRS	lefdiff/Makefile	/^PUBLIC_HDRS = $/;"	m
PUBLIC_HDRS	lefzlib/Makefile	/^PUBLIC_HDRS =   lefzlib.hpp$/;"	m
PWLdiffusion	lef/lefiLayer.cpp	/^lefiAntennaPWL::PWLdiffusion(int index)$/;"	f	class:lefiAntennaPWL
PWLratio	lef/lefiLayer.cpp	/^lefiAntennaPWL::PWLratio(int index)$/;"	f	class:lefiAntennaPWL
PinCbk	lef/lefrCallBacks.hpp	/^    lefrPinCbkFnType PinCbk;$/;"	m	class:lefrCallbacks
PinWarnings	lef/lefrSettings.hpp	/^    int PinWarnings;$/;"	m	class:lefrSettings
PropBeginCbk	lef/lefrCallBacks.hpp	/^    lefrVoidCbkFnType PropBeginCbk;$/;"	m	class:lefrCallbacks
PropCbk	lef/lefrCallBacks.hpp	/^    lefrPropCbkFnType PropCbk;$/;"	m	class:lefrCallbacks
PropEndCbk	lef/lefrCallBacks.hpp	/^    lefrVoidCbkFnType PropEndCbk;$/;"	m	class:lefrCallbacks
RING_SIZE	lef/lefrData.hpp	54;"	d
ROUND	lef/lefiDefs.hpp	100;"	d
ReadEncrypted	lef/lefrSettings.hpp	/^    int ReadEncrypted; $/;"	m	class:lefrSettings
ReadFunction	lef/lefrSettings.hpp	/^    LEFI_READ_FUNCTION ReadFunction;$/;"	m	class:lefrSettings
ReallocFunction	lef/lefrSettings.hpp	/^    LEFI_REALLOC_FUNCTION ReallocFunction;$/;"	m	class:lefrSettings
RegisterUnused	lef/lefrSettings.hpp	/^    int RegisterUnused;$/;"	m	class:lefrSettings
RelaxMode	lef/lefrSettings.hpp	/^    int RelaxMode;$/;"	m	class:lefrSettings
SDFcond	lef/lefiMacro.cpp	/^lefiTiming::SDFcond()$/;"	f	class:lefiTiming
SDFcondEnd	lef/lefiMacro.cpp	/^lefiTiming::SDFcondEnd()$/;"	f	class:lefiTiming
SDFcondEnd_	lef/lefiMacro.hpp	/^  char* SDFcondEnd_;$/;"	m	class:lefiTiming
SDFcondStart	lef/lefiMacro.cpp	/^lefiTiming::SDFcondStart()$/;"	f	class:lefiTiming
SDFcondStart_	lef/lefiMacro.hpp	/^  char* SDFcondStart_;$/;"	m	class:lefiTiming
SDFcond_	lef/lefiMacro.hpp	/^  char* SDFcond_;$/;"	m	class:lefiTiming
SDFfromTrigger	lef/lefiMacro.cpp	/^lefiTiming::SDFfromTrigger()$/;"	f	class:lefiTiming
SDFfromTrigger_	lef/lefiMacro.hpp	/^  char* SDFfromTrigger_;$/;"	m	class:lefiTiming
SDFonePinTriggerType	lef/lefiMacro.cpp	/^lefiTiming::SDFonePinTriggerType()$/;"	f	class:lefiTiming
SDFtoTrigger	lef/lefiMacro.cpp	/^lefiTiming::SDFtoTrigger()$/;"	f	class:lefiTiming
SDFtoTrigger_	lef/lefiMacro.hpp	/^  char* SDFtoTrigger_;$/;"	m	class:lefiTiming
SDFtriggerOne	lef/lefiMacro.cpp	/^lefiTiming::SDFtriggerOne()$/;"	f	class:lefiTiming
SDFtriggerTableOne_	lef/lefiMacro.hpp	/^  double SDFtriggerTableOne_;$/;"	m	class:lefiTiming
SDFtriggerTableThree_	lef/lefiMacro.hpp	/^  double SDFtriggerTableThree_;$/;"	m	class:lefiTiming
SDFtriggerTableTwo_	lef/lefiMacro.hpp	/^  double SDFtriggerTableTwo_;$/;"	m	class:lefiTiming
SDFtriggerThree	lef/lefiMacro.cpp	/^lefiTiming::SDFtriggerThree()$/;"	f	class:lefiTiming
SDFtriggerTwo	lef/lefiMacro.cpp	/^lefiTiming::SDFtriggerTwo()$/;"	f	class:lefiTiming
SDFtriggerType_	lef/lefiMacro.hpp	/^  char* SDFtriggerType_;$/;"	m	class:lefiTiming
SDFtwoPinTriggerType	lef/lefiMacro.cpp	/^lefiTiming::SDFtwoPinTriggerType()$/;"	f	class:lefiTiming
SHAPE_SPEC	lef/lefiDefs.hpp	83;"	d
SHELL	template.mk	/^SHELL=\/bin\/sh$/;"	m
START_LIST	lef/lefiDefs.hpp	78;"	d
STOP_PARSE	clef/lefrReader.h	506;"	d
STOP_PARSE	lef/lefrReader.hpp	579;"	d
SetLogFunction	lef/lefrSettings.hpp	/^    LEFI_LOG_FUNCTION SetLogFunction;$/;"	m	class:lefrSettings
ShiftCase	lef/lefrSettings.hpp	/^    int ShiftCase;$/;"	m	class:lefrSettings
SiteCbk	lef/lefrCallBacks.hpp	/^    lefrSiteCbkFnType SiteCbk;$/;"	m	class:lefrCallbacks
SiteWarnings	lef/lefrSettings.hpp	/^    int SiteWarnings;$/;"	m	class:lefrSettings
SpacingBeginCbk	lef/lefrCallBacks.hpp	/^    lefrVoidCbkFnType SpacingBeginCbk;$/;"	m	class:lefrCallbacks
SpacingCbk	lef/lefrCallBacks.hpp	/^    lefrSpacingCbkFnType SpacingCbk;$/;"	m	class:lefrCallbacks
SpacingEndCbk	lef/lefrCallBacks.hpp	/^    lefrVoidCbkFnType SpacingEndCbk;$/;"	m	class:lefrCallbacks
SpacingWarnings	lef/lefrSettings.hpp	/^    int SpacingWarnings;$/;"	m	class:lefrSettings
StringSet	lef/lefrSettings.hpp	/^typedef std::set<std::string>               StringSet;$/;"	t
TEST_FILE	TEST/Makefile	/^TEST_FILE = complete.5.8.lef$/;"	m
TEST_GOLD	TEST/Makefile	/^TEST_GOLD = complete.5.8.lef.au$/;"	m
TMP1	template.mk	/^TMP1	=	$(LIBSRCS:.cpp=.o)$/;"	m
TMP2	template.mk	/^TMP2	=	$(TMP1:.cc=.o)$/;"	m
TMP3	template.mk	/^TMP3	=	$(BINSRCS:.cpp=.o)$/;"	m
TMP4	template.mk	/^TMP4	=	$(TMP3:.cc=.o)$/;"	m
TOKEN_SIZE	lef/lefrData.hpp	56;"	d
TRUE	lef/lefiDefs.hpp	45;"	d
TSIZE	clef/lefMsgTable.h	10;"	d
TSIZE	clef/lefMsgTable.h	11;"	d
TimingCbk	lef/lefrCallBacks.hpp	/^    lefrTimingCbkFnType TimingCbk;$/;"	m	class:lefrCallbacks
TimingWarnings	lef/lefrSettings.hpp	/^    int TimingWarnings;$/;"	m	class:lefrSettings
TotalMsgLimit	lef/lefrSettings.hpp	/^    int TotalMsgLimit;$/;"	m	class:lefrSettings
UNlefGetc	lef/lef_keywords.cpp	/^UNlefGetc(char ch)$/;"	f
USE_LEFDEF_PARSER_NAMESPACE	lef/lefiKRDefs.hpp	35;"	d
UnitsCbk	lef/lefrCallBacks.hpp	/^    lefrUnitsCbkFnType UnitsCbk;$/;"	m	class:lefrCallbacks
UnitsWarnings	lef/lefrSettings.hpp	/^    int UnitsWarnings;$/;"	m	class:lefrSettings
UseMinSpacingCbk	lef/lefrCallBacks.hpp	/^    lefrUseMinSpacingCbkFnType UseMinSpacingCbk;$/;"	m	class:lefrCallbacks
UseMinSpacingWarnings	lef/lefrSettings.hpp	/^    int UseMinSpacingWarnings;$/;"	m	class:lefrSettings
UserData	lef/lefrSettings.hpp	/^    lefiUserData UserData;$/;"	m	class:lefrSettings
VHI	lef/lefiMacro.cpp	/^lefiPin::VHI() const$/;"	f	class:lefiPin
VHI_	lef/lefiMacro.hpp	/^  double VHI_;$/;"	m	class:lefiPin
VIA_SPEC	lef/lefiDefs.hpp	80;"	d
VLO	lef/lefiMacro.cpp	/^lefiPin::VLO() const$/;"	f	class:lefiPin
VLO_	lef/lefiMacro.hpp	/^  double VLO_;$/;"	m	class:lefiPin
VersionCbk	lef/lefrCallBacks.hpp	/^    lefrDoubleCbkFnType VersionCbk;$/;"	m	class:lefrCallbacks
VersionIdent	lefdiff/differLef.cpp	/^char* VersionIdent = "N\/A";$/;"	v
VersionNum	lef/lefrSettings.hpp	/^    double VersionNum;$/;"	m	class:lefrSettings
VersionStrCbk	lef/lefrCallBacks.hpp	/^    lefrStringCbkFnType VersionStrCbk;$/;"	m	class:lefrCallbacks
ViaCbk	lef/lefrCallBacks.hpp	/^    lefrViaCbkFnType ViaCbk;$/;"	m	class:lefrCallbacks
ViaRuleCbk	lef/lefrCallBacks.hpp	/^    lefrViaRuleCbkFnType ViaRuleCbk;$/;"	m	class:lefrCallbacks
ViaRuleWarnings	lef/lefrSettings.hpp	/^    int ViaRuleWarnings;$/;"	m	class:lefrSettings
ViaWarnings	lef/lefrSettings.hpp	/^    int ViaWarnings;$/;"	m	class:lefrSettings
WIDTH_SPEC	lef/lefiDefs.hpp	81;"	d
WRITER_CALLBACK	lef/lefwWriterCalls.cpp	85;"	d	file:
WarningLogFunction	lef/lefrSettings.hpp	/^    LEFI_WARNING_LOG_FUNCTION WarningLogFunction;$/;"	m	class:lefrSettings
ac_layer_table_opt	lef/lef.y	/^ac_layer_table_opt:  \/\/ empty $/;"	l
accurrent	lef/lefiLayer.cpp	/^lefiLayer::accurrent(int index) const$/;"	f	class:lefiLayer
accurrentAllocated_	lef/lefiLayer.hpp	/^  int accurrentAllocated_;$/;"	m	class:lefiLayer
accurrents_	lef/lefiLayer.hpp	/^  lefiLayerDensity** accurrents_;$/;"	m	class:lefiLayer
add	lef/lefiMisc.cpp	/^lefiGeometries::add(void            *v,$/;"	f	class:lefiGeometries
addAcCutarea	lef/lefiLayer.cpp	/^lefiLayer::addAcCutarea()$/;"	f	class:lefiLayer
addAcFrequency	lef/lefiLayer.cpp	/^lefiLayer::addAcFrequency()$/;"	f	class:lefiLayer
addAcTableEntry	lef/lefiLayer.cpp	/^lefiLayer::addAcTableEntry()$/;"	f	class:lefiLayer
addAcWidth	lef/lefiLayer.cpp	/^lefiLayer::addAcWidth()$/;"	f	class:lefiLayer
addAccurrentDensity	lef/lefiLayer.cpp	/^lefiLayer::addAccurrentDensity(const char *type)$/;"	f	class:lefiLayer
addAntennaDiffArea	lef/lefiMacro.cpp	/^lefiPin::addAntennaDiffArea(double      val,$/;"	f	class:lefiPin
addAntennaGateArea	lef/lefiMacro.cpp	/^lefiPin::addAntennaGateArea(double      val,$/;"	f	class:lefiPin
addAntennaGateArea	lef/lefiMacro.cpp	/^lefiPinAntennaModel::addAntennaGateArea(double      val,$/;"	f	class:lefiPinAntennaModel
addAntennaMaxAreaCar	lef/lefiMacro.cpp	/^lefiPin::addAntennaMaxAreaCar(double        val,$/;"	f	class:lefiPin
addAntennaMaxAreaCar	lef/lefiMacro.cpp	/^lefiPinAntennaModel::addAntennaMaxAreaCar(double        val,$/;"	f	class:lefiPinAntennaModel
addAntennaMaxCutCar	lef/lefiMacro.cpp	/^lefiPin::addAntennaMaxCutCar(double     val,$/;"	f	class:lefiPin
addAntennaMaxCutCar	lef/lefiMacro.cpp	/^lefiPinAntennaModel::addAntennaMaxCutCar(double     val,$/;"	f	class:lefiPinAntennaModel
addAntennaMaxSideAreaCar	lef/lefiMacro.cpp	/^lefiPin::addAntennaMaxSideAreaCar(double        val,$/;"	f	class:lefiPin
addAntennaMaxSideAreaCar	lef/lefiMacro.cpp	/^lefiPinAntennaModel::addAntennaMaxSideAreaCar(double        val,$/;"	f	class:lefiPinAntennaModel
addAntennaMetalArea	lef/lefiMacro.cpp	/^lefiPin::addAntennaMetalArea(double     val,$/;"	f	class:lefiPin
addAntennaMetalLength	lef/lefiMacro.cpp	/^lefiPin::addAntennaMetalLength(double       val,$/;"	f	class:lefiPin
addAntennaModel	lef/lefiLayer.cpp	/^lefiLayer::addAntennaModel(int aOxide)$/;"	f	class:lefiLayer
addAntennaModel	lef/lefiMacro.cpp	/^lefiPin::addAntennaModel(int oxide)$/;"	f	class:lefiPin
addAntennaPWL	lef/lefiLayer.cpp	/^lefiAntennaPWL::addAntennaPWL(double    d,$/;"	f	class:lefiAntennaPWL
addAntennaPartialCutArea	lef/lefiMacro.cpp	/^lefiPin::addAntennaPartialCutArea(double        val,$/;"	f	class:lefiPin
addAntennaPartialMetalArea	lef/lefiMacro.cpp	/^lefiPin::addAntennaPartialMetalArea(double      val,$/;"	f	class:lefiPin
addAntennaPartialMetalSideArea	lef/lefiMacro.cpp	/^lefiPin::addAntennaPartialMetalSideArea(double      val,$/;"	f	class:lefiPin
addAntennaSize	lef/lefiMacro.cpp	/^lefiPin::addAntennaSize(double      val,$/;"	f	class:lefiPin
addArraySpacingArray	lef/lefiLayer.cpp	/^lefiLayer::addArraySpacingArray(int     arrayCut,$/;"	f	class:lefiLayer
addCanPlace	lef/lefiArray.cpp	/^lefiArray::addCanPlace(lefiSitePattern *s)$/;"	f	class:lefiArray
addCannotOccupy	lef/lefiArray.cpp	/^lefiArray::addCannotOccupy(lefiSitePattern *s)$/;"	f	class:lefiArray
addCapacitance	lef/lefiNonDefault.cpp	/^lefiNonDefault::addCapacitance(double num)$/;"	f	class:lefiNonDefault
addClass	lef/lefiMisc.cpp	/^lefiGeometries::addClass(const char *name)$/;"	f	class:lefiGeometries
addCutarea	lef/lefiLayer.cpp	/^lefiLayerDensity::addCutarea(int    num,$/;"	f	class:lefiLayerDensity
addDcCutarea	lef/lefiLayer.cpp	/^lefiLayer::addDcCutarea()$/;"	f	class:lefiLayer
addDcTableEntry	lef/lefiLayer.cpp	/^lefiLayer::addDcTableEntry()$/;"	f	class:lefiLayer
addDcWidth	lef/lefiLayer.cpp	/^lefiLayer::addDcWidth()$/;"	f	class:lefiLayer
addDccurrentDensity	lef/lefiLayer.cpp	/^lefiLayer::addDccurrentDensity(const char *type)$/;"	f	class:lefiLayer
addDefaultCap	lef/lefiArray.cpp	/^lefiArray::addDefaultCap(int    minPins,$/;"	f	class:lefiArray
addDelay	lef/lefiMacro.cpp	/^lefiTiming::addDelay(const char *risefall,$/;"	f	class:lefiTiming
addDiagWidth	lef/lefiNonDefault.cpp	/^lefiNonDefault::addDiagWidth(double num)$/;"	f	class:lefiNonDefault
addEdge	lef/lefiCrossTalk.cpp	/^lefiCorrectionEdge::addEdge(double d)$/;"	f	class:lefiCorrectionEdge
addEdge	lef/lefiCrossTalk.cpp	/^lefiCorrectionTable::addEdge(double d)$/;"	f	class:lefiCorrectionTable
addEdge	lef/lefiCrossTalk.cpp	/^lefiNoiseEdge::addEdge(double d)$/;"	f	class:lefiNoiseEdge
addEdge	lef/lefiCrossTalk.cpp	/^lefiNoiseTable::addEdge(double d)$/;"	f	class:lefiNoiseTable
addEdgeCap	lef/lefiNonDefault.cpp	/^lefiNonDefault::addEdgeCap(double num)$/;"	f	class:lefiNonDefault
addEnclosure	lef/lefiLayer.cpp	/^lefiLayer::addEnclosure(char    *enclRule,$/;"	f	class:lefiLayer
addEnclosureExceptEC	lef/lefiLayer.cpp	/^lefiLayer::addEnclosureExceptEC(double cutWithin)$/;"	f	class:lefiLayer
addEnclosureLength	lef/lefiLayer.cpp	/^lefiLayer::addEnclosureLength(double minLength)$/;"	f	class:lefiLayer
addEnclosureWidth	lef/lefiLayer.cpp	/^lefiLayer::addEnclosureWidth(double minWidth)$/;"	f	class:lefiLayer
addFloorPlan	lef/lefiArray.cpp	/^lefiArray::addFloorPlan(const char *name)$/;"	f	class:lefiArray
addForeign	lef/lefiMacro.cpp	/^lefiMacro::addForeign(const char    *name,$/;"	f	class:lefiMacro
addForeign	lef/lefiMacro.cpp	/^lefiPin::addForeign(const char  *name,$/;"	f	class:lefiPin
addFrequency	lef/lefiLayer.cpp	/^lefiLayerDensity::addFrequency(int      num,$/;"	f	class:lefiLayerDensity
addFromPin	lef/lefiMacro.cpp	/^lefiTiming::addFromPin(const char *name)$/;"	f	class:lefiTiming
addGcell	lef/lefiArray.cpp	/^lefiArray::addGcell(lefiGcellPattern *g)$/;"	f	class:lefiArray
addInfluence	lef/lefiLayer.cpp	/^lefiInfluence::addInfluence(double  width,$/;"	f	class:lefiInfluence
addInfluence	lef/lefiLayer.cpp	/^lefiSpacingTable::addInfluence(double   width,$/;"	f	class:lefiSpacingTable
addLayer	lef/lefiMacro.cpp	/^lefiDensity::addLayer(const char *name)$/;"	f	class:lefiDensity
addLayer	lef/lefiMisc.cpp	/^lefiGeometries::addLayer(const char *name)$/;"	f	class:lefiGeometries
addLayer	lef/lefiMisc.cpp	/^lefiTrackPattern::addLayer(const char *name)$/;"	f	class:lefiTrackPattern
addLayer	lef/lefiNonDefault.cpp	/^lefiNonDefault::addLayer(const char *name)$/;"	f	class:lefiNonDefault
addLayer	lef/lefiVia.cpp	/^lefiVia::addLayer(const char *name)$/;"	f	class:lefiVia
addLayerExceptPgNet	lef/lefiMisc.cpp	/^lefiGeometries::addLayerExceptPgNet()$/;"	f	class:lefiGeometries
addLayerMinSpacing	lef/lefiMisc.cpp	/^lefiGeometries::addLayerMinSpacing(double spacing)$/;"	f	class:lefiGeometries
addLayerRuleWidth	lef/lefiMisc.cpp	/^lefiGeometries::addLayerRuleWidth(double width)$/;"	f	class:lefiGeometries
addLef58Type	lef/lefrSettings.cpp	/^lefrSettings::addLef58Type(const char *lef58Type, $/;"	f	class:lefrSettings
addMinCuts	lef/lefiNonDefault.cpp	/^lefiNonDefault::addMinCuts(const char   *name,$/;"	f	class:lefiNonDefault
addMinenclosedarea	lef/lefiLayer.cpp	/^lefiLayer::addMinenclosedarea(double area)$/;"	f	class:lefiLayer
addMinenclosedareaWidth	lef/lefiLayer.cpp	/^lefiLayer::addMinenclosedareaWidth(double width)$/;"	f	class:lefiLayer
addMinimumcut	lef/lefiLayer.cpp	/^lefiLayer::addMinimumcut(int    mincut,$/;"	f	class:lefiLayer
addMinimumcutConnect	lef/lefiLayer.cpp	/^lefiLayer::addMinimumcutConnect(const char *connectType)$/;"	f	class:lefiLayer
addMinimumcutLengDis	lef/lefiLayer.cpp	/^lefiLayer::addMinimumcutLengDis(double  length,$/;"	f	class:lefiLayer
addMinimumcutWithin	lef/lefiLayer.cpp	/^lefiLayer::addMinimumcutWithin(double cutDistance)$/;"	f	class:lefiLayer
addMinstep	lef/lefiLayer.cpp	/^lefiLayer::addMinstep(double distance)$/;"	f	class:lefiLayer
addMinstepLengthsum	lef/lefiLayer.cpp	/^lefiLayer::addMinstepLengthsum(double maxLength)$/;"	f	class:lefiLayer
addMinstepMaxedges	lef/lefiLayer.cpp	/^lefiLayer::addMinstepMaxedges(int maxEdges)$/;"	f	class:lefiLayer
addMinstepMinAdjLength	lef/lefiLayer.cpp	/^lefiLayer::addMinstepMinAdjLength(double adjLength)$/;"	f	class:lefiLayer
addMinstepMinBetLength	lef/lefiLayer.cpp	/^lefiLayer::addMinstepMinBetLength(double betLength)$/;"	f	class:lefiLayer
addMinstepType	lef/lefiLayer.cpp	/^lefiLayer::addMinstepType(char *type)$/;"	f	class:lefiLayer
addMinstepXSameCorners	lef/lefiLayer.cpp	/^lefiLayer::addMinstepXSameCorners()$/;"	f	class:lefiLayer
addNumProp	lef/lefiLayer.cpp	/^lefiLayer::addNumProp(const char    *name,$/;"	f	class:lefiLayer
addNumProp	lef/lefiNonDefault.cpp	/^lefiNonDefault::addNumProp(const char   *name,$/;"	f	class:lefiNonDefault
addNumProp	lef/lefiVia.cpp	/^lefiVia::addNumProp(const char  *name,$/;"	f	class:lefiVia
addNumProp	lef/lefiViaRule.cpp	/^lefiViaRule::addNumProp(const char      *name,$/;"	f	class:lefiViaRule
addNumber	lef/lefiLayer.cpp	/^lefiLayer::addNumber(double num)$/;"	f	class:lefiLayer
addOrthogonal	lef/lefiLayer.cpp	/^lefiOrthogonal::addOrthogonal(double    cutWithin,$/;"	f	class:lefiOrthogonal
addParallelLength	lef/lefiLayer.cpp	/^lefiParallel::addParallelLength(int     numLength,$/;"	f	class:lefiParallel
addParallelLength	lef/lefiLayer.cpp	/^lefiSpacingTable::addParallelLength(int     numLength,$/;"	f	class:lefiSpacingTable
addParallelWidth	lef/lefiLayer.cpp	/^lefiParallel::addParallelWidth(double width)$/;"	f	class:lefiParallel
addParallelWidth	lef/lefiLayer.cpp	/^lefiSpacingTable::addParallelWidth(double width)$/;"	f	class:lefiSpacingTable
addParallelWidthSpacing	lef/lefiLayer.cpp	/^lefiParallel::addParallelWidthSpacing(int       numSpacing,$/;"	f	class:lefiParallel
addParallelWidthSpacing	lef/lefiLayer.cpp	/^lefiSpacingTable::addParallelWidthSpacing(int       numSpacing,$/;"	f	class:lefiSpacingTable
addPath	lef/lefiMisc.cpp	/^lefiGeometries::addPath(int colorMask)$/;"	f	class:lefiGeometries
addPathIter	lef/lefiMisc.cpp	/^lefiGeometries::addPathIter(int colorMask)$/;"	f	class:lefiGeometries
addPoly	lef/lefiVia.cpp	/^lefiViaLayer::addPoly(int               colorMask,$/;"	f	class:lefiViaLayer
addPolyToLayer	lef/lefiVia.cpp	/^lefiVia::addPolyToLayer(int             mask,$/;"	f	class:lefiVia
addPolygon	lef/lefiMisc.cpp	/^lefiGeometries::addPolygon(int colorMask)$/;"	f	class:lefiGeometries
addPolygonIter	lef/lefiMisc.cpp	/^lefiGeometries::addPolygonIter(int colorMask)$/;"	f	class:lefiGeometries
addPort	lef/lefiMacro.cpp	/^lefiPin::addPort(lefiGeometries *g)$/;"	f	class:lefiPin
addPreferEnclosure	lef/lefiLayer.cpp	/^lefiLayer::addPreferEnclosure(char      *enclRule,$/;"	f	class:lefiLayer
addPreferEnclosureWidth	lef/lefiLayer.cpp	/^lefiLayer::addPreferEnclosureWidth(double minWidth)$/;"	f	class:lefiLayer
addProp	lef/lefiLayer.cpp	/^lefiLayer::addProp(const char   *name,$/;"	f	class:lefiLayer
addProp	lef/lefiNonDefault.cpp	/^lefiNonDefault::addProp(const char  *name,$/;"	f	class:lefiNonDefault
addProp	lef/lefiVia.cpp	/^lefiVia::addProp(const char *name,$/;"	f	class:lefiVia
addProp	lef/lefiViaRule.cpp	/^lefiViaRule::addProp(const char *name,$/;"	f	class:lefiViaRule
addRect	lef/lefiMacro.cpp	/^lefiDensity::addRect(double x1,$/;"	f	class:lefiDensity
addRect	lef/lefiMisc.cpp	/^lefiGeometries::addRect(int     colorMask,$/;"	f	class:lefiGeometries
addRect	lef/lefiVia.cpp	/^lefiViaLayer::addRect(int       colorMask,$/;"	f	class:lefiViaLayer
addRectIter	lef/lefiMisc.cpp	/^lefiGeometries::addRectIter(int     colorMask,$/;"	f	class:lefiGeometries
addRectToLayer	lef/lefiVia.cpp	/^lefiVia::addRectToLayer(int     mask,$/;"	f	class:lefiVia
addResistance	lef/lefiCrossTalk.cpp	/^lefiCorrectionEdge::addResistance()$/;"	f	class:lefiCorrectionEdge
addResistance	lef/lefiCrossTalk.cpp	/^lefiCorrectionTable::addResistance()$/;"	f	class:lefiCorrectionTable
addResistance	lef/lefiCrossTalk.cpp	/^lefiNoiseEdge::addResistance()$/;"	f	class:lefiNoiseEdge
addResistance	lef/lefiCrossTalk.cpp	/^lefiNoiseTable::addResistance()$/;"	f	class:lefiNoiseTable
addResistance	lef/lefiNonDefault.cpp	/^lefiNonDefault::addResistance(double num)$/;"	f	class:lefiNonDefault
addResistanceNumber	lef/lefiCrossTalk.cpp	/^lefiCorrectionEdge::addResistanceNumber(double d)$/;"	f	class:lefiCorrectionEdge
addResistanceNumber	lef/lefiCrossTalk.cpp	/^lefiCorrectionResistance::addResistanceNumber(double d)$/;"	f	class:lefiCorrectionResistance
addResistanceNumber	lef/lefiCrossTalk.cpp	/^lefiCorrectionTable::addResistanceNumber(double d)$/;"	f	class:lefiCorrectionTable
addResistanceNumber	lef/lefiCrossTalk.cpp	/^lefiNoiseEdge::addResistanceNumber(double d)$/;"	f	class:lefiNoiseEdge
addResistanceNumber	lef/lefiCrossTalk.cpp	/^lefiNoiseResistance::addResistanceNumber(double d)$/;"	f	class:lefiNoiseResistance
addResistanceNumber	lef/lefiCrossTalk.cpp	/^lefiNoiseTable::addResistanceNumber(double d)$/;"	f	class:lefiNoiseTable
addRiseFall	lef/lefiMacro.cpp	/^lefiTiming::addRiseFall(const char  *risefall,$/;"	f	class:lefiTiming
addRiseFallSlew	lef/lefiMacro.cpp	/^lefiTiming::addRiseFallSlew(double  one,$/;"	f	class:lefiTiming
addRiseFallSlew2	lef/lefiMacro.cpp	/^lefiTiming::addRiseFallSlew2(double one,$/;"	f	class:lefiTiming
addRiseFallVariable	lef/lefiMacro.cpp	/^lefiTiming::addRiseFallVariable(double  one,$/;"	f	class:lefiTiming
addRowPattern	lef/lefiMisc.cpp	/^lefiSite::addRowPattern(const char  *name,$/;"	f	class:lefiSite
addSDF1Pin	lef/lefiMacro.cpp	/^lefiTiming::addSDF1Pin(const char   *trigType,$/;"	f	class:lefiTiming
addSDF2Pins	lef/lefiMacro.cpp	/^lefiTiming::addSDF2Pins(const char  *trigType,$/;"	f	class:lefiTiming
addSitePattern	lef/lefiArray.cpp	/^lefiArray::addSitePattern(lefiSitePattern *s)$/;"	f	class:lefiArray
addSitePattern	lef/lefiArray.cpp	/^lefiArrayFloorPlan::addSitePattern(const char       *typ,$/;"	f	class:lefiArrayFloorPlan
addSiteToFloorPlan	lef/lefiArray.cpp	/^lefiArray::addSiteToFloorPlan(const char        *typ,$/;"	f	class:lefiArray
addSpInfluence	lef/lefiLayer.cpp	/^lefiLayer::addSpInfluence(double    width,$/;"	f	class:lefiLayer
addSpParallelLength	lef/lefiLayer.cpp	/^lefiLayer::addSpParallelLength()$/;"	f	class:lefiLayer
addSpParallelWidth	lef/lefiLayer.cpp	/^lefiLayer::addSpParallelWidth(double width)$/;"	f	class:lefiLayer
addSpParallelWidthSpacing	lef/lefiLayer.cpp	/^lefiLayer::addSpParallelWidthSpacing()$/;"	f	class:lefiLayer
addSpTwoWidths	lef/lefiLayer.cpp	/^lefiLayer::addSpTwoWidths(double    width,$/;"	f	class:lefiLayer
addSpacing	lef/lefiNonDefault.cpp	/^lefiNonDefault::addSpacing(double num)$/;"	f	class:lefiNonDefault
addSpacingRule	lef/lefiNonDefault.cpp	/^lefiNonDefault::addSpacingRule(lefiSpacing *s)$/;"	f	class:lefiNonDefault
addSpacingTable	lef/lefiLayer.cpp	/^lefiLayer::addSpacingTable()$/;"	f	class:lefiLayer
addSpacingTableOrthoWithin	lef/lefiLayer.cpp	/^lefiLayer::addSpacingTableOrthoWithin(double    cutWithin,$/;"	f	class:lefiLayer
addStepPattern	lef/lefiMisc.cpp	/^lefiGeometries::addStepPattern(double   xStart,$/;"	f	class:lefiGeometries
addTableAxisNumber	lef/lefiMacro.cpp	/^lefiTiming::addTableAxisNumber(double one)$/;"	f	class:lefiTiming
addTableEntry	lef/lefiLayer.cpp	/^lefiLayerDensity::addTableEntry(int     num,$/;"	f	class:lefiLayerDensity
addTableEntry	lef/lefiMacro.cpp	/^lefiTiming::addTableEntry(double    one,$/;"	f	class:lefiTiming
addToList	lef/lefiMisc.cpp	/^lefiGeometries::addToList(double    x,$/;"	f	class:lefiGeometries
addToPin	lef/lefiMacro.cpp	/^lefiTiming::addToPin(const char *name)$/;"	f	class:lefiTiming
addTrack	lef/lefiArray.cpp	/^lefiArray::addTrack(lefiTrackPattern *t)$/;"	f	class:lefiArray
addTransition	lef/lefiMacro.cpp	/^lefiTiming::addTransition(const char    *risefall,$/;"	f	class:lefiTiming
addTwoWidths	lef/lefiLayer.cpp	/^lefiSpacingTable::addTwoWidths(double   width,$/;"	f	class:lefiSpacingTable
addTwoWidths	lef/lefiLayer.cpp	/^lefiTwoWidths::addTwoWidths(double  width,$/;"	f	class:lefiTwoWidths
addUnateness	lef/lefiMacro.cpp	/^lefiTiming::addUnateness(const char *typ)$/;"	f	class:lefiTiming
addUseVia	lef/lefiNonDefault.cpp	/^lefiNonDefault::addUseVia(const char *name)$/;"	f	class:lefiNonDefault
addUseViaRule	lef/lefiNonDefault.cpp	/^lefiNonDefault::addUseViaRule(const char *name)$/;"	f	class:lefiNonDefault
addVia	lef/lefiMisc.cpp	/^lefiGeometries::addVia(int          viaMask,$/;"	f	class:lefiGeometries
addViaIter	lef/lefiMisc.cpp	/^lefiGeometries::addViaIter(int          viaMask,$/;"	f	class:lefiGeometries
addViaName	lef/lefiViaRule.cpp	/^lefiViaRule::addViaName(const char *name)$/;"	f	class:lefiViaRule
addViaRule	lef/lefiNonDefault.cpp	/^lefiNonDefault::addViaRule(lefiVia *v)$/;"	f	class:lefiNonDefault
addVictimCorrection	lef/lefiCrossTalk.cpp	/^lefiCorrectionEdge::addVictimCorrection(double d)$/;"	f	class:lefiCorrectionEdge
addVictimCorrection	lef/lefiCrossTalk.cpp	/^lefiCorrectionResistance::addVictimCorrection(double d)$/;"	f	class:lefiCorrectionResistance
addVictimCorrection	lef/lefiCrossTalk.cpp	/^lefiCorrectionTable::addVictimCorrection(double d)$/;"	f	class:lefiCorrectionTable
addVictimCorrection	lef/lefiCrossTalk.cpp	/^lefiCorrectionVictim::addVictimCorrection(double d)$/;"	f	class:lefiCorrectionVictim
addVictimLength	lef/lefiCrossTalk.cpp	/^lefiCorrectionEdge::addVictimLength(double d)$/;"	f	class:lefiCorrectionEdge
addVictimLength	lef/lefiCrossTalk.cpp	/^lefiCorrectionResistance::addVictimLength(double d)$/;"	f	class:lefiCorrectionResistance
addVictimLength	lef/lefiCrossTalk.cpp	/^lefiCorrectionTable::addVictimLength(double d)$/;"	f	class:lefiCorrectionTable
addVictimLength	lef/lefiCrossTalk.cpp	/^lefiNoiseEdge::addVictimLength(double d)$/;"	f	class:lefiNoiseEdge
addVictimLength	lef/lefiCrossTalk.cpp	/^lefiNoiseResistance::addVictimLength(double d)$/;"	f	class:lefiNoiseResistance
addVictimLength	lef/lefiCrossTalk.cpp	/^lefiNoiseTable::addVictimLength(double d)$/;"	f	class:lefiNoiseTable
addVictimNoise	lef/lefiCrossTalk.cpp	/^lefiNoiseEdge::addVictimNoise(double d)$/;"	f	class:lefiNoiseEdge
addVictimNoise	lef/lefiCrossTalk.cpp	/^lefiNoiseResistance::addVictimNoise(double d)$/;"	f	class:lefiNoiseResistance
addVictimNoise	lef/lefiCrossTalk.cpp	/^lefiNoiseTable::addVictimNoise(double d)$/;"	f	class:lefiNoiseTable
addVictimNoise	lef/lefiCrossTalk.cpp	/^lefiNoiseVictim::addVictimNoise(double d)$/;"	f	class:lefiNoiseVictim
addWidth	lef/lefiLayer.cpp	/^lefiLayerDensity::addWidth(int      num,$/;"	f	class:lefiLayerDensity
addWidth	lef/lefiMisc.cpp	/^lefiGeometries::addWidth(double w)$/;"	f	class:lefiGeometries
addWidth	lef/lefiNonDefault.cpp	/^lefiNonDefault::addWidth(double num)$/;"	f	class:lefiNonDefault
addWireExtension	lef/lefiNonDefault.cpp	/^lefiNonDefault::addWireExtension(double num)$/;"	f	class:lefiNonDefault
alias_set	lef/lefrData.hpp	/^    lefStringMap        alias_set; $/;"	m	class:lefrData
allocatedMinCuts_	lef/lefiNonDefault.hpp	/^  int    allocatedMinCuts_;        \/\/ 5.6$/;"	m	class:lefiNonDefault
allocatedSpacing_	lef/lefiNonDefault.hpp	/^  int allocatedSpacing_;$/;"	m	class:lefiNonDefault
allocatedUseViaRules_	lef/lefiNonDefault.hpp	/^  int    allocatedUseViaRules_;    \/\/ 5.6$/;"	m	class:lefiNonDefault
allocatedUseVias_	lef/lefiNonDefault.hpp	/^  int    allocatedUseVias_;        \/\/ 5.6$/;"	m	class:lefiNonDefault
allocatedVias_	lef/lefiNonDefault.hpp	/^  int allocatedVias_;$/;"	m	class:lefiNonDefault
antennaArea	lef/lefiLayer.cpp	/^lefiLayer::antennaArea() const$/;"	f	class:lefiLayer
antennaAreaDiffReducePWL	lef/lefiLayer.cpp	/^lefiAntennaModel::antennaAreaDiffReducePWL() const$/;"	f	class:lefiAntennaModel
antennaAreaDiffReducePWL_	lef/lefiLayer.hpp	/^  lefiAntennaPWL* antennaAreaDiffReducePWL_;    \/\/ 5.7$/;"	m	class:lefiAntennaModel
antennaAreaFactor	lef/lefiLayer.cpp	/^lefiAntennaModel::antennaAreaFactor() const$/;"	f	class:lefiAntennaModel
antennaAreaFactor_	lef/lefiLayer.hpp	/^  double antennaAreaFactor_;$/;"	m	class:lefiAntennaModel
antennaAreaMinusDiff	lef/lefiLayer.cpp	/^lefiAntennaModel::antennaAreaMinusDiff() const$/;"	f	class:lefiAntennaModel
antennaAreaMinusDiff_	lef/lefiLayer.hpp	/^  double antennaAreaMinusDiff_;                 \/\/ 5.7$/;"	m	class:lefiAntennaModel
antennaAreaRatio	lef/lefiLayer.cpp	/^lefiAntennaModel::antennaAreaRatio() const$/;"	f	class:lefiAntennaModel
antennaAreaRatio_	lef/lefiLayer.hpp	/^  double antennaAreaRatio_;$/;"	m	class:lefiAntennaModel
antennaArea_	lef/lefiLayer.hpp	/^  double antennaArea_;$/;"	m	class:lefiLayer
antennaCB	lefdiff/diffLefRW.cpp	/^int antennaCB(lefrCallbackType_e c, double value, lefiUserData ud) {$/;"	f
antennaCB	lefrw/lefrw.cpp	/^int antennaCB(lefrCallbackType_e c, double value, lefiUserData) {$/;"	f
antennaCB	lefwrite/lefwriteCbs.cpp	/^int antennaCB(lefwCallbackType_e c, lefiUserData ud) {$/;"	f
antennaCumAreaRatio	lef/lefiLayer.cpp	/^lefiAntennaModel::antennaCumAreaRatio() const$/;"	f	class:lefiAntennaModel
antennaCumAreaRatio_	lef/lefiLayer.hpp	/^  double antennaCumAreaRatio_;$/;"	m	class:lefiAntennaModel
antennaCumDiffAreaRatio	lef/lefiLayer.cpp	/^lefiAntennaModel::antennaCumDiffAreaRatio() const$/;"	f	class:lefiAntennaModel
antennaCumDiffAreaRatioPWL	lef/lefiLayer.cpp	/^lefiAntennaModel::antennaCumDiffAreaRatioPWL() const$/;"	f	class:lefiAntennaModel
antennaCumDiffAreaRatioPWL_	lef/lefiLayer.hpp	/^  lefiAntennaPWL* antennaCumDiffAreaRatioPWL_;$/;"	m	class:lefiAntennaModel
antennaCumDiffAreaRatio_	lef/lefiLayer.hpp	/^  double antennaCumDiffAreaRatio_;$/;"	m	class:lefiAntennaModel
antennaCumDiffSideAreaRatio	lef/lefiLayer.cpp	/^lefiAntennaModel::antennaCumDiffSideAreaRatio() const$/;"	f	class:lefiAntennaModel
antennaCumDiffSideAreaRatioPWL	lef/lefiLayer.cpp	/^lefiAntennaModel::antennaCumDiffSideAreaRatioPWL() const$/;"	f	class:lefiAntennaModel
antennaCumDiffSideAreaRatioPWL_	lef/lefiLayer.hpp	/^  lefiAntennaPWL* antennaCumDiffSideAreaRatioPWL_;$/;"	m	class:lefiAntennaModel
antennaCumDiffSideAreaRatio_	lef/lefiLayer.hpp	/^  double antennaCumDiffSideAreaRatio_;$/;"	m	class:lefiAntennaModel
antennaCumSideAreaRatio	lef/lefiLayer.cpp	/^lefiAntennaModel::antennaCumSideAreaRatio() const$/;"	f	class:lefiAntennaModel
antennaCumSideAreaRatio_	lef/lefiLayer.hpp	/^  double antennaCumSideAreaRatio_;$/;"	m	class:lefiAntennaModel
antennaDiffArea	lef/lefiMacro.cpp	/^lefiPin::antennaDiffArea(int i) const$/;"	f	class:lefiPin
antennaDiffAreaAllocated_	lef/lefiMacro.hpp	/^  int antennaDiffAreaAllocated_;$/;"	m	class:lefiPin
antennaDiffAreaLayer	lef/lefiMacro.cpp	/^lefiPin::antennaDiffAreaLayer(int i) const$/;"	f	class:lefiPin
antennaDiffAreaLayer_	lef/lefiMacro.hpp	/^  char** antennaDiffAreaLayer_;$/;"	m	class:lefiPin
antennaDiffAreaRatio	lef/lefiLayer.cpp	/^lefiAntennaModel::antennaDiffAreaRatio() const$/;"	f	class:lefiAntennaModel
antennaDiffAreaRatioPWL	lef/lefiLayer.cpp	/^lefiAntennaModel::antennaDiffAreaRatioPWL() const$/;"	f	class:lefiAntennaModel
antennaDiffAreaRatioPWL_	lef/lefiLayer.hpp	/^  lefiAntennaPWL* antennaDiffAreaRatioPWL_;$/;"	m	class:lefiAntennaModel
antennaDiffAreaRatio_	lef/lefiLayer.hpp	/^  double antennaDiffAreaRatio_;$/;"	m	class:lefiAntennaModel
antennaDiffArea_	lef/lefiMacro.hpp	/^  double* antennaDiffArea_;$/;"	m	class:lefiPin
antennaDiffSideAreaRatio	lef/lefiLayer.cpp	/^lefiAntennaModel::antennaDiffSideAreaRatio() const$/;"	f	class:lefiAntennaModel
antennaDiffSideAreaRatioPWL	lef/lefiLayer.cpp	/^lefiAntennaModel::antennaDiffSideAreaRatioPWL() const$/;"	f	class:lefiAntennaModel
antennaDiffSideAreaRatioPWL_	lef/lefiLayer.hpp	/^  lefiAntennaPWL* antennaDiffSideAreaRatioPWL_;$/;"	m	class:lefiAntennaModel
antennaDiffSideAreaRatio_	lef/lefiLayer.hpp	/^  double antennaDiffSideAreaRatio_;$/;"	m	class:lefiAntennaModel
antennaGateArea	lef/lefiMacro.cpp	/^lefiPinAntennaModel::antennaGateArea(int i) const$/;"	f	class:lefiPinAntennaModel
antennaGateAreaAllocated_	lef/lefiMacro.hpp	/^  int antennaGateAreaAllocated_;$/;"	m	class:lefiPinAntennaModel
antennaGateAreaLayer	lef/lefiMacro.cpp	/^lefiPinAntennaModel::antennaGateAreaLayer(int i) const$/;"	f	class:lefiPinAntennaModel
antennaGateAreaLayer_	lef/lefiMacro.hpp	/^  char** antennaGateAreaLayer_;$/;"	m	class:lefiPinAntennaModel
antennaGateArea_	lef/lefiMacro.hpp	/^  double* antennaGateArea_;$/;"	m	class:lefiPinAntennaModel
antennaGatePlusDiff	lef/lefiLayer.cpp	/^lefiAntennaModel::antennaGatePlusDiff() const$/;"	f	class:lefiAntennaModel
antennaGatePlusDiff_	lef/lefiLayer.hpp	/^  double antennaGatePlusDiff_;                  \/\/ 5.7$/;"	m	class:lefiAntennaModel
antennaInoutWarnings	lef/lefrData.hpp	/^    int  antennaInoutWarnings; $/;"	m	class:lefrData
antennaInputWarnings	lef/lefrData.hpp	/^    int  antennaInputWarnings; $/;"	m	class:lefrData
antennaLength	lef/lefiLayer.cpp	/^lefiLayer::antennaLength() const$/;"	f	class:lefiLayer
antennaLength_	lef/lefiLayer.hpp	/^  double antennaLength_;$/;"	m	class:lefiLayer
antennaMaxAreaCar	lef/lefiMacro.cpp	/^lefiPinAntennaModel::antennaMaxAreaCar(int i) const$/;"	f	class:lefiPinAntennaModel
antennaMaxAreaCarAllocated_	lef/lefiMacro.hpp	/^  int antennaMaxAreaCarAllocated_;$/;"	m	class:lefiPinAntennaModel
antennaMaxAreaCarLayer	lef/lefiMacro.cpp	/^lefiPinAntennaModel::antennaMaxAreaCarLayer(int i) const$/;"	f	class:lefiPinAntennaModel
antennaMaxAreaCarLayer_	lef/lefiMacro.hpp	/^  char** antennaMaxAreaCarLayer_;$/;"	m	class:lefiPinAntennaModel
antennaMaxAreaCar_	lef/lefiMacro.hpp	/^  double* antennaMaxAreaCar_;$/;"	m	class:lefiPinAntennaModel
antennaMaxCutCar	lef/lefiMacro.cpp	/^lefiPinAntennaModel::antennaMaxCutCar(int i) const$/;"	f	class:lefiPinAntennaModel
antennaMaxCutCarAllocated_	lef/lefiMacro.hpp	/^  int antennaMaxCutCarAllocated_;$/;"	m	class:lefiPinAntennaModel
antennaMaxCutCarLayer	lef/lefiMacro.cpp	/^lefiPinAntennaModel::antennaMaxCutCarLayer(int i) const$/;"	f	class:lefiPinAntennaModel
antennaMaxCutCarLayer_	lef/lefiMacro.hpp	/^  char** antennaMaxCutCarLayer_;$/;"	m	class:lefiPinAntennaModel
antennaMaxCutCar_	lef/lefiMacro.hpp	/^  double* antennaMaxCutCar_;$/;"	m	class:lefiPinAntennaModel
antennaMaxSideAreaCar	lef/lefiMacro.cpp	/^lefiPinAntennaModel::antennaMaxSideAreaCar(int i) const$/;"	f	class:lefiPinAntennaModel
antennaMaxSideAreaCarAllocated_	lef/lefiMacro.hpp	/^  int antennaMaxSideAreaCarAllocated_;$/;"	m	class:lefiPinAntennaModel
antennaMaxSideAreaCarLayer	lef/lefiMacro.cpp	/^lefiPinAntennaModel::antennaMaxSideAreaCarLayer(int i) const$/;"	f	class:lefiPinAntennaModel
antennaMaxSideAreaCarLayer_	lef/lefiMacro.hpp	/^  char** antennaMaxSideAreaCarLayer_;$/;"	m	class:lefiPinAntennaModel
antennaMaxSideAreaCar_	lef/lefiMacro.hpp	/^  double* antennaMaxSideAreaCar_;$/;"	m	class:lefiPinAntennaModel
antennaMetalArea	lef/lefiMacro.cpp	/^lefiPin::antennaMetalArea(int i) const$/;"	f	class:lefiPin
antennaMetalAreaAllocated_	lef/lefiMacro.hpp	/^  int antennaMetalAreaAllocated_;$/;"	m	class:lefiPin
antennaMetalAreaLayer	lef/lefiMacro.cpp	/^lefiPin::antennaMetalAreaLayer(int i) const$/;"	f	class:lefiPin
antennaMetalAreaLayer_	lef/lefiMacro.hpp	/^  char** antennaMetalAreaLayer_;$/;"	m	class:lefiPin
antennaMetalArea_	lef/lefiMacro.hpp	/^  double* antennaMetalArea_;$/;"	m	class:lefiPin
antennaMetalLength	lef/lefiMacro.cpp	/^lefiPin::antennaMetalLength(int i) const$/;"	f	class:lefiPin
antennaMetalLengthAllocated_	lef/lefiMacro.hpp	/^  int antennaMetalLengthAllocated_;$/;"	m	class:lefiPin
antennaMetalLengthLayer	lef/lefiMacro.cpp	/^lefiPin::antennaMetalLengthLayer(int i) const$/;"	f	class:lefiPin
antennaMetalLengthLayer_	lef/lefiMacro.hpp	/^  char** antennaMetalLengthLayer_;$/;"	m	class:lefiPin
antennaMetalLength_	lef/lefiMacro.hpp	/^  double* antennaMetalLength_;$/;"	m	class:lefiPin
antennaModel	lef/lefiLayer.cpp	/^lefiLayer::antennaModel(int index) const$/;"	f	class:lefiLayer
antennaModel	lef/lefiMacro.cpp	/^lefiPin::antennaModel(int index) const$/;"	f	class:lefiPin
antennaModelAllocated_	lef/lefiLayer.hpp	/^  int antennaModelAllocated_;$/;"	m	class:lefiLayer
antennaModelAllocated_	lef/lefiMacro.hpp	/^  int antennaModelAllocated_;$/;"	m	class:lefiPin
antennaModel_	lef/lefiLayer.hpp	/^  lefiAntennaModel** antennaModel_;$/;"	m	class:lefiLayer
antennaModel_	lef/lefiMacro.hpp	/^  lefiPinAntennaModel** antennaModel_;$/;"	m	class:lefiPin
antennaOutputWarnings	lef/lefrData.hpp	/^    int  antennaOutputWarnings; $/;"	m	class:lefrData
antennaOxide	lef/lefiLayer.cpp	/^lefiAntennaModel::antennaOxide() const$/;"	f	class:lefiAntennaModel
antennaOxide	lef/lefiMacro.cpp	/^lefiPinAntennaModel::antennaOxide() const$/;"	f	class:lefiPinAntennaModel
antennaPartialCutArea	lef/lefiMacro.cpp	/^lefiPin::antennaPartialCutArea(int i) const$/;"	f	class:lefiPin
antennaPartialCutAreaAllocated_	lef/lefiMacro.hpp	/^  int antennaPartialCutAreaAllocated_;$/;"	m	class:lefiPin
antennaPartialCutAreaLayer	lef/lefiMacro.cpp	/^lefiPin::antennaPartialCutAreaLayer(int i) const$/;"	f	class:lefiPin
antennaPartialCutAreaLayer_	lef/lefiMacro.hpp	/^  char** antennaPartialCutAreaLayer_;$/;"	m	class:lefiPin
antennaPartialCutArea_	lef/lefiMacro.hpp	/^  double* antennaPartialCutArea_;$/;"	m	class:lefiPin
antennaPartialMetalArea	lef/lefiMacro.cpp	/^lefiPin::antennaPartialMetalArea(int i) const$/;"	f	class:lefiPin
antennaPartialMetalAreaAllocated_	lef/lefiMacro.hpp	/^  int antennaPartialMetalAreaAllocated_;$/;"	m	class:lefiPin
antennaPartialMetalAreaLayer	lef/lefiMacro.cpp	/^lefiPin::antennaPartialMetalAreaLayer(int i) const$/;"	f	class:lefiPin
antennaPartialMetalAreaLayer_	lef/lefiMacro.hpp	/^  char** antennaPartialMetalAreaLayer_;$/;"	m	class:lefiPin
antennaPartialMetalArea_	lef/lefiMacro.hpp	/^  double* antennaPartialMetalArea_;$/;"	m	class:lefiPin
antennaPartialMetalSideArea	lef/lefiMacro.cpp	/^lefiPin::antennaPartialMetalSideArea(int i) const$/;"	f	class:lefiPin
antennaPartialMetalSideAreaAllocated_	lef/lefiMacro.hpp	/^  int antennaPartialMetalSideAreaAllocated_;$/;"	m	class:lefiPin
antennaPartialMetalSideAreaLayer	lef/lefiMacro.cpp	/^lefiPin::antennaPartialMetalSideAreaLayer(int i) const$/;"	f	class:lefiPin
antennaPartialMetalSideAreaLayer_	lef/lefiMacro.hpp	/^  char** antennaPartialMetalSideAreaLayer_;$/;"	m	class:lefiPin
antennaPartialMetalSideArea_	lef/lefiMacro.hpp	/^  double* antennaPartialMetalSideArea_;$/;"	m	class:lefiPin
antennaSideAreaFactor	lef/lefiLayer.cpp	/^lefiAntennaModel::antennaSideAreaFactor() const$/;"	f	class:lefiAntennaModel
antennaSideAreaFactor_	lef/lefiLayer.hpp	/^  double antennaSideAreaFactor_;$/;"	m	class:lefiAntennaModel
antennaSideAreaRatio	lef/lefiLayer.cpp	/^lefiAntennaModel::antennaSideAreaRatio() const$/;"	f	class:lefiAntennaModel
antennaSideAreaRatio_	lef/lefiLayer.hpp	/^  double antennaSideAreaRatio_;$/;"	m	class:lefiAntennaModel
antennaSize	lef/lefiMacro.cpp	/^lefiPin::antennaSize(int i) const$/;"	f	class:lefiPin
antennaSizeAllocated_	lef/lefiMacro.hpp	/^  int antennaSizeAllocated_;$/;"	m	class:lefiPin
antennaSizeLayer	lef/lefiMacro.cpp	/^lefiPin::antennaSizeLayer(int i) const$/;"	f	class:lefiPin
antennaSizeLayer_	lef/lefiMacro.hpp	/^  char** antennaSizeLayer_;$/;"	m	class:lefiPin
antennaSize_	lef/lefiMacro.hpp	/^  double* antennaSize_;$/;"	m	class:lefiPin
antennaType	lef/lefrData.hpp	/^    lefiAntennaEnum  antennaType; $/;"	m	class:lefrData
antenna_inout	lef/lef.y	/^antenna_inout: K_ANTENNAINOUTDIFFAREA NUMBER ';'$/;"	l
antenna_input	lef/lef.y	/^antenna_input: K_ANTENNAINPUTGATEAREA NUMBER ';'$/;"	l
antenna_output	lef/lef.y	/^antenna_output: K_ANTENNAOUTPUTDIFFAREA NUMBER ';'$/;"	l
area	lef/lefiLayer.cpp	/^lefiLayer::area() const$/;"	f	class:lefiLayer
area_	lef/lefiLayer.hpp	/^  double area_;$/;"	m	class:lefiLayer
array	lef/lef.y	/^array: start_array array_rules$/;"	l
arrayBeginCB	lefrw/lefrw.cpp	/^int arrayBeginCB(lefrCallbackType_e c, const char* name, lefiUserData) {$/;"	f
arrayCB	lefdiff/diffLefRW.cpp	/^int arrayCB(lefrCallbackType_e c, lefiArray* a, lefiUserData ud) {$/;"	f
arrayCB	lefrw/lefrw.cpp	/^int arrayCB(lefrCallbackType_e c, lefiArray* a, lefiUserData) {$/;"	f
arrayCuts	lef/lefiLayer.cpp	/^lefiLayer::arrayCuts(int index) const$/;"	f	class:lefiLayer
arrayCutsAllocated_	lef/lefiLayer.hpp	/^  int     arrayCutsAllocated_;$/;"	m	class:lefiLayer
arrayCutsVal	lef/lefrData.hpp	/^    int  arrayCutsVal; $/;"	m	class:lefrData
arrayCutsWar	lef/lefrData.hpp	/^    int  arrayCutsWar; $/;"	m	class:lefrData
arrayCuts_	lef/lefiLayer.hpp	/^  int*    arrayCuts_;$/;"	m	class:lefiLayer
arrayEndCB	lefrw/lefrw.cpp	/^int arrayEndCB(lefrCallbackType_e c, const char* name, lefiUserData) {$/;"	f
arrayName	lef/lefrData.hpp	/^    char*  arrayName; $/;"	m	class:lefrData
arraySpacing	lef/lefiLayer.cpp	/^lefiLayer::arraySpacing(int index) const$/;"	f	class:lefiLayer
arraySpacings_	lef/lefiLayer.hpp	/^  double* arraySpacings_;$/;"	m	class:lefiLayer
arrayWarnings	lef/lefrData.hpp	/^    int  arrayWarnings; $/;"	m	class:lefrData
array_rule	lef/lef.y	/^array_rule:$/;"	l
array_rules	lef/lef.y	/^array_rules:$/;"	l
atNsp_	lef/lefiLayer.hpp	/^  int*    atNsp_;             \/\/ accumulate total number of spacing$/;"	m	class:lefiTwoWidths
axisNumbers	lef/lefiMacro.cpp	/^lefiTiming::axisNumbers()$/;"	f	class:lefiTiming
axisNumbersAllocated_	lef/lefiMacro.hpp	/^  int axisNumbersAllocated_;$/;"	m	class:lefiTiming
axisNumbers_	lef/lefiMacro.hpp	/^  double* axisNumbers_;$/;"	m	class:lefiTiming
b_expr	lef/lef.y	/^b_expr:$/;"	l
bool	clef/lefiTypedefs.h	41;"	d
botLayer_	lef/lefiVia.hpp	/^  char* botLayer_;             \/\/ 5.6$/;"	m	class:lefiVia
botMetalLayer	lef/lefiVia.cpp	/^lefiVia::botMetalLayer() const$/;"	f	class:lefiVia
bottomLayer_	lef/lefiMisc.hpp	/^  char* bottomLayer_;$/;"	m	class:lefiMaxStackVia
bottomMaskNum	clef/lefiTypedefs.h	/^  int    bottomMaskNum;$/;"	m	struct:lefiGeomVia
bottomMaskNum	clef/lefiTypedefs.h	/^  int    bottomMaskNum;$/;"	m	struct:lefiGeomViaIter
bottomMaskNum	lef/lefiMisc.hpp	/^  int    bottomMaskNum;$/;"	m	struct:lefiGeomVia
bottomMaskNum	lef/lefiMisc.hpp	/^  int    bottomMaskNum;$/;"	m	struct:lefiGeomViaIter
bump	lef/lefiArray.cpp	/^lefiArray::bump(void    ***arr,$/;"	f	class:lefiArray
bump	lef/lefiMacro.cpp	/^lefiMacro::bump(char    **array,$/;"	f	class:lefiMacro
bump	lef/lefiMacro.cpp	/^lefiPin::bump(char  **array,$/;"	f	class:lefiPin
bumpName	lef/lefiProp.cpp	/^lefiProp::bumpName(int size)$/;"	f	class:lefiProp
bumpProps	lef/lefiMacro.cpp	/^lefiMacro::bumpProps()$/;"	f	class:lefiMacro
bumpProps	lef/lefiMacro.cpp	/^lefiPin::bumpProps()$/;"	f	class:lefiPin
bumpProps	lef/lefiPropType.cpp	/^lefiPropType::bumpProps()$/;"	f	class:lefiPropType
bumpProps	lef/lefiVia.cpp	/^lefiVia::bumpProps()$/;"	f	class:lefiVia
bumpSize	lef/lefiProp.cpp	/^lefiProp::bumpSize(int size)$/;"	f	class:lefiProp
busBitCharsCB	lefdiff/diffLefRW.cpp	/^int busBitCharsCB(lefrCallbackType_e c, const char* busBit, lefiUserData ud)$/;"	f
busBitCharsCB	lefrw/lefrw.cpp	/^int busBitCharsCB(lefrCallbackType_e c, const char* busBit, lefiUserData)$/;"	f
busBitCharsCB	lefwrite/lefwriteCbs.cpp	/^int busBitCharsCB(lefwCallbackType_e c, lefiUserData ud) {$/;"	f
busbitchars	lef/lef.y	/^busbitchars: K_BUSBITCHARS QSTRING ';'$/;"	l
canAllocated_	lef/lefiArray.hpp	/^  int canAllocated_;$/;"	m	class:lefiArray
canPlace	lef/lefiArray.cpp	/^lefiArray::canPlace(int index) const$/;"	f	class:lefiArray
canPlace_	lef/lefiArray.hpp	/^  lefiSitePattern** canPlace_;$/;"	m	class:lefiArray
cannotAllocated_	lef/lefiArray.hpp	/^  int cannotAllocated_;$/;"	m	class:lefiArray
cannotOccupy	lef/lefiArray.cpp	/^lefiArray::cannotOccupy(int index) const$/;"	f	class:lefiArray
cannotOccupy_	lef/lefiArray.hpp	/^  lefiSitePattern** cannotOccupy_;$/;"	m	class:lefiArray
capMultiplier	lef/lefiLayer.cpp	/^lefiLayer::capMultiplier() const$/;"	f	class:lefiLayer
capMultiplier_	lef/lefiLayer.hpp	/^  double capMultiplier_;$/;"	m	class:lefiLayer
cap_list	lef/lef.y	/^cap_list:$/;"	l
cap_point	lef/lef.y	/^cap_point: '(' int_number int_number ')'$/;"	l
cap_points	lef/lef.y	/^cap_points :$/;"	l
capacitance	lef/lefiLayer.cpp	/^lefiLayer::capacitance() const$/;"	f	class:lefiLayer
capacitance	lef/lefiMacro.cpp	/^lefiPin::capacitance() const$/;"	f	class:lefiPin
capacitance	lef/lefiUnits.cpp	/^lefiUnits::capacitance() const$/;"	f	class:lefiUnits
capacitanceArray	lef/lefiLayer.cpp	/^lefiLayer::capacitanceArray(int     *numPoints,$/;"	f	class:lefiLayer
capacitancePointsAllocated_	lef/lefiLayer.hpp	/^  int capacitancePointsAllocated_;$/;"	m	class:lefiLayer
capacitanceWidths_	lef/lefiLayer.hpp	/^  double* capacitanceWidths_;$/;"	m	class:lefiLayer
capacitance_	lef/lefiLayer.hpp	/^  double capacitance_;$/;"	m	class:lefiLayer
capacitance_	lef/lefiMacro.hpp	/^  double capacitance_;$/;"	m	class:lefiPin
capacitance_	lef/lefiNonDefault.hpp	/^  double* capacitance_;$/;"	m	class:lefiNonDefault
capacitance_	lef/lefiUnits.hpp	/^  double capacitance_;$/;"	m	class:lefiUnits
capacitances_	lef/lefiLayer.hpp	/^  double* capacitances_;$/;"	m	class:lefiLayer
caps_	lef/lefiArray.hpp	/^  double* caps_;$/;"	m	class:lefiArray
caseSensCB	lefdiff/diffLefRW.cpp	/^int caseSensCB(lefrCallbackType_e c, int caseSense, lefiUserData ud) {$/;"	f
caseSensCB	lefrw/lefrw.cpp	/^int caseSensCB(lefrCallbackType_e c, int caseSense, lefiUserData) {$/;"	f
caseSensitiveWarnings	lef/lefrData.hpp	/^    int  caseSensitiveWarnings; $/;"	m	class:lefrData
case_sensitivity	lef/lef.y	/^case_sensitivity: K_NAMESCASESENSITIVE K_ON ';'$/;"	l
cellHasOrient	lef/lefiMacro.cpp	/^lefiMacroForeign::cellHasOrient() const$/;"	f	class:lefiMacroForeign
cellHasOrient_	lef/lefiMacro.hpp	/^  int        cellHasOrient_;$/;"	m	class:lefiMacroForeign
cellHasPts	lef/lefiMacro.cpp	/^lefiMacroForeign::cellHasPts() const$/;"	f	class:lefiMacroForeign
cellHasPts_	lef/lefiMacro.hpp	/^  int        cellHasPts_;$/;"	m	class:lefiMacroForeign
cellName	lef/lefiMacro.cpp	/^lefiMacroForeign::cellName() const$/;"	f	class:lefiMacroForeign
cellName_	lef/lefiMacro.hpp	/^  const char *cellName_;$/;"	m	class:lefiMacroForeign
cellOrient	lef/lefiMacro.cpp	/^lefiMacroForeign::cellOrient() const$/;"	f	class:lefiMacroForeign
cellOrient_	lef/lefiMacro.hpp	/^  int        cellOrient_;$/;"	m	class:lefiMacroForeign
checkType	lefdiff/diffLefRW.cpp	/^void checkType(lefrCallbackType_e c) {$/;"	f
checkType	lefrw/lefrw.cpp	/^void checkType(lefrCallbackType_e c) {$/;"	f
checkType	lefwrite/lefwriteCbs.cpp	/^void checkType(lefwCallbackType_e c) {$/;"	f
chkNum	lefdiff/diffLefRW.cpp	/^double chkNum(double num) {$/;"	f
class_type	lef/lef.y	/^class_type:$/;"	l
clear	lef/lefiArray.cpp	/^lefiArray::clear()$/;"	f	class:lefiArray
clear	lef/lefiCrossTalk.cpp	/^lefiCorrectionEdge::clear()$/;"	f	class:lefiCorrectionEdge
clear	lef/lefiCrossTalk.cpp	/^lefiCorrectionResistance::clear()$/;"	f	class:lefiCorrectionResistance
clear	lef/lefiCrossTalk.cpp	/^lefiCorrectionTable::clear()$/;"	f	class:lefiCorrectionTable
clear	lef/lefiCrossTalk.cpp	/^lefiCorrectionVictim::clear()$/;"	f	class:lefiCorrectionVictim
clear	lef/lefiCrossTalk.cpp	/^lefiNoiseEdge::clear()$/;"	f	class:lefiNoiseEdge
clear	lef/lefiCrossTalk.cpp	/^lefiNoiseResistance::clear()$/;"	f	class:lefiNoiseResistance
clear	lef/lefiCrossTalk.cpp	/^lefiNoiseTable::clear()$/;"	f	class:lefiNoiseTable
clear	lef/lefiCrossTalk.cpp	/^lefiNoiseVictim::clear()$/;"	f	class:lefiNoiseVictim
clear	lef/lefiLayer.cpp	/^lefiAntennaPWL::clear()$/;"	f	class:lefiAntennaPWL
clear	lef/lefiLayer.cpp	/^lefiLayer::clear()$/;"	f	class:lefiLayer
clear	lef/lefiMacro.cpp	/^lefiDensity::clear()$/;"	f	class:lefiDensity
clear	lef/lefiMacro.cpp	/^lefiMacro::clear()$/;"	f	class:lefiMacro
clear	lef/lefiMacro.cpp	/^lefiObstruction::clear()$/;"	f	class:lefiObstruction
clear	lef/lefiMacro.cpp	/^lefiPin::clear()$/;"	f	class:lefiPin
clear	lef/lefiMacro.cpp	/^lefiPinAntennaModel::clear()$/;"	f	class:lefiPinAntennaModel
clear	lef/lefiMacro.cpp	/^lefiTiming::clear()$/;"	f	class:lefiTiming
clear	lef/lefiMisc.cpp	/^lefiGeometries::clear()$/;"	f	class:lefiGeometries
clear	lef/lefiMisc.cpp	/^lefiIRDrop::clear()$/;"	f	class:lefiIRDrop
clear	lef/lefiMisc.cpp	/^lefiTrackPattern::clear()$/;"	f	class:lefiTrackPattern
clear	lef/lefiNonDefault.cpp	/^lefiNonDefault::clear()$/;"	f	class:lefiNonDefault
clear	lef/lefiProp.cpp	/^lefiProp::clear()$/;"	f	class:lefiProp
clear	lef/lefiUnits.cpp	/^lefiUnits::clear()$/;"	f	class:lefiUnits
clear	lef/lefiVia.cpp	/^lefiVia::clear()$/;"	f	class:lefiVia
clear	lef/lefiViaRule.cpp	/^lefiViaRule::clear()$/;"	f	class:lefiViaRule
clearLayerOverhang	lef/lefiViaRule.cpp	/^lefiViaRule::clearLayerOverhang()$/;"	f	class:lefiViaRule
clearLayerOverhang	lef/lefiViaRule.cpp	/^lefiViaRuleLayer::clearLayerOverhang()$/;"	f	class:lefiViaRuleLayer
clearPolyItems	lef/lefiMisc.cpp	/^lefiGeometries::clearPolyItems()$/;"	f	class:lefiGeometries
clearanceCB	lefdiff/diffLefRW.cpp	/^int clearanceCB(lefrCallbackType_e c, const char* name, lefiUserData ud) {$/;"	f
clearanceCB	lefrw/lefrw.cpp	/^int clearanceCB(lefrCallbackType_e c, const char* name, lefiUserData) {$/;"	f
clearance_type	lef/lef.y	/^clearance_type:$/;"	l
clearancemeasure	lef/lef.y	/^clearancemeasure: K_CLEARANCEMEASURE clearance_type ';'$/;"	l
clockType	lef/lefiMacro.cpp	/^lefiMacro::clockType() const$/;"	f	class:lefiMacro
clockTypeSize_	lef/lefiMacro.hpp	/^  int clockTypeSize_;$/;"	m	class:lefiMacro
clockType_	lef/lefiMacro.hpp	/^  char* clockType_;$/;"	m	class:lefiMacro
clone	lef/lefiMisc.cpp	/^lefiSpacing::clone()$/;"	f	class:lefiSpacing
clone	lef/lefiVia.cpp	/^lefiVia::clone()$/;"	f	class:lefiVia
clone	lef/lefiVia.cpp	/^lefiViaLayer::clone()$/;"	f	class:lefiViaLayer
colorMask	clef/lefiTypedefs.h	/^      int    colorMask;$/;"	m	struct:lefiGeomRect
colorMask	clef/lefiTypedefs.h	/^  int     colorMask;$/;"	m	struct:lefiGeomPath
colorMask	clef/lefiTypedefs.h	/^  int     colorMask;$/;"	m	struct:lefiGeomPolygon
colorMask	clef/lefiTypedefs.h	/^  int    colorMask;$/;"	m	struct:lefiGeomPathIter
colorMask	clef/lefiTypedefs.h	/^  int    colorMask;$/;"	m	struct:lefiGeomPolygonIter
colorMask	clef/lefiTypedefs.h	/^  int    colorMask;$/;"	m	struct:lefiGeomRectIter
colorMask	lef/lefiMisc.hpp	/^      int    colorMask;$/;"	m	struct:lefiGeomRect
colorMask	lef/lefiMisc.hpp	/^  int     colorMask;$/;"	m	struct:lefiGeomPath
colorMask	lef/lefiMisc.hpp	/^  int     colorMask;$/;"	m	struct:lefiGeomPolygon
colorMask	lef/lefiMisc.hpp	/^  int    colorMask;$/;"	m	struct:lefiGeomPathIter
colorMask	lef/lefiMisc.hpp	/^  int    colorMask;$/;"	m	struct:lefiGeomPolygonIter
colorMask	lef/lefiMisc.hpp	/^  int    colorMask;$/;"	m	struct:lefiGeomRectIter
convert_name2num	clef/xlefiUtil.cpp	/^double convert_name2num (const char * versionName) {$/;"	f
convert_name2num	lef/lefrReader.cpp	/^convert_name2num(const char *versionName)$/;"	f
core_type	lef/lef.y	/^core_type:$/;"	l
corr_list	lef/lef.y	/^corr_list:$/;"	l
corr_victim	lef/lef.y	/^corr_victim:$/;"	l
corr_victim_list	lef/lef.y	/^corr_victim_list:$/;"	l
correctTableCB	lefdiff/diffLefRW.cpp	/^int correctTableCB(lefrCallbackType_e c, lefiCorrectionTable* table,$/;"	f
correction	lef/lefiCrossTalk.cpp	/^lefiCorrectionVictim::correction(int index)$/;"	f	class:lefiCorrectionVictim
correctionCB	lefrw/lefrw.cpp	/^int correctionCB(lefrCallbackType_e c, lefiCorrectionTable *, lefiUserData) {$/;"	f
correctionTableWarnings	lef/lefrData.hpp	/^    int  correctionTableWarnings; $/;"	m	class:lefrData
correction_table_item	lef/lef.y	/^correction_table_item:$/;"	l
correction_table_list	lef/lef.y	/^correction_table_list:$/;"	l
correctionsAllocated_	lef/lefiCrossTalk.hpp	/^  int correctionsAllocated_;$/;"	m	class:lefiCorrectionVictim
corrections_	lef/lefiCrossTalk.hpp	/^  double* corrections_;$/;"	m	class:lefiCorrectionVictim
correctiontable	lef/lef.y	/^correctiontable: K_CORRECTIONTABLE int_number ';'$/;"	l
create	lef/lefiLayer.cpp	/^lefiAntennaPWL::create()$/;"	f	class:lefiAntennaPWL
create_file_statement	lef/lef.y	/^create_file_statement:$/;"	l
curAntennaModelIndex_	lef/lefiMacro.hpp	/^  int curAntennaModelIndex_;     \/\/ save the current index of the antenna$/;"	m	class:lefiPin
current	lef/lefiUnits.cpp	/^lefiUnits::current() const$/;"	f	class:lefiUnits
currentAntennaModel_	lef/lefiLayer.hpp	/^  lefiAntennaModel* currentAntennaModel_;$/;"	m	class:lefiLayer
currentDensityArray	lef/lefiLayer.cpp	/^lefiLayer::currentDensityArray(int      *numPoints,$/;"	f	class:lefiLayer
currentDensityPoint	lef/lefiLayer.cpp	/^lefiLayer::currentDensityPoint() const$/;"	f	class:lefiLayer
currentDensity_	lef/lefiLayer.hpp	/^  double currentDensity_;$/;"	m	class:lefiLayer
currentPointsAllocated_	lef/lefiLayer.hpp	/^  int currentPointsAllocated_;$/;"	m	class:lefiLayer
currentSource	lef/lefiMacro.cpp	/^lefiPin::currentSource() const$/;"	f	class:lefiPin
currentSource_	lef/lefiMacro.hpp	/^  char currentSource_[12];$/;"	m	class:lefiPin
currentWidths_	lef/lefiLayer.hpp	/^  double* currentWidths_;$/;"	m	class:lefiLayer
current_	lef/lefiLayer.hpp	/^  double* current_;$/;"	m	class:lefiLayer
current_	lef/lefiUnits.hpp	/^  double current_;$/;"	m	class:lefiUnits
current_buffer	lef/lefrData.hpp	/^    char       current_buffer[IN_BUF_SIZE];$/;"	m	class:lefrData
current_density_pwl	lef/lef.y	/^current_density_pwl: '(' int_number int_number ')'$/;"	l
current_density_pwl_list	lef/lef.y	/^current_density_pwl_list :$/;"	l
current_stack	lef/lefrData.hpp	/^    const char *current_stack[20];  \/\/ the stack itself $/;"	m	class:lefrData
current_token	lef/lefrData.hpp	/^    char       *current_token; $/;"	m	class:lefrData
cutArea	lef/lefiLayer.cpp	/^lefiLayerDensity::cutArea(int index) const$/;"	f	class:lefiLayerDensity
cutLayer	lef/lefiVia.cpp	/^lefiVia::cutLayer() const$/;"	f	class:lefiVia
cutLayerName	lef/lefiNonDefault.cpp	/^lefiNonDefault::cutLayerName(int index) const$/;"	f	class:lefiNonDefault
cutLayerName_	lef/lefiNonDefault.hpp	/^  char** cutLayerName_;            \/\/ 5.6$/;"	m	class:lefiNonDefault
cutLayer_	lef/lefiVia.hpp	/^  char* cutLayer_;             \/\/ 5.6$/;"	m	class:lefiVia
cutMaskNum	clef/lefiTypedefs.h	/^  int    cutMaskNum;$/;"	m	struct:lefiGeomVia
cutMaskNum	clef/lefiTypedefs.h	/^  int    cutMaskNum;$/;"	m	struct:lefiGeomViaIter
cutMaskNum	lef/lefiMisc.hpp	/^  int    cutMaskNum;$/;"	m	struct:lefiGeomVia
cutMaskNum	lef/lefiMisc.hpp	/^  int    cutMaskNum;$/;"	m	struct:lefiGeomViaIter
cutPattern	lef/lefiVia.cpp	/^lefiVia::cutPattern() const$/;"	f	class:lefiVia
cutPattern_	lef/lefiVia.hpp	/^  char* cutPattern_;           \/\/ 5.6$/;"	m	class:lefiVia
cutSpacing	lef/lefiLayer.cpp	/^lefiLayer::cutSpacing() const$/;"	f	class:lefiLayer
cutSpacing_	lef/lefiLayer.hpp	/^  double  cutSpacing_;$/;"	m	class:lefiLayer
cutWithin	lef/lefiLayer.cpp	/^lefiOrthogonal::cutWithin(int index) const$/;"	f	class:lefiOrthogonal
cutWithin_	lef/lefiLayer.hpp	/^  double* cutWithin_;$/;"	m	class:lefiLayer
cutWithin_	lef/lefiLayer.hpp	/^  double* cutWithin_;$/;"	m	class:lefiOrthogonal
cutareas_	lef/lefiLayer.hpp	/^  double* cutareas_;$/;"	m	class:lefiLayerDensity
dAllMsgs	lef/lefrSettings.hpp	/^    int  dAllMsgs; $/;"	m	class:lefrSettings
d_	lef/lefiLayer.hpp	/^  double* d_;$/;"	m	class:lefiAntennaPWL
d_	lef/lefiProp.hpp	/^  double d_;            \/\/ if it is a real or int the number is here.$/;"	m	class:lefiProp
data	lef/lefiDefs.hpp	/^    int data;$/;"	m	struct:token
dataError	lefdiff/diffLefRW.cpp	/^void dataError() {$/;"	f
dataError	lefrw/lefrw.cpp	/^void dataError() {$/;"	f
dataError	lefwrite/lefwriteCbs.cpp	/^void dataError() {$/;"	f
dataType	lef/lefiProp.cpp	/^lefiProp::dataType() const$/;"	f	class:lefiProp
dataType_	lef/lefiProp.hpp	/^  char dataType_;       \/\/ either I:integer R:real S:string Q:quotedstring.$/;"	m	class:lefiProp
databaseName	lef/lefiUnits.cpp	/^lefiUnits::databaseName() const$/;"	f	class:lefiUnits
databaseName_	lef/lefiUnits.hpp	/^  char* databaseName_;$/;"	m	class:lefiUnits
databaseNumber	lef/lefiUnits.cpp	/^lefiUnits::databaseNumber() const$/;"	f	class:lefiUnits
databaseNumber_	lef/lefiUnits.hpp	/^  double databaseNumber_;$/;"	m	class:lefiUnits
dc_layer_table	lef/lef.y	/^dc_layer_table:$/;"	l
dccurrent	lef/lefiLayer.cpp	/^lefiLayer::dccurrent(int index) const$/;"	f	class:lefiLayer
dccurrentAllocated_	lef/lefiLayer.hpp	/^  int dccurrentAllocated_;$/;"	m	class:lefiLayer
dccurrents_	lef/lefiLayer.hpp	/^  lefiLayerDensity** dccurrents_;$/;"	m	class:lefiLayer
def_statement	lef/lef.y	/^def_statement:$/;"	l
defaultAllocated_	lef/lefiArray.hpp	/^  int defaultAllocated_;$/;"	m	class:lefiArray
defaultCap	lef/lefiArray.cpp	/^lefiArray::defaultCap(int index) const$/;"	f	class:lefiArray
defaultCapMinPins	lef/lefiArray.cpp	/^lefiArray::defaultCapMinPins(int index) const$/;"	f	class:lefiArray
defaultName	lefdiff/diffLefRW.cpp	/^char    defaultName[128];$/;"	v
defaultName	lefrw/lefrw.cpp	/^char defaultName[128];$/;"	v
defaultOut	lefdiff/diffLefRW.cpp	/^char    defaultOut[128];$/;"	v
defaultOut	lefrw/lefrw.cpp	/^char defaultOut[128];$/;"	v
defaultOut	lefwrite/lefwrite.cpp	/^char defaultOut[128];$/;"	v
defaultOut	lefwrite/lefwriteCbs.cpp	/^char  defaultOut[128];$/;"	v
define_set	lef/lefrData.hpp	/^    lefDoubleMap        define_set; $/;"	m	class:lefrData
defineb_set	lef/lefrData.hpp	/^    lefIntMap           defineb_set; $/;"	m	class:lefrData
defines_set	lef/lefrData.hpp	/^    lefStringMap        defines_set; $/;"	m	class:lefrData
delayRiseOrFall	lef/lefiMacro.cpp	/^lefiTiming::delayRiseOrFall()$/;"	f	class:lefiTiming
delayRiseOrFall_	lef/lefiMacro.hpp	/^  char* delayRiseOrFall_;$/;"	m	class:lefiTiming
delayTableOne	lef/lefiMacro.cpp	/^lefiTiming::delayTableOne()$/;"	f	class:lefiTiming
delayTableOne_	lef/lefiMacro.hpp	/^  double delayTableOne_;$/;"	m	class:lefiTiming
delayTableThree	lef/lefiMacro.cpp	/^lefiTiming::delayTableThree()$/;"	f	class:lefiTiming
delayTableThree_	lef/lefiMacro.hpp	/^  double delayTableThree_;$/;"	m	class:lefiTiming
delayTableTwo	lef/lefiMacro.cpp	/^lefiTiming::delayTableTwo()$/;"	f	class:lefiTiming
delayTableTwo_	lef/lefiMacro.hpp	/^  double delayTableTwo_;$/;"	m	class:lefiTiming
delayUnateness	lef/lefiMacro.cpp	/^lefiTiming::delayUnateness()$/;"	f	class:lefiTiming
delayUnateness_	lef/lefiMacro.hpp	/^  char* delayUnateness_;$/;"	m	class:lefiTiming
delay_or_transition	lef/lef.y	/^delay_or_transition :$/;"	l
densityCB	lefdiff/diffLefRW.cpp	/^int densityCB(lefrCallbackType_e c, lefiDensity* density,$/;"	f
densityCB	lefrw/lefrw.cpp	/^int densityCB(lefrCallbackType_e c, lefiDensity* density,$/;"	f
densityCheckStep	lef/lefiLayer.cpp	/^lefiLayer::densityCheckStep() const$/;"	f	class:lefiLayer
densityCheckStep_	lef/lefiLayer.hpp	/^  double densityCheckStep_; $/;"	m	class:lefiLayer
densityCheckWindowLength	lef/lefiLayer.cpp	/^lefiLayer::densityCheckWindowLength() const$/;"	f	class:lefiLayer
densityCheckWindowLength_	lef/lefiLayer.hpp	/^  double densityCheckWindowLength_; $/;"	m	class:lefiLayer
densityCheckWindowWidth	lef/lefiLayer.cpp	/^lefiLayer::densityCheckWindowWidth() const$/;"	f	class:lefiLayer
densityCheckWindowWidth_	lef/lefiLayer.hpp	/^  double densityCheckWindowWidth_; $/;"	m	class:lefiLayer
densityValue	lef/lefiMacro.cpp	/^lefiDensity::densityValue(int   index,$/;"	f	class:lefiDensity
densityValue_	lef/lefiMacro.hpp	/^  double**       densityValue_;$/;"	m	class:lefiDensity
density_layer	lef/lef.y	/^density_layer: K_LAYER { lefData->lefDumbMode = 1; lefData->lefNoNum = 1; } T_STRING ';'$/;"	l
density_layer_rect	lef/lef.y	/^density_layer_rect: K_RECT pt pt int_number ';'$/;"	l
density_layer_rects	lef/lef.y	/^density_layer_rects: \/\/ empty $/;"	l
density_layers	lef/lef.y	/^density_layers: \/\/ empty $/;"	l
diagMinEdgeLength	lef/lefiLayer.cpp	/^lefiLayer::diagMinEdgeLength() const$/;"	f	class:lefiLayer
diagMinEdgeLength_	lef/lefiLayer.hpp	/^  double  diagMinEdgeLength_;$/;"	m	class:lefiLayer
diagPitch	lef/lefiLayer.cpp	/^lefiLayer::diagPitch() const$/;"	f	class:lefiLayer
diagPitchX	lef/lefiLayer.cpp	/^lefiLayer::diagPitchX() const$/;"	f	class:lefiLayer
diagPitchX_	lef/lefiLayer.hpp	/^  double diagPitchX_;                 \/\/ 5.6$/;"	m	class:lefiLayer
diagPitchY	lef/lefiLayer.cpp	/^lefiLayer::diagPitchY() const$/;"	f	class:lefiLayer
diagPitchY_	lef/lefiLayer.hpp	/^  double diagPitchY_;                 \/\/ 5.6$/;"	m	class:lefiLayer
diagSpacing	lef/lefiLayer.cpp	/^lefiLayer::diagSpacing() const$/;"	f	class:lefiLayer
diagSpacing_	lef/lefiLayer.hpp	/^  double diagSpacing_;                \/\/ 5.6$/;"	m	class:lefiLayer
diagWidth	lef/lefiLayer.cpp	/^lefiLayer::diagWidth() const$/;"	f	class:lefiLayer
diagWidth_	lef/lefiLayer.hpp	/^  double diagWidth_;                  \/\/ 5.6$/;"	m	class:lefiLayer
diagWidth_	lef/lefiNonDefault.hpp	/^  double* diagWidth_;              \/\/ 5.6$/;"	m	class:lefiNonDefault
dielectric	lef/lef.y	/^dielectric: K_DIELECTRIC int_number ';'$/;"	l
dielectricCB	lefdiff/diffLefRW.cpp	/^int dielectricCB(lefrCallbackType_e c, double dielectric, lefiUserData ud) {$/;"	f
dielectricCB	lefrw/lefrw.cpp	/^int dielectricCB(lefrCallbackType_e c, double dielectric, lefiUserData) {$/;"	f
dielectricWarnings	lef/lefrData.hpp	/^    int  dielectricWarnings; $/;"	m	class:lefrData
diffLefReadFile	lefdiff/diffLefRW.cpp	/^int diffLefReadFile(char* inFile, char* outFile) {$/;"	f
diffUsage	lefdiff/differLef.cpp	/^void diffUsage() {$/;"	f
direction	lef/lefiLayer.cpp	/^lefiLayer::direction() const$/;"	f	class:lefiLayer
direction	lef/lefiMacro.cpp	/^lefiPin::direction() const$/;"	f	class:lefiPin
direction_	lef/lefiLayer.hpp	/^  char*  direction_;$/;"	m	class:lefiLayer
direction_	lef/lefiMacro.hpp	/^  char direction_[32];$/;"	m	class:lefiPin
direction_	lef/lefiViaRule.hpp	/^  char direction_;$/;"	m	class:lefiViaRuleLayer
disableMsg	lef/lefrSettings.cpp	/^lefrSettings::disableMsg(int msgId)$/;"	f	class:lefrSettings
distance	lef/lefiLayer.cpp	/^lefiInfluence::distance(int index) const$/;"	f	class:lefiInfluence
distance	lef/lefiMisc.cpp	/^lefiSpacing::distance() const$/;"	f	class:lefiSpacing
distance_	lef/lefiLayer.hpp	/^  double* distance_;$/;"	m	class:lefiInfluence
distance_	lef/lefiMisc.hpp	/^  double distance_;$/;"	m	class:lefiSpacing
dividerCB	lefdiff/diffLefRW.cpp	/^int dividerCB(lefrCallbackType_e c, const char* divideChar, lefiUserData ud) {$/;"	f
dividerCB	lefrw/lefrw.cpp	/^int dividerCB(lefrCallbackType_e c, const char* name, lefiUserData) {$/;"	f
dividerCB	lefwrite/lefwriteCbs.cpp	/^int dividerCB(lefwCallbackType_e c, lefiUserData ud) {$/;"	f
dividerchar	lef/lef.y	/^dividerchar: K_DIVIDERCHAR QSTRING ';'$/;"	l
doneCB	lefrw/lefrw.cpp	/^int doneCB(lefrCallbackType_e c, void*, lefiUserData) {$/;"	f
doneLib	lef/lefrData.hpp	/^    int  doneLib; \/\/ keep track if the library is done parsing$/;"	m	class:lefrData
dtrm	lef/lef.y	/^dtrm:$/;"	l
dvalues_	lef/lefiLayer.hpp	/^  double* dvalues_;$/;"	m	class:lefiLayer
dvalues_	lef/lefiNonDefault.hpp	/^  double* dvalues_;$/;"	m	class:lefiNonDefault
dvalues_	lef/lefiViaRule.hpp	/^  double* dvalues_;$/;"	m	class:lefiViaRule
edge	lef/lefiCrossTalk.cpp	/^lefiCorrectionEdge::edge()$/;"	f	class:lefiCorrectionEdge
edge	lef/lefiCrossTalk.cpp	/^lefiCorrectionTable::edge(int index)$/;"	f	class:lefiCorrectionTable
edge	lef/lefiCrossTalk.cpp	/^lefiNoiseEdge::edge()$/;"	f	class:lefiNoiseEdge
edge	lef/lefiCrossTalk.cpp	/^lefiNoiseTable::edge(int index)$/;"	f	class:lefiNoiseTable
edge1CB	lefrw/lefrw.cpp	/^int edge1CB(lefrCallbackType_e c, double name, lefiUserData) {$/;"	f
edge2CB	lefrw/lefrw.cpp	/^int edge2CB(lefrCallbackType_e c, double name, lefiUserData) {$/;"	f
edgeCap	lef/lefiLayer.cpp	/^lefiLayer::edgeCap() const$/;"	f	class:lefiLayer
edgeCap_	lef/lefiLayer.hpp	/^  double edgeCap_;$/;"	m	class:lefiLayer
edgeCap_	lef/lefiNonDefault.hpp	/^  double* edgeCap_;$/;"	m	class:lefiNonDefault
edgeRate1CB	lefdiff/diffLefRW.cpp	/^int edgeRate1CB(lefrCallbackType_e c, double rate, lefiUserData ud) {$/;"	f
edgeRate2CB	lefdiff/diffLefRW.cpp	/^int edgeRate2CB(lefrCallbackType_e c, double rate, lefiUserData ud) {$/;"	f
edgeRateCB	lefdiff/diffLefRW.cpp	/^int edgeRateCB(lefrCallbackType_e c, double rate, lefiUserData ud) {$/;"	f
edgeRateScaleFactorWarnings	lef/lefrData.hpp	/^    int  edgeRateScaleFactorWarnings; $/;"	m	class:lefrData
edgeRateThreshold1Warnings	lef/lefrData.hpp	/^    int  edgeRateThreshold1Warnings; $/;"	m	class:lefrData
edgeRateThreshold2Warnings	lef/lefrData.hpp	/^    int  edgeRateThreshold2Warnings; $/;"	m	class:lefrData
edgeScaleCB	lefrw/lefrw.cpp	/^int edgeScaleCB(lefrCallbackType_e c, double name, lefiUserData) {$/;"	f
edge_	lef/lefiCrossTalk.hpp	/^  double edge_;$/;"	m	class:lefiCorrectionEdge
edge_	lef/lefiCrossTalk.hpp	/^  double edge_;$/;"	m	class:lefiNoiseEdge
edgeratescalefactor	lef/lef.y	/^edgeratescalefactor: K_EDGERATESCALEFACTOR int_number ';'$/;"	l
edgeratethreshold1	lef/lef.y	/^edgeratethreshold1: K_EDGERATETHRESHOLD1 int_number ';'$/;"	l
edgeratethreshold2	lef/lef.y	/^edgeratethreshold2: K_EDGERATETHRESHOLD2 int_number ';'$/;"	l
edgesAllocated_	lef/lefiCrossTalk.hpp	/^  int edgesAllocated_;$/;"	m	class:lefiCorrectionTable
edgesAllocated_	lef/lefiCrossTalk.hpp	/^  int edgesAllocated_;$/;"	m	class:lefiNoiseTable
edges_	lef/lefiCrossTalk.hpp	/^  lefiCorrectionEdge** edges_;$/;"	m	class:lefiCorrectionTable
edges_	lef/lefiCrossTalk.hpp	/^  lefiNoiseEdge** edges_;$/;"	m	class:lefiNoiseTable
electrical_direction	lef/lef.y	/^electrical_direction:$/;"	l
else	lef/lef.y	/^else:$/;"	l
enableAllMsgs	lef/lefrSettings.cpp	/^lefrSettings::enableAllMsgs()$/;"	f	class:lefrSettings
enableMsg	lef/lefrSettings.cpp	/^lefrSettings::enableMsg(int msgId)$/;"	f	class:lefrSettings
encClearBuf	lef/crypt.cpp	/^encClearBuf(FILE *fp)$/;"	f
encCloseFile	lef/crypt.cpp	/^encCloseFile(FILE *fp)$/;"	f
encFgetc	lef/crypt.cpp	/^encFgetc(FILE *fp)$/;"	f
encFputc	lef/crypt.cpp	/^encFputc(char   c,$/;"	f
encIsEncrypted	lef/crypt.cpp	/^encIsEncrypted(unsigned char *buf)$/;"	f
encOpenFileForRead	lef/crypt.cpp	/^encOpenFileForRead(char *filename)$/;"	f
encOpenFileForWrite	lef/crypt.cpp	/^encOpenFileForWrite(char    *filename,$/;"	f
encPrint	lef/crypt.cpp	/^encPrint(FILE   *fp,$/;"	f
encReadingEncrypted	lef/crypt.cpp	/^encReadingEncrypted()$/;"	f
encWritingEncrypted	lef/crypt.cpp	/^encWritingEncrypted()$/;"	f
enclosureAllocated_	lef/lefiLayer.hpp	/^  int enclosureAllocated_;$/;"	m	class:lefiLayer
enclosureExceptExtraCut	lef/lefiLayer.cpp	/^lefiLayer::enclosureExceptExtraCut(int index) const$/;"	f	class:lefiLayer
enclosureMinLength	lef/lefiLayer.cpp	/^lefiLayer::enclosureMinLength(int index) const$/;"	f	class:lefiLayer
enclosureMinWidth	lef/lefiLayer.cpp	/^lefiLayer::enclosureMinWidth(int index) const$/;"	f	class:lefiLayer
enclosureOverhang1	lef/lefiLayer.cpp	/^lefiLayer::enclosureOverhang1(int index) const$/;"	f	class:lefiLayer
enclosureOverhang1	lef/lefiViaRule.cpp	/^lefiViaRuleLayer::enclosureOverhang1() const$/;"	f	class:lefiViaRuleLayer
enclosureOverhang2	lef/lefiLayer.cpp	/^lefiLayer::enclosureOverhang2(int index) const$/;"	f	class:lefiLayer
enclosureOverhang2	lef/lefiViaRule.cpp	/^lefiViaRuleLayer::enclosureOverhang2() const$/;"	f	class:lefiViaRuleLayer
enclosureRule	lef/lefiLayer.cpp	/^lefiLayer::enclosureRule(int index)$/;"	f	class:lefiLayer
enclosureRules_	lef/lefiLayer.hpp	/^  char** enclosureRules_;$/;"	m	class:lefiLayer
encminWidth_	lef/lefiLayer.hpp	/^  double* encminWidth_;$/;"	m	class:lefiLayer
encrypted	lef/lefrData.hpp	/^    int  encrypted; $/;"	m	class:lefrData
end	lef/lefiNonDefault.cpp	/^lefiNonDefault::end()$/;"	f	class:lefiNonDefault
endLibCB	lefwrite/lefwriteCbs.cpp	/^int endLibCB(lefwCallbackType_e c, lefiUserData ud) {$/;"	f
endOfNotchWidth_	lef/lefiLayer.hpp	/^  double* endOfNotchWidth_;$/;"	m	class:lefiLayer
end_array	lef/lef.y	/^end_array: K_END {lefData->lefDumbMode = 1; lefData->lefNoNum = 1;} T_STRING$/;"	l
end_correctiontable	lef/lef.y	/^end_correctiontable:$/;"	l
end_irdrop	lef/lef.y	/^end_irdrop: K_END K_IRDROP$/;"	l
end_layer	lef/lef.y	/^end_layer: K_END {lefData->lefDumbMode = 1; lefData->lefNoNum = 1; } T_STRING$/;"	l
end_library	lef/lef.y	/^end_library:$/;"	l
end_macro	lef/lef.y	/^end_macro: K_END {lefData->lefDumbMode = 1; lefData->lefNoNum = 1;} T_STRING$/;"	l
end_macro_pin	lef/lef.y	/^end_macro_pin: K_END {lefData->lefDumbMode = 1; lefData->lefNoNum = 1;} T_STRING$/;"	l
end_nd_rule	lef/lef.y	/^end_nd_rule: K_END$/;"	l
end_noisetable	lef/lef.y	/^end_noisetable:$/;"	l
end_site	lef/lef.y	/^end_site: K_END {lefData->lefDumbMode = 1; lefData->lefNoNum = 1;} T_STRING$/;"	l
end_spacing	lef/lef.y	/^end_spacing: K_END K_SPACING$/;"	l
end_timing	lef/lef.y	/^end_timing: K_END K_TIMING $/;"	l
end_via	lef/lef.y	/^end_via: K_END {lefData->lefDumbMode = 1; lefData->lefNoNum = 1;} T_STRING $/;"	l
end_viarule	lef/lef.y	/^end_viarule: K_END {lefData->lefDumbMode = 1; lefData->lefNoNum = 1;}  T_STRING $/;"	l
endcap_type	lef/lef.y	/^endcap_type:$/;"	l
eolWidth_	lef/lefiLayer.hpp	/^  double* eolWidth_;$/;"	m	class:lefiLayer
eolWithin_	lef/lefiLayer.hpp	/^  double* eolWithin_;$/;"	m	class:lefiLayer
eonotchLength_	lef/lefiLayer.hpp	/^  double* eonotchLength_;$/;"	m	class:lefiLayer
errorCB	lefrw/lefrw.cpp	/^void errorCB(const char* msg) {$/;"	f
exeName	lefdiff/differLef.cpp	/^char * exeName;    \/\/ use to save the executable name$/;"	v
expression	lef/lef.y	/^expression:$/;"	l
extCB	lefwrite/lefwriteCbs.cpp	/^int extCB(lefwCallbackType_e c, lefiUserData ud) {$/;"	f
extension	lef/lef.y	/^extension: K_BEGINEXT$/;"	l
extensionCB	lefrw/lefrw.cpp	/^int extensionCB(lefrCallbackType_e c, const char* extsn, lefiUserData) {$/;"	f
extension_opt	lef/lef.y	/^extension_opt:  \/\/ empty $/;"	l
fallAtt1One	lef/lefiMacro.cpp	/^lefiTiming::fallAtt1One()$/;"	f	class:lefiTiming
fallAtt1One_	lef/lefiMacro.hpp	/^  double fallAtt1One_;$/;"	m	class:lefiTiming
fallAtt1Two	lef/lefiMacro.cpp	/^lefiTiming::fallAtt1Two()$/;"	f	class:lefiTiming
fallAtt1Two_	lef/lefiMacro.hpp	/^  double fallAtt1Two_;$/;"	m	class:lefiTiming
fallCSOne	lef/lefiMacro.cpp	/^lefiTiming::fallCSOne()$/;"	f	class:lefiTiming
fallCSOne_	lef/lefiMacro.hpp	/^  double fallCSOne_;$/;"	m	class:lefiTiming
fallCSTwo	lef/lefiMacro.cpp	/^lefiTiming::fallCSTwo()$/;"	f	class:lefiTiming
fallCSTwo_	lef/lefiMacro.hpp	/^  double fallCSTwo_;$/;"	m	class:lefiTiming
fallIntrinsicFour	lef/lefiMacro.cpp	/^lefiTiming::fallIntrinsicFour()$/;"	f	class:lefiTiming
fallIntrinsicFour_	lef/lefiMacro.hpp	/^  double fallIntrinsicFour_;$/;"	m	class:lefiTiming
fallIntrinsicOne	lef/lefiMacro.cpp	/^lefiTiming::fallIntrinsicOne()$/;"	f	class:lefiTiming
fallIntrinsicOne_	lef/lefiMacro.hpp	/^  double fallIntrinsicOne_;$/;"	m	class:lefiTiming
fallIntrinsicThree	lef/lefiMacro.cpp	/^lefiTiming::fallIntrinsicThree()$/;"	f	class:lefiTiming
fallIntrinsicThree_	lef/lefiMacro.hpp	/^  double fallIntrinsicThree_;$/;"	m	class:lefiTiming
fallIntrinsicTwo	lef/lefiMacro.cpp	/^lefiTiming::fallIntrinsicTwo()$/;"	f	class:lefiTiming
fallIntrinsicTwo_	lef/lefiMacro.hpp	/^  double fallIntrinsicTwo_;$/;"	m	class:lefiTiming
fallRSOne	lef/lefiMacro.cpp	/^lefiTiming::fallRSOne()$/;"	f	class:lefiTiming
fallRSOne_	lef/lefiMacro.hpp	/^  double fallRSOne_;$/;"	m	class:lefiTiming
fallRSTwo	lef/lefiMacro.cpp	/^lefiTiming::fallRSTwo()$/;"	f	class:lefiTiming
fallRSTwo_	lef/lefiMacro.hpp	/^  double fallRSTwo_;$/;"	m	class:lefiTiming
fallSatcur	lef/lefiMacro.cpp	/^lefiPin::fallSatcur() const$/;"	f	class:lefiPin
fallSatcur_	lef/lefiMacro.hpp	/^  double fallSatcur_;$/;"	m	class:lefiPin
fallSlewFive	lef/lefiMacro.cpp	/^lefiTiming::fallSlewFive()$/;"	f	class:lefiTiming
fallSlewFive_	lef/lefiMacro.hpp	/^  double fallSlewFive_;$/;"	m	class:lefiTiming
fallSlewFour	lef/lefiMacro.cpp	/^lefiTiming::fallSlewFour()$/;"	f	class:lefiTiming
fallSlewFour_	lef/lefiMacro.hpp	/^  double fallSlewFour_;$/;"	m	class:lefiTiming
fallSlewLimit	lef/lefiMacro.cpp	/^lefiPin::fallSlewLimit() const$/;"	f	class:lefiPin
fallSlewLimit_	lef/lefiMacro.hpp	/^  double fallSlewLimit_;$/;"	m	class:lefiPin
fallSlewOne	lef/lefiMacro.cpp	/^lefiTiming::fallSlewOne()$/;"	f	class:lefiTiming
fallSlewOne_	lef/lefiMacro.hpp	/^  double fallSlewOne_;$/;"	m	class:lefiTiming
fallSlewSeven	lef/lefiMacro.cpp	/^lefiTiming::fallSlewSeven()$/;"	f	class:lefiTiming
fallSlewSeven_	lef/lefiMacro.hpp	/^  double fallSlewSeven_;$/;"	m	class:lefiTiming
fallSlewSix	lef/lefiMacro.cpp	/^lefiTiming::fallSlewSix()$/;"	f	class:lefiTiming
fallSlewSix_	lef/lefiMacro.hpp	/^  double fallSlewSix_;$/;"	m	class:lefiTiming
fallSlewThree	lef/lefiMacro.cpp	/^lefiTiming::fallSlewThree()$/;"	f	class:lefiTiming
fallSlewThree_	lef/lefiMacro.hpp	/^  double fallSlewThree_;$/;"	m	class:lefiTiming
fallSlewTwo	lef/lefiMacro.cpp	/^lefiTiming::fallSlewTwo()$/;"	f	class:lefiTiming
fallSlewTwo_	lef/lefiMacro.hpp	/^  double fallSlewTwo_;$/;"	m	class:lefiTiming
fallThresh	lef/lefiMacro.cpp	/^lefiPin::fallThresh() const$/;"	f	class:lefiPin
fallThresh_	lef/lefiMacro.hpp	/^  double fallThresh_;$/;"	m	class:lefiPin
fallToOne	lef/lefiMacro.cpp	/^lefiTiming::fallToOne()$/;"	f	class:lefiTiming
fallToOne_	lef/lefiMacro.hpp	/^  double fallToOne_;$/;"	m	class:lefiTiming
fallToTwo	lef/lefiMacro.cpp	/^lefiTiming::fallToTwo()$/;"	f	class:lefiTiming
fallToTwo_	lef/lefiMacro.hpp	/^  double fallToTwo_;$/;"	m	class:lefiTiming
fallVoltage	lef/lefiMacro.cpp	/^lefiPin::fallVoltage() const$/;"	f	class:lefiPin
fallVoltage_	lef/lefiMacro.hpp	/^  double fallVoltage_;$/;"	m	class:lefiPin
fillActiveSpacing	lef/lefiLayer.cpp	/^lefiLayer::fillActiveSpacing() const$/;"	f	class:lefiLayer
fillActiveSpacing_	lef/lefiLayer.hpp	/^  double fillActiveSpacing_; $/;"	m	class:lefiLayer
first	lef/lefrData.hpp	/^    int  first; $/;"	m	class:lefrData
firstPt	lef/lef.y	/^firstPt: pt  $/;"	l
first_buffer	lef/lefrData.hpp	/^    int  first_buffer; $/;"	m	class:lefrData
fixedMaskCB	lefdiff/diffLefRW.cpp	/^int fixedMaskCB(lefrCallbackType_e c, int fixedMask, lefiUserData ud) {$/;"	f
fixedMaskCB	lefrw/lefrw.cpp	/^int fixedMaskCB(lefrCallbackType_e c, int fixedMask, lefiUserData) {$/;"	f
fixedmask	lef/lef.y	/^fixedmask: K_FIXEDMASK ';'$/;"	l
floorPlanName	lef/lefiArray.cpp	/^lefiArray::floorPlanName(int index) const$/;"	f	class:lefiArray
floorPlansAllocated_	lef/lefiArray.hpp	/^  int floorPlansAllocated_;$/;"	m	class:lefiArray
floorplan_element	lef/lef.y	/^floorplan_element:$/;"	l
floorplan_list	lef/lef.y	/^floorplan_list:$/;"	l
floorplan_start	lef/lef.y	/^floorplan_start: K_FLOORPLAN T_STRING$/;"	l
floors_	lef/lefiArray.hpp	/^  lefiArrayFloorPlan** floors_;$/;"	m	class:lefiArray
foreign	lef/lefiVia.cpp	/^lefiVia::foreign() const$/;"	f	class:lefiVia
foreignAllocated_	lef/lefiMacro.hpp	/^  int     foreignAllocated_;$/;"	m	class:lefiPin
foreignAllocated_	lef/lefiMacro.hpp	/^  int foreignAllocated_;$/;"	m	class:lefiMacro
foreignName	lef/lefiMacro.cpp	/^lefiMacro::foreignName(int index) const$/;"	f	class:lefiMacro
foreignName	lef/lefiMacro.cpp	/^lefiPin::foreignName(int index) const$/;"	f	class:lefiPin
foreignOrient	lef/lefiMacro.cpp	/^lefiMacro::foreignOrient(int index) const$/;"	f	class:lefiMacro
foreignOrient	lef/lefiMacro.cpp	/^lefiPin::foreignOrient(int index) const$/;"	f	class:lefiPin
foreignOrient	lef/lefiVia.cpp	/^lefiVia::foreignOrient() const$/;"	f	class:lefiVia
foreignOrientStr	lef/lefiMacro.cpp	/^lefiMacro::foreignOrientStr(int index) const$/;"	f	class:lefiMacro
foreignOrientStr	lef/lefiMacro.cpp	/^lefiPin::foreignOrientStr(int index) const$/;"	f	class:lefiPin
foreignOrientStr	lef/lefiVia.cpp	/^lefiVia::foreignOrientStr() const$/;"	f	class:lefiVia
foreignOrient_	lef/lefiMacro.hpp	/^  int*    foreignOrient_;$/;"	m	class:lefiPin
foreignOrient_	lef/lefiMacro.hpp	/^  int*  foreignOrient_;$/;"	m	class:lefiMacro
foreignOrient_	lef/lefiVia.hpp	/^  int foreignOrient_;$/;"	m	class:lefiVia
foreignX	lef/lefiMacro.cpp	/^lefiMacro::foreignX(int index) const$/;"	f	class:lefiMacro
foreignX	lef/lefiMacro.cpp	/^lefiPin::foreignX(int index) const$/;"	f	class:lefiPin
foreignX	lef/lefiVia.cpp	/^lefiVia::foreignX() const$/;"	f	class:lefiVia
foreignX_	lef/lefiMacro.hpp	/^  double* foreignX_;$/;"	m	class:lefiMacro
foreignX_	lef/lefiMacro.hpp	/^  double* foreignX_;$/;"	m	class:lefiPin
foreignX_	lef/lefiVia.hpp	/^  double foreignX_;$/;"	m	class:lefiVia
foreignY	lef/lefiMacro.cpp	/^lefiMacro::foreignY(int index) const$/;"	f	class:lefiMacro
foreignY	lef/lefiMacro.cpp	/^lefiPin::foreignY(int index) const$/;"	f	class:lefiPin
foreignY	lef/lefiVia.cpp	/^lefiVia::foreignY() const$/;"	f	class:lefiVia
foreignY_	lef/lefiMacro.hpp	/^  double* foreignY_;$/;"	m	class:lefiMacro
foreignY_	lef/lefiMacro.hpp	/^  double* foreignY_;$/;"	m	class:lefiPin
foreignY_	lef/lefiVia.hpp	/^  double foreignY_;$/;"	m	class:lefiVia
foreign_	lef/lefiMacro.hpp	/^  char**  foreign_;$/;"	m	class:lefiPin
foreign_	lef/lefiMacro.hpp	/^  char** foreign_;$/;"	m	class:lefiMacro
foreign_	lef/lefiVia.hpp	/^  char* foreign_;$/;"	m	class:lefiVia
fout	lefdiff/diffLefRW.cpp	/^FILE*   fout;$/;"	v
fout	lefrw/lefrw.cpp	/^FILE* fout;$/;"	v
fout	lefwrite/lefwrite.cpp	/^FILE* fout;$/;"	v
fout	lefwrite/lefwriteCbs.cpp	/^FILE* fout;$/;"	v
freeCB	lefrw/lefrw.cpp	/^void freeCB(void* name) {$/;"	f
frequency	lef/lefiLayer.cpp	/^lefiLayerDensity::frequency(int index) const$/;"	f	class:lefiLayerDensity
frequency	lef/lefiUnits.cpp	/^lefiUnits::frequency() const$/;"	f	class:lefiUnits
frequency_	lef/lefiLayer.hpp	/^  double* frequency_;$/;"	m	class:lefiLayerDensity
frequency_	lef/lefiUnits.hpp	/^  double frequency_;$/;"	m	class:lefiUnits
fromAllocated_	lef/lefiMacro.hpp	/^  int fromAllocated_;$/;"	m	class:lefiTiming
fromPin	lef/lefiMacro.cpp	/^lefiTiming::fromPin(int index)$/;"	f	class:lefiTiming
from_	lef/lefiMacro.hpp	/^  char** from_;$/;"	m	class:lefiTiming
from_pin_trigger	lef/lef.y	/^from_pin_trigger:$/;"	l
gAllocated_	lef/lefiArray.hpp	/^  int gAllocated_;$/;"	m	class:lefiArray
gcell	lef/lefiArray.cpp	/^lefiArray::gcell(int index) const$/;"	f	class:lefiArray
gcellPattern	lef/lef.y	/^gcellPattern: K_X int_number K_DO int_number K_STEP int_number$/;"	l
gcell_	lef/lefiArray.hpp	/^  lefiGcellPattern** gcell_;$/;"	m	class:lefiArray
ge56almostDone	lef/lefrData.hpp	/^    int  ge56almostDone; \/\/ have reached the EXTENSION SECTION$/;"	m	class:lefrData
ge56done	lef/lefrData.hpp	/^    int  ge56done; \/\/ a 5.6 and it has END LIBRARY statement$/;"	m	class:lefrData
gen1Size_	lef/lefiMacro.hpp	/^  int gen1Size_;$/;"	m	class:lefiMacro
gen1_	lef/lefiMacro.hpp	/^  char* gen1_;$/;"	m	class:lefiMacro
gen2Size_	lef/lefiMacro.hpp	/^  int gen2Size_;$/;"	m	class:lefiMacro
gen2_	lef/lefiMacro.hpp	/^  char* gen2_;$/;"	m	class:lefiMacro
generate	lef/lefiMacro.cpp	/^lefiMacro::generate(char    **name1,$/;"	f	class:lefiMacro
generator	lef/lefiMacro.cpp	/^lefiMacro::generator() const$/;"	f	class:lefiMacro
generatorSize_	lef/lefiMacro.hpp	/^  int generatorSize_;$/;"	m	class:lefiMacro
generator_	lef/lefiMacro.hpp	/^  char* generator_;$/;"	m	class:lefiMacro
geometries	lef/lef.y	/^geometries: geometry geometry_options$/;"	l
geometries	lef/lefiMacro.cpp	/^lefiObstruction::geometries() const$/;"	f	class:lefiObstruction
geometries_	lef/lefiMacro.hpp	/^  lefiGeometries* geometries_;$/;"	m	class:lefiObstruction
geometry	lef/lef.y	/^geometry:$/;"	l
geometry_options	lef/lef.y	/^geometry_options: \/\/ empty $/;"	l
getClass	lef/lefiMisc.cpp	/^lefiGeometries::getClass(int index) const$/;"	f	class:lefiGeometries
getLayer	lef/lefiMisc.cpp	/^lefiGeometries::getLayer(int index) const$/;"	f	class:lefiGeometries
getLayerLef58Types	lef/lefrSettings.cpp	/^lefrSettings::getLayerLef58Types(const char *type) const$/;"	f	class:lefrSettings
getLayerMinSpacing	lef/lefiMisc.cpp	/^lefiGeometries::getLayerMinSpacing(int index) const$/;"	f	class:lefiGeometries
getLayerRuleWidth	lef/lefiMisc.cpp	/^lefiGeometries::getLayerRuleWidth(int index) const$/;"	f	class:lefiGeometries
getNumber	lef/lefiLayer.cpp	/^lefiLayer::getNumber()$/;"	f	class:lefiLayer
getPath	lef/lefiMisc.cpp	/^lefiGeometries::getPath(int index) const$/;"	f	class:lefiGeometries
getPathIter	lef/lefiMisc.cpp	/^lefiGeometries::getPathIter(int index) const$/;"	f	class:lefiGeometries
getPolygon	lef/lefiMisc.cpp	/^lefiGeometries::getPolygon(int index) const$/;"	f	class:lefiGeometries
getPolygon	lef/lefiVia.cpp	/^lefiVia::getPolygon(int layerNum,$/;"	f	class:lefiVia
getPolygon	lef/lefiVia.cpp	/^lefiViaLayer::getPolygon(int index) const$/;"	f	class:lefiViaLayer
getPolygonIter	lef/lefiMisc.cpp	/^lefiGeometries::getPolygonIter(int index) const$/;"	f	class:lefiGeometries
getRect	lef/lefiMacro.cpp	/^lefiDensity::getRect(int    index,$/;"	f	class:lefiDensity
getRect	lef/lefiMisc.cpp	/^lefiGeometries::getRect(int index) const$/;"	f	class:lefiGeometries
getRectIter	lef/lefiMisc.cpp	/^lefiGeometries::getRectIter(int index) const$/;"	f	class:lefiGeometries
getToken	lef/lefrSettings.cpp	/^lefrSettings::getToken(const std::string &input, int &startIdx)$/;"	f	class:lefrSettings
getVia	lef/lefiMisc.cpp	/^lefiGeometries::getVia(int index) const$/;"	f	class:lefiGeometries
getViaIter	lef/lefiMisc.cpp	/^lefiGeometries::getViaIter(int index) const$/;"	f	class:lefiGeometries
getWidth	lef/lefiMisc.cpp	/^lefiGeometries::getWidth(int index) const$/;"	f	class:lefiGeometries
groundSensitivity	lef/lefiMacro.cpp	/^lefiPin::groundSensitivity() const$/;"	f	class:lefiPin
gsPinName_	lef/lefiMacro.hpp	/^  char* gsPinName_;$/;"	m	class:lefiPin
hardSpacing_	lef/lefiNonDefault.hpp	/^  int    hardSpacing_;             \/\/ 5.6$/;"	m	class:lefiNonDefault
has90Symmetry	lef/lefiMacro.cpp	/^lefiMacro::has90Symmetry() const$/;"	f	class:lefiMacro
has90Symmetry	lef/lefiMisc.cpp	/^lefiSite::has90Symmetry() const$/;"	f	class:lefiSite
hasAccurrentDensity	lef/lefiLayer.cpp	/^lefiLayer::hasAccurrentDensity() const$/;"	f	class:lefiLayer
hasAntennaArea	lef/lefiLayer.cpp	/^lefiLayer::hasAntennaArea() const$/;"	f	class:lefiLayer
hasAntennaAreaDiffReducePWL	lef/lefiLayer.cpp	/^lefiAntennaModel::hasAntennaAreaDiffReducePWL() const$/;"	f	class:lefiAntennaModel
hasAntennaAreaFactor	lef/lefiLayer.cpp	/^lefiAntennaModel::hasAntennaAreaFactor() const$/;"	f	class:lefiAntennaModel
hasAntennaAreaFactorDUO	lef/lefiLayer.cpp	/^lefiAntennaModel::hasAntennaAreaFactorDUO() const$/;"	f	class:lefiAntennaModel
hasAntennaAreaFactorDUO_	lef/lefiLayer.hpp	/^  int hasAntennaAreaFactorDUO_;$/;"	m	class:lefiAntennaModel
hasAntennaAreaFactorDUO_	lef/lefiLayer.hpp	/^  int hasAntennaAreaFactorDUO_;$/;"	m	class:lefiLayer
hasAntennaAreaFactor_	lef/lefiLayer.hpp	/^  int hasAntennaAreaFactor_;$/;"	m	class:lefiAntennaModel
hasAntennaAreaFactor_	lef/lefiLayer.hpp	/^  int hasAntennaAreaFactor_;$/;"	m	class:lefiLayer
hasAntennaAreaMinusDiff	lef/lefiLayer.cpp	/^lefiAntennaModel::hasAntennaAreaMinusDiff() const$/;"	f	class:lefiAntennaModel
hasAntennaAreaMinusDiff_	lef/lefiLayer.hpp	/^  int hasAntennaAreaMinusDiff_;            \/\/ 5.7$/;"	m	class:lefiAntennaModel
hasAntennaAreaRatio	lef/lefiLayer.cpp	/^lefiAntennaModel::hasAntennaAreaRatio() const$/;"	f	class:lefiAntennaModel
hasAntennaAreaRatio_	lef/lefiLayer.hpp	/^  int hasAntennaAreaRatio_;$/;"	m	class:lefiAntennaModel
hasAntennaAreaRatio_	lef/lefiLayer.hpp	/^  int hasAntennaAreaRatio_;$/;"	m	class:lefiLayer
hasAntennaArea_	lef/lefiLayer.hpp	/^  int hasAntennaArea_;$/;"	m	class:lefiLayer
hasAntennaCumAreaRatio	lef/lefiLayer.cpp	/^lefiAntennaModel::hasAntennaCumAreaRatio() const$/;"	f	class:lefiAntennaModel
hasAntennaCumAreaRatio_	lef/lefiLayer.hpp	/^  int hasAntennaCumAreaRatio_;$/;"	m	class:lefiAntennaModel
hasAntennaCumAreaRatio_	lef/lefiLayer.hpp	/^  int hasAntennaCumAreaRatio_;$/;"	m	class:lefiLayer
hasAntennaCumDiffAreaRatio	lef/lefiLayer.cpp	/^lefiAntennaModel::hasAntennaCumDiffAreaRatio() const$/;"	f	class:lefiAntennaModel
hasAntennaCumDiffAreaRatioPWL	lef/lefiLayer.cpp	/^lefiAntennaModel::hasAntennaCumDiffAreaRatioPWL() const$/;"	f	class:lefiAntennaModel
hasAntennaCumDiffAreaRatioPWL_	lef/lefiLayer.hpp	/^  int hasAntennaCumDiffAreaRatioPWL_;$/;"	m	class:lefiAntennaModel
hasAntennaCumDiffAreaRatioPWL_	lef/lefiLayer.hpp	/^  int hasAntennaCumDiffAreaRatioPWL_;$/;"	m	class:lefiLayer
hasAntennaCumDiffAreaRatio_	lef/lefiLayer.hpp	/^  int hasAntennaCumDiffAreaRatio_;$/;"	m	class:lefiAntennaModel
hasAntennaCumDiffAreaRatio_	lef/lefiLayer.hpp	/^  int hasAntennaCumDiffAreaRatio_;$/;"	m	class:lefiLayer
hasAntennaCumDiffSideAreaRatio	lef/lefiLayer.cpp	/^lefiAntennaModel::hasAntennaCumDiffSideAreaRatio() const$/;"	f	class:lefiAntennaModel
hasAntennaCumDiffSideAreaRatioPWL	lef/lefiLayer.cpp	/^lefiAntennaModel::hasAntennaCumDiffSideAreaRatioPWL() const$/;"	f	class:lefiAntennaModel
hasAntennaCumDiffSideAreaRatioPWL_	lef/lefiLayer.hpp	/^  int hasAntennaCumDiffSideAreaRatioPWL_;$/;"	m	class:lefiAntennaModel
hasAntennaCumDiffSideAreaRatioPWL_	lef/lefiLayer.hpp	/^  int hasAntennaCumDiffSideAreaRatioPWL_;$/;"	m	class:lefiLayer
hasAntennaCumDiffSideAreaRatio_	lef/lefiLayer.hpp	/^  int hasAntennaCumDiffSideAreaRatio_;$/;"	m	class:lefiAntennaModel
hasAntennaCumDiffSideAreaRatio_	lef/lefiLayer.hpp	/^  int hasAntennaCumDiffSideAreaRatio_;$/;"	m	class:lefiLayer
hasAntennaCumRoutingPlusCut	lef/lefiLayer.cpp	/^lefiAntennaModel::hasAntennaCumRoutingPlusCut() const$/;"	f	class:lefiAntennaModel
hasAntennaCumRoutingPlusCut_	lef/lefiLayer.hpp	/^  int hasAntennaCumRoutingPlusCut_;        \/\/ 5.7$/;"	m	class:lefiAntennaModel
hasAntennaCumSideAreaRatio	lef/lefiLayer.cpp	/^lefiAntennaModel::hasAntennaCumSideAreaRatio() const$/;"	f	class:lefiAntennaModel
hasAntennaCumSideAreaRatio_	lef/lefiLayer.hpp	/^  int hasAntennaCumSideAreaRatio_;$/;"	m	class:lefiAntennaModel
hasAntennaCumSideAreaRatio_	lef/lefiLayer.hpp	/^  int hasAntennaCumSideAreaRatio_;$/;"	m	class:lefiLayer
hasAntennaDiffArea	lef/lefiMacro.cpp	/^lefiPin::hasAntennaDiffArea() const$/;"	f	class:lefiPin
hasAntennaDiffAreaRatio	lef/lefiLayer.cpp	/^lefiAntennaModel::hasAntennaDiffAreaRatio() const$/;"	f	class:lefiAntennaModel
hasAntennaDiffAreaRatioPWL	lef/lefiLayer.cpp	/^lefiAntennaModel::hasAntennaDiffAreaRatioPWL() const$/;"	f	class:lefiAntennaModel
hasAntennaDiffAreaRatioPWL_	lef/lefiLayer.hpp	/^  int hasAntennaDiffAreaRatioPWL_;$/;"	m	class:lefiAntennaModel
hasAntennaDiffAreaRatioPWL_	lef/lefiLayer.hpp	/^  int hasAntennaDiffAreaRatioPWL_;$/;"	m	class:lefiLayer
hasAntennaDiffAreaRatio_	lef/lefiLayer.hpp	/^  int hasAntennaDiffAreaRatio_;$/;"	m	class:lefiAntennaModel
hasAntennaDiffAreaRatio_	lef/lefiLayer.hpp	/^  int hasAntennaDiffAreaRatio_;$/;"	m	class:lefiLayer
hasAntennaDiffSideAreaRatio	lef/lefiLayer.cpp	/^lefiAntennaModel::hasAntennaDiffSideAreaRatio() const$/;"	f	class:lefiAntennaModel
hasAntennaDiffSideAreaRatioPWL	lef/lefiLayer.cpp	/^lefiAntennaModel::hasAntennaDiffSideAreaRatioPWL() const$/;"	f	class:lefiAntennaModel
hasAntennaDiffSideAreaRatioPWL_	lef/lefiLayer.hpp	/^  int hasAntennaDiffSideAreaRatioPWL_;$/;"	m	class:lefiAntennaModel
hasAntennaDiffSideAreaRatioPWL_	lef/lefiLayer.hpp	/^  int hasAntennaDiffSideAreaRatioPWL_;$/;"	m	class:lefiLayer
hasAntennaDiffSideAreaRatio_	lef/lefiLayer.hpp	/^  int hasAntennaDiffSideAreaRatio_;$/;"	m	class:lefiAntennaModel
hasAntennaDiffSideAreaRatio_	lef/lefiLayer.hpp	/^  int hasAntennaDiffSideAreaRatio_;$/;"	m	class:lefiLayer
hasAntennaGateArea	lef/lefiMacro.cpp	/^lefiPinAntennaModel::hasAntennaGateArea() const$/;"	f	class:lefiPinAntennaModel
hasAntennaGatePlusDiff	lef/lefiLayer.cpp	/^lefiAntennaModel::hasAntennaGatePlusDiff() const$/;"	f	class:lefiAntennaModel
hasAntennaGatePlusDiff_	lef/lefiLayer.hpp	/^  int hasAntennaGatePlusDiff_;             \/\/ 5.7$/;"	m	class:lefiAntennaModel
hasAntennaLength	lef/lefiLayer.cpp	/^lefiLayer::hasAntennaLength() const$/;"	f	class:lefiLayer
hasAntennaLength_	lef/lefiLayer.hpp	/^  int hasAntennaLength_;$/;"	m	class:lefiLayer
hasAntennaMaxAreaCar	lef/lefiMacro.cpp	/^lefiPinAntennaModel::hasAntennaMaxAreaCar() const$/;"	f	class:lefiPinAntennaModel
hasAntennaMaxCutCar	lef/lefiMacro.cpp	/^lefiPinAntennaModel::hasAntennaMaxCutCar() const$/;"	f	class:lefiPinAntennaModel
hasAntennaMaxSideAreaCar	lef/lefiMacro.cpp	/^lefiPinAntennaModel::hasAntennaMaxSideAreaCar() const$/;"	f	class:lefiPinAntennaModel
hasAntennaMetalArea	lef/lefiMacro.cpp	/^lefiPin::hasAntennaMetalArea() const$/;"	f	class:lefiPin
hasAntennaMetalLength	lef/lefiMacro.cpp	/^lefiPin::hasAntennaMetalLength() const$/;"	f	class:lefiPin
hasAntennaModel	lef/lefiMacro.cpp	/^lefiPin::hasAntennaModel() const$/;"	f	class:lefiPin
hasAntennaPartialCutArea	lef/lefiMacro.cpp	/^lefiPin::hasAntennaPartialCutArea() const$/;"	f	class:lefiPin
hasAntennaPartialMetalArea	lef/lefiMacro.cpp	/^lefiPin::hasAntennaPartialMetalArea() const$/;"	f	class:lefiPin
hasAntennaPartialMetalSideArea	lef/lefiMacro.cpp	/^lefiPin::hasAntennaPartialMetalSideArea() const$/;"	f	class:lefiPin
hasAntennaSideAreaFactor	lef/lefiLayer.cpp	/^lefiAntennaModel::hasAntennaSideAreaFactor() const$/;"	f	class:lefiAntennaModel
hasAntennaSideAreaFactorDUO	lef/lefiLayer.cpp	/^lefiAntennaModel::hasAntennaSideAreaFactorDUO() const$/;"	f	class:lefiAntennaModel
hasAntennaSideAreaFactorDUO_	lef/lefiLayer.hpp	/^  int hasAntennaSideAreaFactorDUO_;$/;"	m	class:lefiAntennaModel
hasAntennaSideAreaFactorDUO_	lef/lefiLayer.hpp	/^  int hasAntennaSideAreaFactorDUO_;$/;"	m	class:lefiLayer
hasAntennaSideAreaFactor_	lef/lefiLayer.hpp	/^  int hasAntennaSideAreaFactor_;$/;"	m	class:lefiAntennaModel
hasAntennaSideAreaFactor_	lef/lefiLayer.hpp	/^  int hasAntennaSideAreaFactor_;$/;"	m	class:lefiLayer
hasAntennaSideAreaRatio	lef/lefiLayer.cpp	/^lefiAntennaModel::hasAntennaSideAreaRatio() const$/;"	f	class:lefiAntennaModel
hasAntennaSideAreaRatio_	lef/lefiLayer.hpp	/^  int hasAntennaSideAreaRatio_;$/;"	m	class:lefiAntennaModel
hasAntennaSideAreaRatio_	lef/lefiLayer.hpp	/^  int hasAntennaSideAreaRatio_;$/;"	m	class:lefiLayer
hasAntennaSize	lef/lefiMacro.cpp	/^lefiPin::hasAntennaSize() const$/;"	f	class:lefiPin
hasAntennasize_	lef/lefiMacro.hpp	/^  char hasAntennasize_;$/;"	m	class:lefiPin
hasArea	lef/lefiLayer.cpp	/^lefiLayer::hasArea() const$/;"	f	class:lefiLayer
hasArea_	lef/lefiLayer.hpp	/^  int hasArea_;$/;"	m	class:lefiLayer
hasArraySpacing	lef/lefiLayer.cpp	/^lefiLayer::hasArraySpacing() const$/;"	f	class:lefiLayer
hasArraySpacing_	lef/lefiLayer.hpp	/^  int hasArraySpacing_;               \/\/ 5.7$/;"	m	class:lefiLayer
hasBusBit	lef/lefrData.hpp	/^    int  hasBusBit; $/;"	m	class:lefrData
hasCapMultiplier	lef/lefiLayer.cpp	/^lefiLayer::hasCapMultiplier() const$/;"	f	class:lefiLayer
hasCapMultiplier_	lef/lefiLayer.hpp	/^  int hasCapMultiplier_;$/;"	m	class:lefiLayer
hasCapacitance	lef/lefiLayer.cpp	/^lefiLayer::hasCapacitance() const$/;"	f	class:lefiLayer
hasCapacitance	lef/lefiMacro.cpp	/^lefiPin::hasCapacitance() const$/;"	f	class:lefiPin
hasCapacitance	lef/lefiUnits.cpp	/^lefiUnits::hasCapacitance() const$/;"	f	class:lefiUnits
hasCapacitanceArray	lef/lefiLayer.cpp	/^lefiLayer::hasCapacitanceArray() const$/;"	f	class:lefiLayer
hasCapacitance_	lef/lefiLayer.hpp	/^  int hasCapacitance_;$/;"	m	class:lefiLayer
hasCapacitance_	lef/lefiMacro.hpp	/^  char hasCapacitance_;$/;"	m	class:lefiPin
hasCapacitance_	lef/lefiNonDefault.hpp	/^  char*   hasCapacitance_;$/;"	m	class:lefiNonDefault
hasCapacitance_	lef/lefiUnits.hpp	/^  int hasCapacitance_;$/;"	m	class:lefiUnits
hasClass	lef/lefiMacro.cpp	/^lefiMacro::hasClass() const$/;"	f	class:lefiMacro
hasClass	lef/lefiMisc.cpp	/^lefiSite::hasClass() const$/;"	f	class:lefiSite
hasClass_	lef/lefiMacro.hpp	/^  char hasClass_;$/;"	m	class:lefiMacro
hasClass_	lef/lefiMisc.hpp	/^  int    hasClass_;$/;"	m	class:lefiSite
hasClockType	lef/lefiMacro.cpp	/^lefiMacro::hasClockType() const$/;"	f	class:lefiMacro
hasClockType_	lef/lefiMacro.hpp	/^  char hasClockType_;$/;"	m	class:lefiMacro
hasCurrent	lef/lefiUnits.cpp	/^lefiUnits::hasCurrent() const$/;"	f	class:lefiUnits
hasCurrentDensityArray	lef/lefiLayer.cpp	/^lefiLayer::hasCurrentDensityArray() const$/;"	f	class:lefiLayer
hasCurrentDensityPoint	lef/lefiLayer.cpp	/^lefiLayer::hasCurrentDensityPoint() const$/;"	f	class:lefiLayer
hasCurrentDensityPoint_	lef/lefiLayer.hpp	/^  int hasCurrentDensityPoint_;$/;"	m	class:lefiLayer
hasCurrentSource	lef/lefiMacro.cpp	/^lefiPin::hasCurrentSource() const$/;"	f	class:lefiPin
hasCurrentSource_	lef/lefiMacro.hpp	/^  char hasCurrentSource_;$/;"	m	class:lefiPin
hasCurrent_	lef/lefiUnits.hpp	/^  int hasCurrent_;$/;"	m	class:lefiUnits
hasCutPattern	lef/lefiVia.cpp	/^lefiVia::hasCutPattern() const$/;"	f	class:lefiVia
hasData	lef/lefiMacro.cpp	/^lefiTiming::hasData()$/;"	f	class:lefiTiming
hasDatabase	lef/lefiUnits.cpp	/^lefiUnits::hasDatabase() const$/;"	f	class:lefiUnits
hasDatabase_	lef/lefiUnits.hpp	/^  int hasDatabase_;$/;"	m	class:lefiUnits
hasDccurrentDensity	lef/lefiLayer.cpp	/^lefiLayer::hasDccurrentDensity() const$/;"	f	class:lefiLayer
hasDefault	lef/lefiVia.cpp	/^lefiVia::hasDefault() const$/;"	f	class:lefiVia
hasDefault	lef/lefiViaRule.cpp	/^lefiViaRule::hasDefault() const$/;"	f	class:lefiViaRule
hasDefaultCap	lef/lefiArray.cpp	/^lefiArray::hasDefaultCap() const$/;"	f	class:lefiArray
hasDefault_	lef/lefiArray.hpp	/^  int hasDefault_;$/;"	m	class:lefiArray
hasDefault_	lef/lefiVia.hpp	/^  int hasDefault_;$/;"	m	class:lefiVia
hasDefault_	lef/lefiViaRule.hpp	/^  int hasDefault_;$/;"	m	class:lefiViaRule
hasDelay	lef/lefiMacro.cpp	/^lefiTiming::hasDelay()$/;"	f	class:lefiTiming
hasDelay_	lef/lefiMacro.hpp	/^  int hasDelay_;$/;"	m	class:lefiTiming
hasDensityCheckStep	lef/lefiLayer.cpp	/^lefiLayer::hasDensityCheckStep() const$/;"	f	class:lefiLayer
hasDensityCheckStep_	lef/lefiLayer.hpp	/^  int hasDensityCheckStep_;$/;"	m	class:lefiLayer
hasDensityCheckWindow	lef/lefiLayer.cpp	/^lefiLayer::hasDensityCheckWindow() const$/;"	f	class:lefiLayer
hasDensityCheckWindow_	lef/lefiLayer.hpp	/^  int hasDensityCheckWindow_;$/;"	m	class:lefiLayer
hasDiagMinEdgeLength	lef/lefiLayer.cpp	/^lefiLayer::hasDiagMinEdgeLength() const$/;"	f	class:lefiLayer
hasDiagPitch	lef/lefiLayer.cpp	/^lefiLayer::hasDiagPitch() const$/;"	f	class:lefiLayer
hasDiagPitch_	lef/lefiLayer.hpp	/^  int hasDiagPitch_;                  \/\/ 5.6$/;"	m	class:lefiLayer
hasDiagSpacing	lef/lefiLayer.cpp	/^lefiLayer::hasDiagSpacing() const$/;"	f	class:lefiLayer
hasDiagSpacing_	lef/lefiLayer.hpp	/^  int hasDiagSpacing_;                \/\/ 5.6$/;"	m	class:lefiLayer
hasDiagWidth	lef/lefiLayer.cpp	/^lefiLayer::hasDiagWidth() const$/;"	f	class:lefiLayer
hasDiagWidth_	lef/lefiLayer.hpp	/^  int hasDiagWidth_;                  \/\/ 5.6$/;"	m	class:lefiLayer
hasDiagWidth_	lef/lefiNonDefault.hpp	/^  char*   hasDiagWidth_;           \/\/ 5.6$/;"	m	class:lefiNonDefault
hasDirection	lef/lefiLayer.cpp	/^lefiLayer::hasDirection() const$/;"	f	class:lefiLayer
hasDirection	lef/lefiMacro.cpp	/^lefiPin::hasDirection() const$/;"	f	class:lefiPin
hasDirection	lef/lefiViaRule.cpp	/^lefiViaRuleLayer::hasDirection() const$/;"	f	class:lefiViaRuleLayer
hasDirection	lef/lefrData.hpp	/^    int  hasDirection; $/;"	m	class:lefrData
hasDirection_	lef/lefiLayer.hpp	/^  int hasDirection_;$/;"	m	class:lefiLayer
hasDirection_	lef/lefiMacro.hpp	/^  char hasDirection_;$/;"	m	class:lefiPin
hasDivChar	lef/lefrData.hpp	/^    int  hasDivChar; $/;"	m	class:lefrData
hasEEQ	lef/lefiMacro.cpp	/^lefiMacro::hasEEQ() const$/;"	f	class:lefiMacro
hasEEQ_	lef/lefiMacro.hpp	/^  char hasEEQ_;$/;"	m	class:lefiMacro
hasEdgeCap	lef/lefiLayer.cpp	/^lefiLayer::hasEdgeCap() const$/;"	f	class:lefiLayer
hasEdgeCap_	lef/lefiLayer.hpp	/^  int hasEdgeCap_;$/;"	m	class:lefiLayer
hasEdgeCap_	lef/lefiNonDefault.hpp	/^  char*   hasEdgeCap_;$/;"	m	class:lefiNonDefault
hasEnclosure	lef/lefiViaRule.cpp	/^lefiViaRuleLayer::hasEnclosure() const$/;"	f	class:lefiViaRuleLayer
hasEnclosureExceptExtraCut	lef/lefiLayer.cpp	/^lefiLayer::hasEnclosureExceptExtraCut(int index) const$/;"	f	class:lefiLayer
hasEnclosureMinLength	lef/lefiLayer.cpp	/^lefiLayer::hasEnclosureMinLength(int index) const$/;"	f	class:lefiLayer
hasEnclosureRule	lef/lefiLayer.cpp	/^lefiLayer::hasEnclosureRule(int index) const$/;"	f	class:lefiLayer
hasEnclosureWidth	lef/lefiLayer.cpp	/^lefiLayer::hasEnclosureWidth(int index) const$/;"	f	class:lefiLayer
hasFallAtt1	lef/lefiMacro.cpp	/^lefiTiming::hasFallAtt1()$/;"	f	class:lefiTiming
hasFallAtt1_	lef/lefiMacro.hpp	/^  int hasFallAtt1_;$/;"	m	class:lefiTiming
hasFallCS	lef/lefiMacro.cpp	/^lefiTiming::hasFallCS()$/;"	f	class:lefiTiming
hasFallCS_	lef/lefiMacro.hpp	/^  int hasFallCS_;$/;"	m	class:lefiTiming
hasFallIntrinsic	lef/lefiMacro.cpp	/^lefiTiming::hasFallIntrinsic()$/;"	f	class:lefiTiming
hasFallIntrinsic_	lef/lefiMacro.hpp	/^  int hasFallIntrinsic_;$/;"	m	class:lefiTiming
hasFallRS	lef/lefiMacro.cpp	/^lefiTiming::hasFallRS()$/;"	f	class:lefiTiming
hasFallRS_	lef/lefiMacro.hpp	/^  int hasFallRS_;$/;"	m	class:lefiTiming
hasFallSatcur	lef/lefiMacro.cpp	/^lefiPin::hasFallSatcur() const$/;"	f	class:lefiPin
hasFallSatcur_	lef/lefiMacro.hpp	/^  char hasFallSatcur_;$/;"	m	class:lefiPin
hasFallSlew	lef/lefiMacro.cpp	/^lefiTiming::hasFallSlew()$/;"	f	class:lefiTiming
hasFallSlew2	lef/lefiMacro.cpp	/^lefiTiming::hasFallSlew2()$/;"	f	class:lefiTiming
hasFallSlew2_	lef/lefiMacro.hpp	/^  int hasFallSlew2_;$/;"	m	class:lefiTiming
hasFallSlewLimit	lef/lefiMacro.cpp	/^lefiPin::hasFallSlewLimit() const$/;"	f	class:lefiPin
hasFallSlewLimit_	lef/lefiMacro.hpp	/^  char hasFallSlewLimit_;$/;"	m	class:lefiPin
hasFallSlew_	lef/lefiMacro.hpp	/^  int hasFallSlew_;$/;"	m	class:lefiTiming
hasFallThresh	lef/lefiMacro.cpp	/^lefiPin::hasFallThresh() const$/;"	f	class:lefiPin
hasFallThresh_	lef/lefiMacro.hpp	/^  char hasFallThresh_;$/;"	m	class:lefiPin
hasFallTo	lef/lefiMacro.cpp	/^lefiTiming::hasFallTo()$/;"	f	class:lefiTiming
hasFallTo_	lef/lefiMacro.hpp	/^  int hasFallTo_;$/;"	m	class:lefiTiming
hasFallVoltage	lef/lefiMacro.cpp	/^lefiPin::hasFallVoltage() const$/;"	f	class:lefiPin
hasFallVoltage_	lef/lefiMacro.hpp	/^  char hasFallVoltage_;$/;"	m	class:lefiPin
hasFatalError	lef/lefrData.hpp	/^    int  hasFatalError; \/\/ don't report errors after the file end.$/;"	m	class:lefrData
hasFillActiveSpacing	lef/lefiLayer.cpp	/^lefiLayer::hasFillActiveSpacing() const$/;"	f	class:lefiLayer
hasFillActiveSpacing_	lef/lefiLayer.hpp	/^  int hasFillActiveSpacing_;$/;"	m	class:lefiLayer
hasFixedMask	lef/lefrData.hpp	/^    int  hasFixedMask; $/;"	m	class:lefrData
hasForeign	lef/lefiMacro.cpp	/^lefiMacro::hasForeign() const$/;"	f	class:lefiMacro
hasForeign	lef/lefiMacro.cpp	/^lefiPin::hasForeign() const$/;"	f	class:lefiPin
hasForeign	lef/lefiVia.cpp	/^lefiVia::hasForeign() const$/;"	f	class:lefiVia
hasForeignOrient	lef/lefiMacro.cpp	/^lefiMacro::hasForeignOrient(int index) const$/;"	f	class:lefiMacro
hasForeignOrient	lef/lefiMacro.cpp	/^lefiPin::hasForeignOrient(int index) const$/;"	f	class:lefiPin
hasForeignOrient	lef/lefiVia.cpp	/^lefiVia::hasForeignOrient() const$/;"	f	class:lefiVia
hasForeignOrient_	lef/lefiMacro.hpp	/^  int*    hasForeignOrient_;$/;"	m	class:lefiPin
hasForeignOrigin	lef/lefiMacro.cpp	/^lefiMacro::hasForeignOrigin(int index) const$/;"	f	class:lefiMacro
hasForeignOrigin_	lef/lefiMacro.hpp	/^  int*  hasForeignOrigin_;$/;"	m	class:lefiMacro
hasForeignPnt	lef/lefiVia.cpp	/^lefiVia::hasForeignPnt() const$/;"	f	class:lefiVia
hasForeignPnt_	lef/lefiVia.hpp	/^  int hasForeignPnt_;$/;"	m	class:lefiVia
hasForeignPoint	lef/lefiMacro.cpp	/^lefiMacro::hasForeignPoint(int index) const$/;"	f	class:lefiMacro
hasForeignPoint	lef/lefiMacro.cpp	/^lefiPin::hasForeignPoint(int index) const$/;"	f	class:lefiPin
hasForeignPoint_	lef/lefiMacro.hpp	/^  int*    hasForeignPoint_;$/;"	m	class:lefiPin
hasForeignPoint_	lef/lefiMacro.hpp	/^  int*  hasForeignPoint_;$/;"	m	class:lefiMacro
hasFrequency	lef/lefiUnits.cpp	/^lefiUnits::hasFrequency() const$/;"	f	class:lefiUnits
hasFrequency_	lef/lefiUnits.hpp	/^  int hasFrequency_;$/;"	m	class:lefiUnits
hasGenerate	lef/lefiMacro.cpp	/^lefiMacro::hasGenerate() const$/;"	f	class:lefiMacro
hasGenerate	lef/lefiViaRule.cpp	/^lefiViaRule::hasGenerate() const$/;"	f	class:lefiViaRule
hasGenerate_	lef/lefiMacro.hpp	/^  char hasGenerate_;$/;"	m	class:lefiMacro
hasGenerate_	lef/lefiViaRule.hpp	/^  int hasGenerate_;$/;"	m	class:lefiViaRule
hasGenerated	lef/lefiVia.cpp	/^lefiVia::hasGenerated() const$/;"	f	class:lefiVia
hasGenerated_	lef/lefiVia.hpp	/^  int hasGenerated_;$/;"	m	class:lefiVia
hasGenerator	lef/lefiMacro.cpp	/^lefiMacro::hasGenerator() const$/;"	f	class:lefiMacro
hasGenerator_	lef/lefiMacro.hpp	/^  char hasGenerator_;$/;"	m	class:lefiMacro
hasGeoLayer	lef/lefrData.hpp	/^    int  hasGeoLayer; $/;"	m	class:lefrData
hasGroundSensitivity	lef/lefiMacro.cpp	/^lefiPin::hasGroundSensitivity() const$/;"	f	class:lefiPin
hasHardspacing	lef/lefiNonDefault.cpp	/^lefiNonDefault::hasHardspacing() const$/;"	f	class:lefiNonDefault
hasHeight	lef/lefiLayer.cpp	/^lefiLayer::hasHeight() const$/;"	f	class:lefiLayer
hasHeight_	lef/lefiLayer.hpp	/^  int hasHeight_;$/;"	m	class:lefiLayer
hasInMargin	lef/lefiMacro.cpp	/^lefiPin::hasInMargin() const$/;"	f	class:lefiPin
hasInMargin_	lef/lefiMacro.hpp	/^  char hasInMargin_;$/;"	m	class:lefiPin
hasInfluence	lef/lefrData.hpp	/^    int  hasInfluence; $/;"	m	class:lefrData
hasInfluence_	lef/lefiLayer.hpp	/^  int hasInfluence_;$/;"	m	class:lefiSpacingTable
hasLEQ	lef/lefiMacro.cpp	/^lefiMacro::hasLEQ() const$/;"	f	class:lefiMacro
hasLEQ	lef/lefiMacro.cpp	/^lefiPin::hasLEQ() const$/;"	f	class:lefiPin
hasLEQ_	lef/lefiMacro.hpp	/^  char hasLEQ_;$/;"	m	class:lefiMacro
hasLEQ_	lef/lefiMacro.hpp	/^  char hasLEQ_;$/;"	m	class:lefiPin
hasLayerCapacitance	lef/lefiNonDefault.cpp	/^lefiNonDefault::hasLayerCapacitance(int index) const$/;"	f	class:lefiNonDefault
hasLayerDiagWidth	lef/lefiNonDefault.cpp	/^lefiNonDefault::hasLayerDiagWidth(int index) const$/;"	f	class:lefiNonDefault
hasLayerEdgeCap	lef/lefiNonDefault.cpp	/^lefiNonDefault::hasLayerEdgeCap(int index) const$/;"	f	class:lefiNonDefault
hasLayerExceptPgNet	lef/lefiMisc.cpp	/^lefiGeometries::hasLayerExceptPgNet(int index) const$/;"	f	class:lefiGeometries
hasLayerMincut	lef/lefrData.hpp	/^    int  hasLayerMincut; $/;"	m	class:lefrData
hasLayerResistance	lef/lefiNonDefault.cpp	/^lefiNonDefault::hasLayerResistance(int index) const$/;"	f	class:lefiNonDefault
hasLayerSpacing	lef/lefiNonDefault.cpp	/^lefiNonDefault::hasLayerSpacing(int index) const$/;"	f	class:lefiNonDefault
hasLayerType	lef/lefiLayer.cpp	/^lefiLayer::hasLayerType() const$/;"	f	class:lefiLayer
hasLayerWidth	lef/lefiNonDefault.cpp	/^lefiNonDefault::hasLayerWidth(int index) const$/;"	f	class:lefiNonDefault
hasLayerWireExtension	lef/lefiNonDefault.cpp	/^lefiNonDefault::hasLayerWireExtension(int index) const$/;"	f	class:lefiNonDefault
hasLeakage	lef/lefiMacro.cpp	/^lefiPin::hasLeakage() const$/;"	f	class:lefiPin
hasLeakage_	lef/lefiMacro.hpp	/^  char hasLeakage_;$/;"	m	class:lefiPin
hasLongArray	lef/lefiLayer.cpp	/^lefiLayer::hasLongArray() const$/;"	f	class:lefiLayer
hasLongArray_	lef/lefiLayer.hpp	/^  int     hasLongArray_;$/;"	m	class:lefiLayer
hasManufactur	lef/lefrData.hpp	/^    int  hasManufactur; $/;"	m	class:lefrData
hasMask	lef/lefiLayer.cpp	/^lefiLayer::hasMask() const$/;"	f	class:lefiLayer
hasMask	lef/lefrData.hpp	/^    int  hasMask; $/;"	m	class:lefrData
hasMask_	lef/lefiLayer.hpp	/^  int hasMask_;                       \/\/ 5.8 native$/;"	m	class:lefiLayer
hasMaxAdjacentSlotSpacing	lef/lefiLayer.cpp	/^lefiLayer::hasMaxAdjacentSlotSpacing() const$/;"	f	class:lefiLayer
hasMaxAdjacentSlotSpacing_	lef/lefiLayer.hpp	/^  int hasMaxAdjacentSlotSpacing_;$/;"	m	class:lefiLayer
hasMaxCoaxialSlotSpacing	lef/lefiLayer.cpp	/^lefiLayer::hasMaxCoaxialSlotSpacing() const$/;"	f	class:lefiLayer
hasMaxCoaxialSlotSpacing_	lef/lefiLayer.hpp	/^  int hasMaxCoaxialSlotSpacing_;$/;"	m	class:lefiLayer
hasMaxEdgeSlotSpacing	lef/lefiLayer.cpp	/^lefiLayer::hasMaxEdgeSlotSpacing() const$/;"	f	class:lefiLayer
hasMaxEdgeSlotSpacing_	lef/lefiLayer.hpp	/^  int hasMaxEdgeSlotSpacing_;$/;"	m	class:lefiLayer
hasMaxFloatingArea	lef/lefiLayer.cpp	/^lefiLayer::hasMaxFloatingArea() const$/;"	f	class:lefiLayer
hasMaxStackViaRange	lef/lefiMisc.cpp	/^lefiMaxStackVia::hasMaxStackViaRange() const$/;"	f	class:lefiMaxStackVia
hasMaxdelay	lef/lefiMacro.cpp	/^lefiPin::hasMaxdelay() const$/;"	f	class:lefiPin
hasMaxdelay_	lef/lefiMacro.hpp	/^  char hasMaxdelay_;$/;"	m	class:lefiPin
hasMaximumDensity	lef/lefiLayer.cpp	/^lefiLayer::hasMaximumDensity() const$/;"	f	class:lefiLayer
hasMaximumDensity_	lef/lefiLayer.hpp	/^  int hasMaximumDensity_;$/;"	m	class:lefiLayer
hasMaxload	lef/lefiMacro.cpp	/^lefiPin::hasMaxload() const$/;"	f	class:lefiPin
hasMaxload_	lef/lefiMacro.hpp	/^  char hasMaxload_;$/;"	m	class:lefiPin
hasMaxwidth	lef/lefiLayer.cpp	/^lefiLayer::hasMaxwidth() const$/;"	f	class:lefiLayer
hasMetalOverhang	lef/lefiViaRule.cpp	/^lefiViaRuleLayer::hasMetalOverhang() const$/;"	f	class:lefiViaRuleLayer
hasMetalOverhang_	lef/lefiViaRule.hpp	/^  int hasMetalOverhang_;$/;"	m	class:lefiViaRuleLayer
hasMinenclosedareaWidth	lef/lefiLayer.cpp	/^lefiLayer::hasMinenclosedareaWidth(int index) const$/;"	f	class:lefiLayer
hasMinfeature	lef/lefrData.hpp	/^    int  hasMinfeature; $/;"	m	class:lefrData
hasMinimumDensity	lef/lefiLayer.cpp	/^lefiLayer::hasMinimumDensity() const$/;"	f	class:lefiLayer
hasMinimumDensity_	lef/lefiLayer.hpp	/^  int hasMinimumDensity_;$/;"	m	class:lefiLayer
hasMinimumcutConnection	lef/lefiLayer.cpp	/^lefiLayer::hasMinimumcutConnection(int index) const$/;"	f	class:lefiLayer
hasMinimumcutConnection_	lef/lefiLayer.hpp	/^  int*    hasMinimumcutConnection_;$/;"	m	class:lefiLayer
hasMinimumcutNumCuts	lef/lefiLayer.cpp	/^lefiLayer::hasMinimumcutNumCuts(int index) const$/;"	f	class:lefiLayer
hasMinimumcutNumCuts_	lef/lefiLayer.hpp	/^  int*    hasMinimumcutNumCuts_;$/;"	m	class:lefiLayer
hasMinimumcutWithin	lef/lefiLayer.cpp	/^lefiLayer::hasMinimumcutWithin(int index) const$/;"	f	class:lefiLayer
hasMinimumcutWithin_	lef/lefiLayer.hpp	/^  int*    hasMinimumcutWithin_;              \/\/ 5.7$/;"	m	class:lefiLayer
hasMinstep	lef/lefiLayer.cpp	/^lefiLayer::hasMinstep() const$/;"	f	class:lefiLayer
hasMinstepLengthsum	lef/lefiLayer.cpp	/^lefiLayer::hasMinstepLengthsum(int index) const$/;"	f	class:lefiLayer
hasMinstepMaxedges	lef/lefiLayer.cpp	/^lefiLayer::hasMinstepMaxedges(int index) const$/;"	f	class:lefiLayer
hasMinstepMinAdjLength	lef/lefiLayer.cpp	/^lefiLayer::hasMinstepMinAdjLength(int index) const$/;"	f	class:lefiLayer
hasMinstepMinBetLength	lef/lefiLayer.cpp	/^lefiLayer::hasMinstepMinBetLength(int index) const$/;"	f	class:lefiLayer
hasMinstepType	lef/lefiLayer.cpp	/^lefiLayer::hasMinstepType(int index) const$/;"	f	class:lefiLayer
hasMinstepXSameCorners	lef/lefiLayer.cpp	/^lefiLayer::hasMinstepXSameCorners(int index) const$/;"	f	class:lefiLayer
hasMinwidth	lef/lefiLayer.cpp	/^lefiLayer::hasMinwidth() const$/;"	f	class:lefiLayer
hasMustjoin	lef/lefiMacro.cpp	/^lefiPin::hasMustjoin() const$/;"	f	class:lefiPin
hasMustjoin_	lef/lefiMacro.hpp	/^  char hasMustjoin_;$/;"	m	class:lefiPin
hasNameCase	lef/lefrData.hpp	/^    int  hasNameCase; $/;"	m	class:lefrData
hasNameMapString	lef/lefiProp.cpp	/^lefiProp::hasNameMapString() const$/;"	f	class:lefiProp
hasNameMapString_	lef/lefiProp.hpp	/^  char hasNameMapString_;$/;"	m	class:lefiProp
hasNetExpr	lef/lefiMacro.cpp	/^lefiPin::hasNetExpr() const$/;"	f	class:lefiPin
hasNumber	lef/lefiProp.cpp	/^lefiProp::hasNumber() const$/;"	f	class:lefiProp
hasNumber_	lef/lefiProp.hpp	/^  char hasNumber_;      \/\/ either 0:NO or 1:YES.$/;"	m	class:lefiProp
hasOffset	lef/lefiLayer.cpp	/^lefiLayer::hasOffset() const$/;"	f	class:lefiLayer
hasOffset	lef/lefiVia.cpp	/^lefiVia::hasOffset() const$/;"	f	class:lefiVia
hasOffset_	lef/lefiLayer.hpp	/^  int hasOffset_;$/;"	m	class:lefiLayer
hasOneEntry	lef/lefiLayer.cpp	/^lefiLayerDensity::hasOneEntry() const$/;"	f	class:lefiLayerDensity
hasOpenedLogFile	lef/lefrData.hpp	/^    int  hasOpenedLogFile; $/;"	m	class:lefrData
hasOrigin	lef/lefiMacro.cpp	/^lefiMacro::hasOrigin() const$/;"	f	class:lefiMacro
hasOrigin	lef/lefiVia.cpp	/^lefiVia::hasOrigin() const$/;"	f	class:lefiVia
hasOrigin_	lef/lefiMacro.hpp	/^  char hasOrigin_;$/;"	m	class:lefiMacro
hasOutMargin	lef/lefiMacro.cpp	/^lefiPin::hasOutMargin() const$/;"	f	class:lefiPin
hasOutMargin_	lef/lefiMacro.hpp	/^  char hasOutMargin_;$/;"	m	class:lefiPin
hasOutResistance	lef/lefiMacro.cpp	/^lefiPin::hasOutResistance() const$/;"	f	class:lefiPin
hasOutResistance_	lef/lefiMacro.hpp	/^  char hasOutResistance_;$/;"	m	class:lefiPin
hasOverhang	lef/lefiViaRule.cpp	/^lefiViaRuleLayer::hasOverhang() const$/;"	f	class:lefiViaRuleLayer
hasOverhang_	lef/lefiViaRule.hpp	/^  int hasOverhang_;$/;"	m	class:lefiViaRuleLayer
hasPRL_	lef/lefiLayer.hpp	/^  int*    hasPRL_;$/;"	m	class:lefiTwoWidths
hasPRP	lef/lefrData.hpp	/^    int  hasPRP; $/;"	m	class:lefrData
hasParallel	lef/lefrData.hpp	/^    int  hasParallel; $/;"	m	class:lefrData
hasPitch	lef/lefiLayer.cpp	/^lefiLayer::hasPitch() const$/;"	f	class:lefiLayer
hasPitch	lef/lefrData.hpp	/^    int  hasPitch; $/;"	m	class:lefrData
hasPitch_	lef/lefiLayer.hpp	/^  int hasPitch_;$/;"	m	class:lefiLayer
hasPower	lef/lefiMacro.cpp	/^lefiMacro::hasPower() const$/;"	f	class:lefiMacro
hasPower	lef/lefiMacro.cpp	/^lefiPin::hasPower() const$/;"	f	class:lefiPin
hasPower	lef/lefiUnits.cpp	/^lefiUnits::hasPower() const$/;"	f	class:lefiUnits
hasPower_	lef/lefiMacro.hpp	/^  char hasPower_;$/;"	m	class:lefiMacro
hasPower_	lef/lefiMacro.hpp	/^  char hasPower_;$/;"	m	class:lefiPin
hasPower_	lef/lefiUnits.hpp	/^  int hasPower_;$/;"	m	class:lefiUnits
hasPreferEnclosureRule	lef/lefiLayer.cpp	/^lefiLayer::hasPreferEnclosureRule(int index) const$/;"	f	class:lefiLayer
hasPreferEnclosureWidth	lef/lefiLayer.cpp	/^lefiLayer::hasPreferEnclosureWidth(int index) const$/;"	f	class:lefiLayer
hasProperties	lef/lefiVia.cpp	/^lefiVia::hasProperties() const$/;"	f	class:lefiVia
hasProtrusion	lef/lefiLayer.cpp	/^lefiLayer::hasProtrusion() const$/;"	f	class:lefiLayer
hasPulldownres	lef/lefiMacro.cpp	/^lefiPin::hasPulldownres() const$/;"	f	class:lefiPin
hasPulldownres_	lef/lefiMacro.hpp	/^  char hasPulldownres_;$/;"	m	class:lefiPin
hasRange	lef/lefiProp.cpp	/^lefiProp::hasRange() const$/;"	f	class:lefiProp
hasRange_	lef/lefiMisc.hpp	/^  int   hasRange_;$/;"	m	class:lefiMaxStackVia
hasRange_	lef/lefiProp.hpp	/^  char hasRange_;       \/\/ either 0:NO or 1:YES.$/;"	m	class:lefiProp
hasRect	lef/lefiViaRule.cpp	/^lefiViaRuleLayer::hasRect() const$/;"	f	class:lefiViaRuleLayer
hasRect_	lef/lefiViaRule.hpp	/^  int hasRect_;$/;"	m	class:lefiViaRuleLayer
hasResistance	lef/lefiLayer.cpp	/^lefiLayer::hasResistance() const$/;"	f	class:lefiLayer
hasResistance	lef/lefiMacro.cpp	/^lefiPin::hasResistance() const$/;"	f	class:lefiPin
hasResistance	lef/lefiUnits.cpp	/^lefiUnits::hasResistance() const$/;"	f	class:lefiUnits
hasResistance	lef/lefiVia.cpp	/^lefiVia::hasResistance() const$/;"	f	class:lefiVia
hasResistance	lef/lefiViaRule.cpp	/^lefiViaRuleLayer::hasResistance() const$/;"	f	class:lefiViaRuleLayer
hasResistanceArray	lef/lefiLayer.cpp	/^lefiLayer::hasResistanceArray() const$/;"	f	class:lefiLayer
hasResistancePerCut	lef/lefiLayer.cpp	/^lefiLayer::hasResistancePerCut() const$/;"	f	class:lefiLayer
hasResistance_	lef/lefiLayer.hpp	/^  int hasResistance_;$/;"	m	class:lefiLayer
hasResistance_	lef/lefiMacro.hpp	/^  char hasResistance_;$/;"	m	class:lefiPin
hasResistance_	lef/lefiNonDefault.hpp	/^  char*   hasResistance_;$/;"	m	class:lefiNonDefault
hasResistance_	lef/lefiUnits.hpp	/^  int hasResistance_;$/;"	m	class:lefiUnits
hasResistance_	lef/lefiVia.hpp	/^  int hasResistance_;$/;"	m	class:lefiVia
hasResistance_	lef/lefiViaRule.hpp	/^  int hasResistance_;$/;"	m	class:lefiViaRuleLayer
hasReturn	lef/lefiMacro.cpp	/^lefiPinAntennaModel::hasReturn() const$/;"	f	class:lefiPinAntennaModel
hasReturn_	lef/lefiMacro.hpp	/^  int   hasReturn_;$/;"	m	class:lefiPinAntennaModel
hasRiseAtt1	lef/lefiMacro.cpp	/^lefiTiming::hasRiseAtt1()$/;"	f	class:lefiTiming
hasRiseAtt1_	lef/lefiMacro.hpp	/^  int hasRiseAtt1_;$/;"	m	class:lefiTiming
hasRiseCS	lef/lefiMacro.cpp	/^lefiTiming::hasRiseCS()$/;"	f	class:lefiTiming
hasRiseCS_	lef/lefiMacro.hpp	/^  int hasRiseCS_;$/;"	m	class:lefiTiming
hasRiseIntrinsic	lef/lefiMacro.cpp	/^lefiTiming::hasRiseIntrinsic()$/;"	f	class:lefiTiming
hasRiseIntrinsic_	lef/lefiMacro.hpp	/^  int hasRiseIntrinsic_;$/;"	m	class:lefiTiming
hasRiseRS	lef/lefiMacro.cpp	/^lefiTiming::hasRiseRS()$/;"	f	class:lefiTiming
hasRiseRS_	lef/lefiMacro.hpp	/^  int hasRiseRS_;$/;"	m	class:lefiTiming
hasRiseSatcur	lef/lefiMacro.cpp	/^lefiPin::hasRiseSatcur() const$/;"	f	class:lefiPin
hasRiseSatcur_	lef/lefiMacro.hpp	/^  char hasRiseSatcur_;$/;"	m	class:lefiPin
hasRiseSlew	lef/lefiMacro.cpp	/^lefiTiming::hasRiseSlew()$/;"	f	class:lefiTiming
hasRiseSlew2	lef/lefiMacro.cpp	/^lefiTiming::hasRiseSlew2()$/;"	f	class:lefiTiming
hasRiseSlew2_	lef/lefiMacro.hpp	/^  int hasRiseSlew2_;$/;"	m	class:lefiTiming
hasRiseSlewLimit	lef/lefiMacro.cpp	/^lefiPin::hasRiseSlewLimit() const$/;"	f	class:lefiPin
hasRiseSlewLimit_	lef/lefiMacro.hpp	/^  char hasRiseSlewLimit_;$/;"	m	class:lefiPin
hasRiseSlew_	lef/lefiMacro.hpp	/^  int hasRiseSlew_;$/;"	m	class:lefiTiming
hasRiseThresh	lef/lefiMacro.cpp	/^lefiPin::hasRiseThresh() const$/;"	f	class:lefiPin
hasRiseThresh_	lef/lefiMacro.hpp	/^  char hasRiseThresh_;$/;"	m	class:lefiPin
hasRiseTo	lef/lefiMacro.cpp	/^lefiTiming::hasRiseTo()$/;"	f	class:lefiTiming
hasRiseTo_	lef/lefiMacro.hpp	/^  int hasRiseTo_;$/;"	m	class:lefiTiming
hasRiseVoltage	lef/lefiMacro.cpp	/^lefiPin::hasRiseVoltage() const$/;"	f	class:lefiPin
hasRiseVoltage_	lef/lefiMacro.hpp	/^  char hasRiseVoltage_;$/;"	m	class:lefiPin
hasRowCol	lef/lefiVia.cpp	/^lefiVia::hasRowCol() const$/;"	f	class:lefiVia
hasRowPattern	lef/lefiMisc.cpp	/^lefiSite::hasRowPattern() const$/;"	f	class:lefiSite
hasSDFcond	lef/lefiMacro.cpp	/^lefiTiming::hasSDFcond()$/;"	f	class:lefiTiming
hasSDFcondEnd	lef/lefiMacro.cpp	/^lefiTiming::hasSDFcondEnd()$/;"	f	class:lefiTiming
hasSDFcondEnd_	lef/lefiMacro.hpp	/^  int hasSDFcondEnd_;$/;"	m	class:lefiTiming
hasSDFcondStart	lef/lefiMacro.cpp	/^lefiTiming::hasSDFcondStart()$/;"	f	class:lefiTiming
hasSDFcondStart_	lef/lefiMacro.hpp	/^  int hasSDFcondStart_;$/;"	m	class:lefiTiming
hasSDFcond_	lef/lefiMacro.hpp	/^  int hasSDFcond_;$/;"	m	class:lefiTiming
hasSDFonePinTrigger	lef/lefiMacro.cpp	/^lefiTiming::hasSDFonePinTrigger()$/;"	f	class:lefiTiming
hasSDFonePinTrigger_	lef/lefiMacro.hpp	/^  int hasSDFonePinTrigger_;$/;"	m	class:lefiTiming
hasSDFtwoPinTrigger	lef/lefiMacro.cpp	/^lefiTiming::hasSDFtwoPinTrigger()$/;"	f	class:lefiTiming
hasSDFtwoPinTrigger_	lef/lefiMacro.hpp	/^  int hasSDFtwoPinTrigger_;$/;"	m	class:lefiTiming
hasSamenet	lef/lefrData.hpp	/^    int  hasSamenet; $/;"	m	class:lefrData
hasShape	lef/lefiMacro.cpp	/^lefiPin::hasShape() const$/;"	f	class:lefiPin
hasShape_	lef/lefiMacro.hpp	/^  char hasShape_;$/;"	m	class:lefiPin
hasShrinkage	lef/lefiLayer.cpp	/^lefiLayer::hasShrinkage() const$/;"	f	class:lefiLayer
hasShrinkage_	lef/lefiLayer.hpp	/^  int hasShrinkage_;$/;"	m	class:lefiLayer
hasSite	lef/lefrData.hpp	/^    int  hasSite; $/;"	m	class:lefrData
hasSiteClass	lef/lefrData.hpp	/^    int  hasSiteClass; $/;"	m	class:lefrData
hasSiteName	lef/lefiMacro.cpp	/^lefiMacro::hasSiteName() const$/;"	f	class:lefiMacro
hasSiteName_	lef/lefiMacro.hpp	/^  char hasSiteName_;$/;"	m	class:lefiMacro
hasSitePattern	lef/lefiMacro.cpp	/^lefiMacro::hasSitePattern() const$/;"	f	class:lefiMacro
hasSiteSize	lef/lefrData.hpp	/^    int  hasSiteSize; $/;"	m	class:lefrData
hasSize	lef/lefiMacro.cpp	/^lefiMacro::hasSize() const$/;"	f	class:lefiMacro
hasSize	lef/lefiMisc.cpp	/^lefiSite::hasSize() const$/;"	f	class:lefiSite
hasSize_	lef/lefiMacro.hpp	/^  char hasSize_;$/;"	m	class:lefiMacro
hasSize_	lef/lefiMisc.hpp	/^  int    hasSize_;$/;"	m	class:lefiSite
hasSlotLength	lef/lefiLayer.cpp	/^lefiLayer::hasSlotLength() const$/;"	f	class:lefiLayer
hasSlotLength_	lef/lefiLayer.hpp	/^  int hasSlotLength_;$/;"	m	class:lefiLayer
hasSlotWidth	lef/lefiLayer.cpp	/^lefiLayer::hasSlotWidth() const$/;"	f	class:lefiLayer
hasSlotWidth_	lef/lefiLayer.hpp	/^  int hasSlotWidth_;$/;"	m	class:lefiLayer
hasSlotWireLength	lef/lefiLayer.cpp	/^lefiLayer::hasSlotWireLength() const$/;"	f	class:lefiLayer
hasSlotWireLength_	lef/lefiLayer.hpp	/^  int hasSlotWireLength_;$/;"	m	class:lefiLayer
hasSlotWireWidth	lef/lefiLayer.cpp	/^lefiLayer::hasSlotWireWidth() const$/;"	f	class:lefiLayer
hasSlotWireWidth_	lef/lefiLayer.hpp	/^  int hasSlotWireWidth_;$/;"	m	class:lefiLayer
hasSource	lef/lefiMacro.cpp	/^lefiMacro::hasSource() const$/;"	f	class:lefiMacro
hasSource_	lef/lefiMacro.hpp	/^  char hasSource_;$/;"	m	class:lefiMacro
hasSpCenter	lef/lefrData.hpp	/^    int  hasSpCenter; $/;"	m	class:lefrData
hasSpLayer	lef/lefrData.hpp	/^    int  hasSpLayer; $/;"	m	class:lefrData
hasSpParallel	lef/lefrData.hpp	/^    int  hasSpParallel; $/;"	m	class:lefrData
hasSpSamenet	lef/lefrData.hpp	/^    int  hasSpSamenet; $/;"	m	class:lefrData
hasSpacing	lef/lefiViaRule.cpp	/^lefiViaRuleLayer::hasSpacing() const$/;"	f	class:lefiViaRuleLayer
hasSpacingAdjacent	lef/lefiLayer.cpp	/^lefiLayer::hasSpacingAdjacent(int index) const$/;"	f	class:lefiLayer
hasSpacingAdjacentExcept	lef/lefiLayer.cpp	/^lefiLayer::hasSpacingAdjacentExcept(int index) const$/;"	f	class:lefiLayer
hasSpacingAdjacentExcept_	lef/lefiLayer.hpp	/^  int* hasSpacingAdjacentExcept_;     \/\/ 5.7$/;"	m	class:lefiLayer
hasSpacingAdjacent_	lef/lefiLayer.hpp	/^  int* hasSpacingAdjacent_;           \/\/ 5.5$/;"	m	class:lefiLayer
hasSpacingArea	lef/lefiLayer.cpp	/^lefiLayer::hasSpacingArea(int index) const$/;"	f	class:lefiLayer
hasSpacingCenterToCenter	lef/lefiLayer.cpp	/^lefiLayer::hasSpacingCenterToCenter(int index) const$/;"	f	class:lefiLayer
hasSpacingCenterToCenter_	lef/lefiLayer.hpp	/^  int* hasSpacingCenterToCenter_;     \/\/ 5.6$/;"	m	class:lefiLayer
hasSpacingCutArea_	lef/lefiLayer.hpp	/^  int* hasSpacingCutArea_;            \/\/ 5.7$/;"	m	class:lefiLayer
hasSpacingEndOfLine	lef/lefiLayer.cpp	/^lefiLayer::hasSpacingEndOfLine(int index) const$/;"	f	class:lefiLayer
hasSpacingEndOfLine_	lef/lefiLayer.hpp	/^  int* hasSpacingEndOfLine_;          \/\/ 5.7$/;"	m	class:lefiLayer
hasSpacingEndOfNotchWidth	lef/lefiLayer.cpp	/^lefiLayer::hasSpacingEndOfNotchWidth(int index) const$/;"	f	class:lefiLayer
hasSpacingLayerStack	lef/lefiLayer.cpp	/^lefiLayer::hasSpacingLayerStack(int index) const$/;"	f	class:lefiLayer
hasSpacingLayerStack_	lef/lefiLayer.hpp	/^  int* hasSpacingLayerStack_;         \/\/ 5.7$/;"	m	class:lefiLayer
hasSpacingLengthThreshold	lef/lefiLayer.cpp	/^lefiLayer::hasSpacingLengthThreshold(int index) const$/;"	f	class:lefiLayer
hasSpacingLengthThresholdRange	lef/lefiLayer.cpp	/^lefiLayer::hasSpacingLengthThresholdRange(int index) const$/;"	f	class:lefiLayer
hasSpacingLengthThreshold_	lef/lefiLayer.hpp	/^  int* hasSpacingLengthThreshold_;    \/\/ pcr 409334$/;"	m	class:lefiLayer
hasSpacingName	lef/lefiLayer.cpp	/^lefiLayer::hasSpacingName(int index) const$/;"	f	class:lefiLayer
hasSpacingName_	lef/lefiLayer.hpp	/^  int* hasSpacingName_;               \/\/ 5.5$/;"	m	class:lefiLayer
hasSpacingNotchLength	lef/lefiLayer.cpp	/^lefiLayer::hasSpacingNotchLength(int index) const$/;"	f	class:lefiLayer
hasSpacingNumber	lef/lefiLayer.cpp	/^lefiLayer::hasSpacingNumber() const$/;"	f	class:lefiLayer
hasSpacingParallelOverlap	lef/lefiLayer.cpp	/^lefiLayer::hasSpacingParallelOverlap(int index) const$/;"	f	class:lefiLayer
hasSpacingParallelOverlap_	lef/lefiLayer.hpp	/^  int* hasSpacingParallelOverlap_;    \/\/ 5.7$/;"	m	class:lefiLayer
hasSpacingParellelEdge	lef/lefiLayer.cpp	/^lefiLayer::hasSpacingParellelEdge(int index) const$/;"	f	class:lefiLayer
hasSpacingParellelEdge_	lef/lefiLayer.hpp	/^  int* hasSpacingParellelEdge_;       \/\/ 5.7$/;"	m	class:lefiLayer
hasSpacingRange	lef/lefiLayer.cpp	/^lefiLayer::hasSpacingRange(int index) const$/;"	f	class:lefiLayer
hasSpacingRangeInfluence	lef/lefiLayer.cpp	/^lefiLayer::hasSpacingRangeInfluence(int index) const$/;"	f	class:lefiLayer
hasSpacingRangeInfluenceRange	lef/lefiLayer.cpp	/^lefiLayer::hasSpacingRangeInfluenceRange(int index) const$/;"	f	class:lefiLayer
hasSpacingRangeRange	lef/lefiLayer.cpp	/^lefiLayer::hasSpacingRangeRange(int index) const$/;"	f	class:lefiLayer
hasSpacingRangeUseLengthThreshold	lef/lefiLayer.cpp	/^lefiLayer::hasSpacingRangeUseLengthThreshold(int index) const$/;"	f	class:lefiLayer
hasSpacingRange_	lef/lefiLayer.hpp	/^  int* hasSpacingRange_;              \/\/ pcr 409334$/;"	m	class:lefiLayer
hasSpacingSamenet	lef/lefiLayer.cpp	/^lefiLayer::hasSpacingSamenet(int index) const$/;"	f	class:lefiLayer
hasSpacingSamenetPGonly	lef/lefiLayer.cpp	/^lefiLayer::hasSpacingSamenetPGonly(int index) const$/;"	f	class:lefiLayer
hasSpacingSamenetPGonly_	lef/lefiLayer.hpp	/^  int* hasSpacingSamenetPGonly_;      \/\/ 5.7$/;"	m	class:lefiLayer
hasSpacingSamenet_	lef/lefiLayer.hpp	/^  int* hasSpacingSamenet_;            \/\/ 5.7$/;"	m	class:lefiLayer
hasSpacingTableOrtho	lef/lefiLayer.cpp	/^lefiLayer::hasSpacingTableOrtho() const$/;"	f	class:lefiLayer
hasSpacingTableOrtho_	lef/lefiLayer.hpp	/^  int     hasSpacingTableOrtho_;$/;"	m	class:lefiLayer
hasSpacingTwoEdges	lef/lefiLayer.cpp	/^lefiLayer::hasSpacingTwoEdges(int index) const$/;"	f	class:lefiLayer
hasSpacingTwoEdges_	lef/lefiLayer.hpp	/^  int* hasSpacingTwoEdges_;           \/\/ 5.7$/;"	m	class:lefiLayer
hasSpacingUseLengthThreshold_	lef/lefiLayer.hpp	/^  int* hasSpacingUseLengthThreshold_; \/\/ pcr 282799, due to mult. spacing allow$/;"	m	class:lefiLayer
hasSpacing_	lef/lefiLayer.hpp	/^  int hasSpacing_;$/;"	m	class:lefiLayer
hasSpacing_	lef/lefiNonDefault.hpp	/^  char* hasSpacing_;$/;"	m	class:lefiNonDefault
hasSpacing_	lef/lefiViaRule.hpp	/^  int hasSpacing_;$/;"	m	class:lefiViaRuleLayer
hasSplitWireWidth	lef/lefiLayer.cpp	/^lefiLayer::hasSplitWireWidth() const$/;"	f	class:lefiLayer
hasSplitWireWidth_	lef/lefiLayer.hpp	/^  int hasSplitWireWidth_;$/;"	m	class:lefiLayer
hasStableTiming	lef/lefiMacro.cpp	/^lefiTiming::hasStableTiming()$/;"	f	class:lefiTiming
hasStableTiming_	lef/lefiMacro.hpp	/^  int hasStableTiming_;$/;"	m	class:lefiTiming
hasStack	lef/lefiMisc.cpp	/^lefiSpacing::hasStack() const$/;"	f	class:lefiSpacing
hasStack_	lef/lefiMisc.hpp	/^  int    hasStack_;$/;"	m	class:lefiSpacing
hasStepPattern	lef/lefiMisc.cpp	/^lefiSitePattern::hasStepPattern() const$/;"	f	class:lefiSitePattern
hasString	lef/lefiProp.cpp	/^lefiProp::hasString() const$/;"	f	class:lefiProp
hasSupplySensitivity	lef/lefiMacro.cpp	/^lefiPin::hasSupplySensitivity() const$/;"	f	class:lefiPin
hasSymmetry_	lef/lefiMacro.hpp	/^  char hasSymmetry_;  \/\/ X=1  Y=2  R90=4  (can be combined)$/;"	m	class:lefiMacro
hasTables	lef/lefiMacro.cpp	/^lefiPin::hasTables() const$/;"	f	class:lefiPin
hasTables_	lef/lefiMacro.hpp	/^  char hasTables_;$/;"	m	class:lefiPin
hasTaperRule	lef/lefiMacro.cpp	/^lefiPin::hasTaperRule() const$/;"	f	class:lefiPin
hasThickness	lef/lefiLayer.cpp	/^lefiLayer::hasThickness() const$/;"	f	class:lefiLayer
hasThickness_	lef/lefiLayer.hpp	/^  int hasThickness_;$/;"	m	class:lefiLayer
hasTieoffr	lef/lefiMacro.cpp	/^lefiPin::hasTieoffr() const$/;"	f	class:lefiPin
hasTieoffr_	lef/lefiMacro.hpp	/^  char hasTieoffr_;$/;"	m	class:lefiPin
hasTime	lef/lefiUnits.cpp	/^lefiUnits::hasTime() const$/;"	f	class:lefiUnits
hasTime_	lef/lefiUnits.hpp	/^  int hasTime_;$/;"	m	class:lefiUnits
hasTopOfStack	lef/lefiVia.cpp	/^lefiVia::hasTopOfStack() const$/;"	f	class:lefiVia
hasTopOfStack_	lef/lefiVia.hpp	/^  int hasTopOfStack_;$/;"	m	class:lefiVia
hasTransition	lef/lefiMacro.cpp	/^lefiTiming::hasTransition()$/;"	f	class:lefiTiming
hasTransition_	lef/lefiMacro.hpp	/^  int hasTransition_;$/;"	m	class:lefiTiming
hasTwoWidthPRL_	lef/lefiLayer.hpp	/^  int hasTwoWidthPRL_;$/;"	m	class:lefiLayer
hasTwoWidths	lef/lefrData.hpp	/^    int  hasTwoWidths; $/;"	m	class:lefrData
hasType	lef/lefiLayer.cpp	/^lefiLayer::hasType() const$/;"	f	class:lefiLayer
hasType	lef/lefrData.hpp	/^    int  hasType; $/;"	m	class:lefrData
hasUnateness	lef/lefiMacro.cpp	/^lefiTiming::hasUnateness()$/;"	f	class:lefiTiming
hasUnateness_	lef/lefiMacro.hpp	/^  int hasUnateness_;$/;"	m	class:lefiTiming
hasUse	lef/lefiMacro.cpp	/^lefiPin::hasUse() const$/;"	f	class:lefiPin
hasUse_	lef/lefiMacro.hpp	/^  char hasUse_;$/;"	m	class:lefiPin
hasVHI	lef/lefiMacro.cpp	/^lefiPin::hasVHI() const$/;"	f	class:lefiPin
hasVHI_	lef/lefiMacro.hpp	/^  char hasVHI_; $/;"	m	class:lefiPin
hasVLO	lef/lefiMacro.cpp	/^lefiPin::hasVLO() const$/;"	f	class:lefiPin
hasVLO_	lef/lefiMacro.hpp	/^  char hasVLO_;$/;"	m	class:lefiPin
hasVer	lef/lefrData.hpp	/^    int  hasVer; $/;"	m	class:lefrData
hasViaRule	lef/lefiVia.cpp	/^lefiVia::hasViaRule() const$/;"	f	class:lefiVia
hasViaRule_layer	lef/lefrData.hpp	/^    int  hasViaRule_layer; $/;"	m	class:lefrData
hasViaWidth	lef/lefiLayer.cpp	/^lefiLayer::hasViaWidth() const$/;"	f	class:lefiLayer
hasVoltage	lef/lefiUnits.cpp	/^lefiUnits::hasVoltage() const$/;"	f	class:lefiUnits
hasVoltage_	lef/lefiUnits.hpp	/^  int hasVoltage_;$/;"	m	class:lefiUnits
hasWidth	lef/lefiLayer.cpp	/^lefiLayer::hasWidth() const$/;"	f	class:lefiLayer
hasWidth	lef/lefiViaRule.cpp	/^lefiViaRuleLayer::hasWidth() const$/;"	f	class:lefiViaRuleLayer
hasWidth	lef/lefrData.hpp	/^    int  hasWidth; $/;"	m	class:lefrData
hasWidthPRL	lef/lefiLayer.cpp	/^lefiTwoWidths::hasWidthPRL(int index) const$/;"	f	class:lefiTwoWidths
hasWidth_	lef/lefiLayer.hpp	/^  int hasWidth_;            $/;"	m	class:lefiLayer
hasWidth_	lef/lefiNonDefault.hpp	/^  char* hasWidth_;$/;"	m	class:lefiNonDefault
hasWidth_	lef/lefiViaRule.hpp	/^  int hasWidth_;$/;"	m	class:lefiViaRuleLayer
hasWireExtension	lef/lefiLayer.cpp	/^lefiLayer::hasWireExtension() const$/;"	f	class:lefiLayer
hasWireExtension_	lef/lefiLayer.hpp	/^  int hasWireExtension_;$/;"	m	class:lefiLayer
hasWireExtension_	lef/lefiNonDefault.hpp	/^  char* hasWireExtension_;$/;"	m	class:lefiNonDefault
hasXSymmetry	lef/lefiMacro.cpp	/^lefiMacro::hasXSymmetry() const$/;"	f	class:lefiMacro
hasXSymmetry	lef/lefiMisc.cpp	/^lefiSite::hasXSymmetry() const$/;"	f	class:lefiSite
hasXYDiagPitch	lef/lefiLayer.cpp	/^lefiLayer::hasXYDiagPitch() const$/;"	f	class:lefiLayer
hasXYOffset	lef/lefiLayer.cpp	/^lefiLayer::hasXYOffset() const$/;"	f	class:lefiLayer
hasXYPitch	lef/lefiLayer.cpp	/^lefiLayer::hasXYPitch() const$/;"	f	class:lefiLayer
hasYSymmetry	lef/lefiMacro.cpp	/^lefiMacro::hasYSymmetry() const$/;"	f	class:lefiMacro
hasYSymmetry	lef/lefiMisc.cpp	/^lefiSite::hasYSymmetry() const$/;"	f	class:lefiSite
height	lef/lefiLayer.cpp	/^lefiLayer::height() const$/;"	f	class:lefiLayer
height_	lef/lefiLayer.hpp	/^  double height_;$/;"	m	class:lefiLayer
high	clef/lefiTypedefs.h	/^  double high;$/;"	m	struct:lefiNoiseMargin
high	lef/lefiCrossTalk.hpp	/^  double high;$/;"	m	struct:lefiNoiseMargin
highTableSize_	lef/lefiMacro.hpp	/^  int highTableSize_;$/;"	m	class:lefiPin
highTable_	lef/lefiMacro.hpp	/^  char* highTable_;$/;"	m	class:lefiPin
iRDropWarnings	lef/lefrData.hpp	/^    int  iRDropWarnings; $/;"	m	class:lefrData
ignoreVersion	lef/lefrData.hpp	/^    int  ignoreVersion; \/\/ ignore checking version number$/;"	m	class:lefrData
inDefine	lef/lefrData.hpp	/^    int  inDefine; $/;"	m	class:lefrData
inMarginH_	lef/lefiMacro.hpp	/^  double inMarginH_;$/;"	m	class:lefiPin
inMarginHigh	lef/lefiMacro.cpp	/^lefiPin::inMarginHigh() const$/;"	f	class:lefiPin
inMarginL_	lef/lefiMacro.hpp	/^  double inMarginL_;$/;"	m	class:lefiPin
inMarginLow	lef/lefiMacro.cpp	/^lefiPin::inMarginLow() const$/;"	f	class:lefiPin
influence	lef/lefiLayer.cpp	/^lefiSpacingTable::influence() const$/;"	f	class:lefiSpacingTable
influence_	lef/lefiLayer.hpp	/^  lefiInfluence*   influence_;$/;"	m	class:lefiSpacingTable
initRead	lef/lefrData.cpp	/^lefrData::initRead()$/;"	f	class:lefrData
init_call_func	lef/lefrReader.cpp	/^static const char *init_call_func = NULL;$/;"	v	file:
init_symbol_table	lef/lefrSettings.cpp	/^lefrSettings::init_symbol_table()$/;"	f	class:lefrSettings
inoutAntCB	lefdiff/diffLefRW.cpp	/^int inoutAntCB(lefrCallbackType_e c, double antenna, lefiUserData ud) {$/;"	f
inoutAntennaWarnings	lef/lefrData.hpp	/^    int  inoutAntennaWarnings; $/;"	m	class:lefrData
inout_antenna	lef/lef.y	/^inout_antenna: K_INOUTPINANTENNASIZE int_number ';'$/;"	l
inputAntCB	lefdiff/diffLefRW.cpp	/^int inputAntCB(lefrCallbackType_e c, double antenna, lefiUserData ud) {$/;"	f
inputAntennaWarnings	lef/lefrData.hpp	/^    int  inputAntennaWarnings; $/;"	m	class:lefrData
input_antenna	lef/lef.y	/^input_antenna: K_INPUTPINANTENNASIZE int_number ';'$/;"	l
input_level	lef/lefrData.hpp	/^    int  input_level; $/;"	m	class:lefrData
int_number	lef/lef.y	/^int_number : NUMBER $/;"	l
int_number_list	lef/lef.y	/^int_number_list:$/;"	l
ir_table	lef/lef.y	/^ir_table: ir_tablename ir_table_values ';'$/;"	l
ir_table_value	lef/lef.y	/^ir_table_value: int_number int_number $/;"	l
ir_table_values	lef/lef.y	/^ir_table_values:$/;"	l
ir_tablename	lef/lef.y	/^ir_tablename: K_TABLE T_STRING$/;"	l
ir_tables	lef/lef.y	/^ir_tables:$/;"	l
irdrop	lef/lef.y	/^irdrop: start_irdrop ir_tables end_irdrop$/;"	l
irdropBeginCB	lefrw/lefrw.cpp	/^int irdropBeginCB(lefrCallbackType_e c, void*, lefiUserData){$/;"	f
irdropCB	lefdiff/diffLefRW.cpp	/^int irdropCB(lefrCallbackType_e c, lefiIRDrop* irdrop, lefiUserData ud) {$/;"	f
irdropCB	lefrw/lefrw.cpp	/^int irdropCB(lefrCallbackType_e c, lefiIRDrop* irdrop, lefiUserData) {$/;"	f
irdropEndCB	lefrw/lefrw.cpp	/^int irdropEndCB(lefrCallbackType_e c, void*, lefiUserData){$/;"	f
isBuffer	lef/lefiMacro.cpp	/^lefiMacro::isBuffer() const$/;"	f	class:lefiMacro
isBuffer_	lef/lefiMacro.hpp	/^  char isBuffer_;$/;"	m	class:lefiMacro
isFixedMask	lef/lefiMacro.cpp	/^lefiMacro::isFixedMask() const$/;"	f	class:lefiMacro
isFixedMask_	lef/lefiMacro.hpp	/^  int isFixedMask_;$/;"	m	class:lefiMacro
isGenerate	lef/lefrData.hpp	/^    int  isGenerate; $/;"	m	class:lefrData
isHorizontal	lef/lefiViaRule.cpp	/^lefiViaRuleLayer::isHorizontal() const$/;"	f	class:lefiViaRuleLayer
isInfluence	lef/lefiLayer.cpp	/^lefiSpacingTable::isInfluence() const$/;"	f	class:lefiSpacingTable
isInverter	lef/lefiMacro.cpp	/^lefiMacro::isInverter() const$/;"	f	class:lefiMacro
isInverter_	lef/lefiMacro.hpp	/^  char isInverter_;$/;"	m	class:lefiMacro
isParallel	lef/lefiLayer.cpp	/^lefiSpacingTable::isParallel() const$/;"	f	class:lefiSpacingTable
isSessionles	lefrw/lefrw.cpp	/^int isSessionles = 0;$/;"	v
isVertical	lef/lefiViaRule.cpp	/^lefiViaRuleLayer::isVertical() const$/;"	f	class:lefiViaRuleLayer
itemType	lef/lefiMisc.cpp	/^lefiGeometries::itemType(int index) const$/;"	f	class:lefiGeometries
itemType_	lef/lefiMisc.hpp	/^  lefiGeomEnum* itemType_;$/;"	m	class:lefiGeometries
itemsAllocated_	lef/lefiMisc.hpp	/^  int itemsAllocated_;$/;"	m	class:lefiGeometries
items_	lef/lefiMisc.hpp	/^  void** items_;$/;"	m	class:lefiGeometries
last	lef/lefrData.hpp	/^    char*  last; $/;"	m	class:lefrData
layer	lef/lefiViaRule.cpp	/^lefiViaRule::layer(int index) const$/;"	f	class:lefiViaRule
layerAllocated_	lef/lefiMisc.hpp	/^  int    layerAllocated_;$/;"	m	class:lefiTrackPattern
layerCB	lefdiff/diffLefRW.cpp	/^int layerCB(lefrCallbackType_e c, lefiLayer* layer, lefiUserData ud) {$/;"	f
layerCB	lefrw/lefrw.cpp	/^int layerCB(lefrCallbackType_e c, lefiLayer* layer, lefiUserData) {$/;"	f
layerCB	lefwrite/lefwriteCbs.cpp	/^int layerCB(lefwCallbackType_e c, lefiUserData ud) {$/;"	f
layerCapacitance	lef/lefiNonDefault.cpp	/^lefiNonDefault::layerCapacitance(int index) const$/;"	f	class:lefiNonDefault
layerCut	lef/lefrData.hpp	/^    int  layerCut; $/;"	m	class:lefrData
layerCutSpacing	lef/lefrData.hpp	/^    double  layerCutSpacing; $/;"	m	class:lefrData
layerDiagWidth	lef/lefiNonDefault.cpp	/^lefiNonDefault::layerDiagWidth(int index) const$/;"	f	class:lefiNonDefault
layerDir	lef/lefrData.hpp	/^    int  layerDir; $/;"	m	class:lefrData
layerEdgeCap	lef/lefiNonDefault.cpp	/^lefiNonDefault::layerEdgeCap(int index) const$/;"	f	class:lefiNonDefault
layerMastOver	lef/lefrData.hpp	/^    int  layerMastOver; $/;"	m	class:lefrData
layerName	lef/lefiMacro.cpp	/^lefiDensity::layerName(int index) const$/;"	f	class:lefiDensity
layerName	lef/lefiMisc.cpp	/^lefiTrackPattern::layerName(int index) const$/;"	f	class:lefiTrackPattern
layerName	lef/lefiNonDefault.cpp	/^lefiNonDefault::layerName(int index) const$/;"	f	class:lefiNonDefault
layerName	lef/lefiVia.cpp	/^lefiVia::layerName(int layerNum) const$/;"	f	class:lefiVia
layerName	lef/lefrData.hpp	/^    char*  layerName; $/;"	m	class:lefrData
layerName_	lef/lefiMacro.hpp	/^  char** layerName_;$/;"	m	class:lefiDensity
layerName_	lef/lefiNonDefault.hpp	/^  char** layerName_;$/;"	m	class:lefiNonDefault
layerNames_	lef/lefiMisc.hpp	/^  char** layerNames_;$/;"	m	class:lefiTrackPattern
layerResistance	lef/lefiNonDefault.cpp	/^lefiNonDefault::layerResistance(int index) const$/;"	f	class:lefiNonDefault
layerRout	lef/lefrData.hpp	/^    int  layerRout; $/;"	m	class:lefrData
layerSpacing	lef/lefiNonDefault.cpp	/^lefiNonDefault::layerSpacing(int index) const$/;"	f	class:lefiNonDefault
layerType	lef/lefiLayer.cpp	/^lefiLayer::layerType() const$/;"	f	class:lefiLayer
layerType_	lef/lefiLayer.hpp	/^  char* layerType_;   \/\/ 5.8 - POLYROUTING, MIMCAP, TSV, PASSIVATION, NWELL$/;"	m	class:lefiLayer
layerWarnings	lef/lefrData.hpp	/^    int  layerWarnings; $/;"	m	class:lefrData
layerWidth	lef/lefiNonDefault.cpp	/^lefiNonDefault::layerWidth(int index) const$/;"	f	class:lefiNonDefault
layerWireExtension	lef/lefiNonDefault.cpp	/^lefiNonDefault::layerWireExtension(int index) const$/;"	f	class:lefiNonDefault
layer_antenna_duo	lef/lef.y	/^layer_antenna_duo: \/\/ empty $/;"	l
layer_antenna_pwl	lef/lef.y	/^layer_antenna_pwl:$/;"	l
layer_arraySpacing_arraycut	lef/lef.y	/^layer_arraySpacing_arraycut:$/;"	l
layer_arraySpacing_arraycuts	lef/lef.y	/^layer_arraySpacing_arraycuts:       \/\/ 5.7$/;"	l
layer_arraySpacing_long	lef/lef.y	/^layer_arraySpacing_long:            \/\/ 5.7$/;"	l
layer_arraySpacing_width	lef/lef.y	/^layer_arraySpacing_width:           \/\/ 5.7$/;"	l
layer_diffusion_ratio	lef/lef.y	/^layer_diffusion_ratio:$/;"	l
layer_diffusion_ratios	lef/lef.y	/^layer_diffusion_ratios: \/\/ empty $/;"	l
layer_direction	lef/lef.y	/^layer_direction:$/;"	l
layer_enclosure_type_opt	lef/lef.y	/^layer_enclosure_type_opt: $/;"	l
layer_enclosure_width_except_opt	lef/lef.y	/^layer_enclosure_width_except_opt: \/\/ empty $/;"	l
layer_enclosure_width_opt	lef/lef.y	/^layer_enclosure_width_opt:  \/\/ empty $/;"	l
layer_exceptpgnet	lef/lef.y	/^layer_exceptpgnet: \/\/ empty $/;"	l
layer_frequency	lef/lef.y	/^layer_frequency:$/;"	l
layer_minen_width	lef/lef.y	/^layer_minen_width:$/;"	l
layer_minimumcut_from	lef/lef.y	/^layer_minimumcut_from: \/\/ empty $/;"	l
layer_minimumcut_length	lef/lef.y	/^layer_minimumcut_length: \/\/ empty $/;"	l
layer_minimumcut_within	lef/lef.y	/^layer_minimumcut_within: \/\/ empty $/;"	l
layer_minstep_option	lef/lef.y	/^layer_minstep_option:$/;"	l
layer_minstep_options	lef/lef.y	/^layer_minstep_options: \/\/ empty $/;"	l
layer_minstep_type	lef/lef.y	/^layer_minstep_type:$/;"	l
layer_name	lef/lef.y	/^layer_name: T_STRING$/;"	l
layer_option	lef/lef.y	/^layer_option:$/;"	l
layer_options	lef/lef.y	/^layer_options:$/;"	l
layer_oxide	lef/lef.y	/^layer_oxide:$/;"	l
layer_preferenclosure_width_opt	lef/lef.y	/^layer_preferenclosure_width_opt:  \/\/ empty $/;"	l
layer_prop	lef/lef.y	/^layer_prop:$/;"	l
layer_prop_list	lef/lef.y	/^layer_prop_list:$/;"	l
layer_rule	lef/lef.y	/^layer_rule: start_layer $/;"	l
layer_sp_TwoWidth	lef/lef.y	/^layer_sp_TwoWidth: K_WIDTH int_number layer_sp_TwoWidthsPRL int_number$/;"	l
layer_sp_TwoWidths	lef/lef.y	/^layer_sp_TwoWidths: \/\/ empty               \/\/ 5.7$/;"	l
layer_sp_TwoWidthsPRL	lef/lef.y	/^layer_sp_TwoWidthsPRL:                       \/\/ 5.7$/;"	l
layer_sp_influence_width	lef/lef.y	/^layer_sp_influence_width: K_WIDTH int_number K_WITHIN int_number K_SPACING int_number$/;"	l
layer_sp_influence_widths	lef/lef.y	/^layer_sp_influence_widths: \/\/ empty $/;"	l
layer_sp_parallel_width	lef/lef.y	/^layer_sp_parallel_width: K_WIDTH int_number$/;"	l
layer_sp_parallel_widths	lef/lef.y	/^layer_sp_parallel_widths: \/\/ empty $/;"	l
layer_spacing	lef/lef.y	/^layer_spacing: \/\/ empty $/;"	l
layer_spacing_cut_routing	lef/lef.y	/^layer_spacing_cut_routing:$/;"	l
layer_spacing_opt	lef/lef.y	/^layer_spacing_opt: K_CENTERTOCENTER      \/\/ 5.7 $/;"	l
layer_spacing_opts	lef/lef.y	/^layer_spacing_opts:$/;"	l
layer_spacingtable_opt	lef/lef.y	/^layer_spacingtable_opt:$/;"	l
layer_spacingtable_opts	lef/lef.y	/^layer_spacingtable_opts:      \/\/ 5.7 $/;"	l
layer_table_type	lef/lef.y	/^layer_table_type:$/;"	l
layer_type	lef/lef.y	/^layer_type:$/;"	l
layersAllocated_	lef/lefiMacro.hpp	/^  int    layersAllocated_;$/;"	m	class:lefiDensity
layersAllocated_	lef/lefiNonDefault.hpp	/^  int layersAllocated_;$/;"	m	class:lefiNonDefault
layersAllocated_	lef/lefiVia.hpp	/^  int layersAllocated_;$/;"	m	class:lefiVia
layers_	lef/lefiVia.hpp	/^  lefiViaLayer** layers_;$/;"	m	class:lefiVia
layers_	lef/lefiViaRule.hpp	/^  lefiViaRuleLayer layers_[3];$/;"	m	class:lefiViaRule
leakage	lef/lefiMacro.cpp	/^lefiPin::leakage() const$/;"	f	class:lefiPin
leakage_	lef/lefiMacro.hpp	/^  double leakage_;$/;"	m	class:lefiPin
lef58WidthTableOrthoValues_	lef/lefiLayer.hpp	/^  int     lef58WidthTableOrthoValues_;$/;"	m	class:lefiLayer
lef58WidthTableOrtho_	lef/lefiLayer.hpp	/^  double* lef58WidthTableOrtho_;$/;"	m	class:lefiLayer
lef58WidthTableWrongDirValues_	lef/lefiLayer.hpp	/^  int     lef58WidthTableWrongDirValues_;$/;"	m	class:lefiLayer
lef58WidthTableWrongDir_	lef/lefiLayer.hpp	/^  double* lef58WidthTableWrongDir_;$/;"	m	class:lefiLayer
lefAddBooleanDefine	lef/lef_keywords.cpp	/^lefAddBooleanDefine(const char  *token, int val)$/;"	f
lefAddNumDefine	lef/lef_keywords.cpp	/^lefAddNumDefine(const char  *token, double val)$/;"	f
lefAddStringDefine	lef/lef_keywords.cpp	/^lefAddStringDefine(const char *token, const char *str)$/;"	f
lefAliasMap	lef/lefrData.hpp	/^typedef std::map<std::string, std::string, lefCompareStrings> lefAliasMap;$/;"	t
lefCallbacks	lef/lefrCallbacks.cpp	/^lefrCallbacks *lefCallbacks = NULL;$/;"	v
lefCompareCStrings	lef/lefrSettings.hpp	/^struct lefCompareCStrings $/;"	s
lefCompareStrings	lef/lefrData.hpp	/^struct lefCompareStrings $/;"	s
lefData	lef/lefrData.cpp	/^lefrData  *lefData = NULL;$/;"	v
lefDebug	lef/lefrData.hpp	/^    char        lefDebug[100];$/;"	m	class:lefrData
lefDefIf	lef/lefrData.hpp	/^    int  lefDefIf; $/;"	m	class:lefrData
lefDoubleMap	lef/lefrData.hpp	/^typedef std::map<std::string, double, lefCompareStrings> lefDoubleMap;$/;"	t
lefDumbMode	lef/lefrData.hpp	/^    int  lefDumbMode; $/;"	m	class:lefrData
lefErrMsgPrinted	lef/lefrData.hpp	/^    int  lefErrMsgPrinted; $/;"	m	class:lefrData
lefError	lef/lef_keywords.cpp	/^lefError(int        msgNum,$/;"	f
lefFixedMask	lef/lefrData.hpp	/^    int  lefFixedMask; \/\/All the LEF MACRO PIN MASK assignments can be $/;"	m	class:lefrData
lefFree	lef/lef_keywords.cpp	/^lefFree(void *name)$/;"	f
lefGZFile	clefzlib/lefzlib.h	/^typedef void* lefGZFile;$/;"	t
lefGZFile	lefzlib/lefzlib.hpp	/^typedef void* lefGZFile;$/;"	t
lefGZipClose	clefzlib/clefzlib.c	/^int lefGZipClose(lefGZFile filePtr) {$/;"	f
lefGZipClose	lefzlib/lefzlib.cpp	/^int lefGZipClose(lefGZFile filePtr) {$/;"	f
lefGZipOpen	clefzlib/clefzlib.c	/^lefGZipOpen(const char *gzipPath, const char* mode) {$/;"	f
lefGZipOpen	lefzlib/lefzlib.cpp	/^lefGZipOpen(const char *gzipPath, const char* mode) {$/;"	f
lefGZip_read	clefzlib/clefzlib.c	/^size_t lefGZip_read(FILE* file, char* buf, size_t len) {$/;"	f
lefGZip_read	lefzlib/lefzlib.cpp	/^size_t lefGZip_read(FILE* file, char* buf, size_t len) {$/;"	f
lefGetAlias	lef/lef_keywords.cpp	/^lefGetAlias(const char* name, const char** value)$/;"	f
lefGetDoubleDefine	lef/lef_keywords.cpp	/^lefGetDoubleDefine(const char* name, double* value)$/;"	f
lefGetIntDefine	lef/lef_keywords.cpp	/^lefGetIntDefine(const char* name, int* value)$/;"	f
lefGetKeyword	lef/lef_keywords.cpp	/^int lefGetKeyword(const char* name, int *result) $/;"	f
lefGetStringDefine	lef/lef_keywords.cpp	/^lefGetStringDefine(const char* name, const char** value)$/;"	f
lefGetc	lef/lef_keywords.cpp	/^lefGetc()$/;"	f
lefInfo	lef/lef_keywords.cpp	/^lefInfo(int         msgNum,$/;"	f
lefInfoMsgPrinted	lef/lefrData.hpp	/^    int  lefInfoMsgPrinted; $/;"	m	class:lefrData
lefIntMap	lef/lefrData.hpp	/^typedef std::map<std::string, int, lefCompareStrings> lefIntMap;$/;"	t
lefInvalidChar	lef/lefrData.hpp	/^    int  lefInvalidChar; $/;"	m	class:lefrData
lefKeywordMap	lef/lefrSettings.hpp	/^typedef std::map<const char*, int, lefCompareCStrings>  lefKeywordMap;$/;"	t
lefMalloc	lef/lef_keywords.cpp	/^lefMalloc(size_t lef_size)$/;"	f
lefNdRule	lef/lefrData.hpp	/^    int  lefNdRule; $/;"	m	class:lefrData
lefNewIsKeyword	lef/lefrData.hpp	/^    int  lefNewIsKeyword; $/;"	m	class:lefrData
lefNlToken	lef/lefrData.hpp	/^    int  lefNlToken; $/;"	m	class:lefrData
lefNoNum	lef/lefrData.hpp	/^    int  lefNoNum; $/;"	m	class:lefrData
lefPOINT	lef/lefiDefs.hpp	/^typedef struct point lefPOINT;$/;"	t	typeref:struct:point
lefPropDefType	lef/lefrData.hpp	/^    char   lefPropDefType;  $/;"	m	class:lefrData
lefProps	lef/lefrSettings.hpp	/^    lefrProps lefProps;$/;"	m	class:lefrSettings
lefRECT	lef/lefiDefs.hpp	/^typedef struct rect lefRECT;$/;"	t	typeref:struct:rect
lefRealloc	lef/lef_keywords.cpp	/^lefRealloc(void *name,$/;"	f
lefReloadBuffer	lef/lef_keywords.cpp	/^lefReloadBuffer()$/;"	f
lefRetVal	lef/lefrData.hpp	/^    int  lefRetVal; $/;"	m	class:lefrData
lefSetNonDefault	lef/lef_keywords.cpp	/^lefSetNonDefault(const char *nd_name)$/;"	f
lefSettings	lef/lefrSettings.cpp	/^lefrSettings *lefSettings = NULL;$/;"	v
lefSpacing	lefdiff/diffLefRW.cpp	/^void lefSpacing(lefiSpacing* spacing, char *inName) {$/;"	f
lefSpacing	lefrw/lefrw.cpp	/^void lefSpacing(lefiSpacing* spacing) {$/;"	f
lefStoreAlias	lef/lef_keywords.cpp	/^lefStoreAlias()$/;"	f
lefStringMap	lef/lefrData.hpp	/^typedef std::map<std::string, std::string, lefCompareStrings> lefStringMap;$/;"	t
lefTOKEN	lef/lefiDefs.hpp	/^typedef struct token lefTOKEN;$/;"	t	typeref:struct:token
lefUnsetNonDefault	lef/lef_keywords.cpp	/^lefUnsetNonDefault()$/;"	f
lefUpperCase	lef/lefiDebug.cpp	/^lefUpperCase(const char *str)$/;"	f
lefVia	lefdiff/diffLefRW.cpp	/^void lefVia(lefiVia* via, char* inName) {$/;"	f
lefVia	lefrw/lefrw.cpp	/^void lefVia(lefiVia *via) {$/;"	f
lefViaRuleLayer	lefdiff/diffLefRW.cpp	/^void lefViaRuleLayer(lefiViaRuleLayer* vLayer, char* viaName) {$/;"	f
lefViaRuleLayer	lefrw/lefrw.cpp	/^void lefViaRuleLayer(lefiViaRuleLayer* vLayer) {$/;"	f
lefWRetVal	lef/lefrData.hpp	/^    int  lefWRetVal; $/;"	m	class:lefrData
lefWRetVal	lef/lefwWriterCalls.cpp	/^int lefWRetVal;$/;"	v
lefWarnMsgPrinted	lef/lefrData.hpp	/^    int  lefWarnMsgPrinted; $/;"	m	class:lefrData
lefWarning	lef/lef_keywords.cpp	/^lefWarning(int          msgNum,$/;"	f
lef_errors	lef/lefrData.hpp	/^    int  lef_errors; $/;"	m	class:lefrData
lef_file	lef/lef.y	/^lef_file: rules extension_opt  end_library$/;"	l
lef_init	lef/lefrReader.cpp	/^lef_init(const char  *func)$/;"	f
lef_kywd	lef/lef_keywords.cpp	/^lef_kywd(int num)$/;"	f
lef_nlines	lef/lefrData.hpp	/^    int  lef_nlines; $/;"	m	class:lefrData
lef_ntokens	lef/lefrData.hpp	/^    int  lef_ntokens; $/;"	m	class:lefrData
lef_save_x	lef/lefrData.hpp	/^    double  lef_save_x; $/;"	m	class:lefrData
lef_save_y	lef/lefrData.hpp	/^    double  lef_save_y; \/\/ for interpreting (*) notation of LEF\/DEF$/;"	m	class:lefrData
lef_warnings	lef/lefrData.hpp	/^    int  lef_warnings; $/;"	m	class:lefrData
lefaddr	lef/lef_keywords.cpp	/^lefaddr(const char *in)$/;"	f
lefamper_lookup	lef/lef_keywords.cpp	/^lefamper_lookup(char *tkn)$/;"	f
lefch	lef/lefrData.hpp	/^    char*  lefch; $/;"	m	class:lefrData
lefiAdoptedSubObjects	lef/lefiDefs.hpp	/^  lefiAdoptedSubObjects       \/\/ shallow copy + delete$/;"	e	enum:__anon5
lefiAntennaADR	clef/lefiLayer.h	/^  lefiAntennaADR = 12$/;"	e	enum:lefiAntennaEnum
lefiAntennaADR	lef/lefiLayer.hpp	/^  lefiAntennaADR$/;"	e	enum:lefiAntennaEnum
lefiAntennaAF	clef/lefiLayer.h	/^  lefiAntennaAF = 5,$/;"	e	enum:lefiAntennaEnum
lefiAntennaAF	lef/lefiLayer.hpp	/^  lefiAntennaAF,$/;"	e	enum:lefiAntennaEnum
lefiAntennaAR	clef/lefiLayer.h	/^  lefiAntennaAR = 1,$/;"	e	enum:lefiAntennaEnum
lefiAntennaAR	lef/lefiLayer.hpp	/^  lefiAntennaAR,$/;"	e	enum:lefiAntennaEnum
lefiAntennaCAR	clef/lefiLayer.h	/^  lefiAntennaCAR = 3,$/;"	e	enum:lefiAntennaEnum
lefiAntennaCAR	lef/lefiLayer.hpp	/^  lefiAntennaCAR,$/;"	e	enum:lefiAntennaEnum
lefiAntennaCDAR	clef/lefiLayer.h	/^  lefiAntennaCDAR = 4,$/;"	e	enum:lefiAntennaEnum
lefiAntennaCDAR	lef/lefiLayer.hpp	/^  lefiAntennaCDAR,$/;"	e	enum:lefiAntennaEnum
lefiAntennaCDSAR	clef/lefiLayer.h	/^  lefiAntennaCDSAR = 9,$/;"	e	enum:lefiAntennaEnum
lefiAntennaCDSAR	lef/lefiLayer.hpp	/^  lefiAntennaCDSAR,$/;"	e	enum:lefiAntennaEnum
lefiAntennaCSAR	clef/lefiLayer.h	/^  lefiAntennaCSAR = 8,$/;"	e	enum:lefiAntennaEnum
lefiAntennaCSAR	lef/lefiLayer.hpp	/^  lefiAntennaCSAR,$/;"	e	enum:lefiAntennaEnum
lefiAntennaDAR	clef/lefiLayer.h	/^  lefiAntennaDAR = 2,$/;"	e	enum:lefiAntennaEnum
lefiAntennaDAR	lef/lefiLayer.hpp	/^  lefiAntennaDAR,$/;"	e	enum:lefiAntennaEnum
lefiAntennaDSAR	clef/lefiLayer.h	/^  lefiAntennaDSAR = 7,$/;"	e	enum:lefiAntennaEnum
lefiAntennaDSAR	lef/lefiLayer.hpp	/^  lefiAntennaDSAR,$/;"	e	enum:lefiAntennaEnum
lefiAntennaEnum	clef/lefiLayer.h	/^typedef enum lefiAntennaEnum {$/;"	g
lefiAntennaEnum	clef/lefiLayer.h	/^} lefiAntennaEnum;$/;"	t	typeref:enum:lefiAntennaEnum
lefiAntennaEnum	lef/lefiLayer.hpp	/^typedef enum lefiAntennaEnum {$/;"	g
lefiAntennaEnum	lef/lefiLayer.hpp	/^} lefiAntennaEnum;$/;"	t	typeref:enum:lefiAntennaEnum
lefiAntennaModel	clef/lefiTypedefs.h	/^typedef void *lefiAntennaModel;$/;"	t
lefiAntennaModel	lef/lefiLayer.cpp	/^lefiAntennaModel::lefiAntennaModel()$/;"	f	class:lefiAntennaModel
lefiAntennaModel	lef/lefiLayer.hpp	/^class lefiAntennaModel {$/;"	c
lefiAntennaModel_antennaAreaDiffReducePWL	clef/xlefiLayer.cpp	/^const ::lefiAntennaPWL* lefiAntennaModel_antennaAreaDiffReducePWL (const ::lefiAntennaModel* obj) {$/;"	f
lefiAntennaModel_antennaAreaFactor	clef/xlefiLayer.cpp	/^double lefiAntennaModel_antennaAreaFactor (const ::lefiAntennaModel* obj) {$/;"	f
lefiAntennaModel_antennaAreaMinusDiff	clef/xlefiLayer.cpp	/^double lefiAntennaModel_antennaAreaMinusDiff (const ::lefiAntennaModel* obj) {$/;"	f
lefiAntennaModel_antennaAreaRatio	clef/xlefiLayer.cpp	/^double lefiAntennaModel_antennaAreaRatio (const ::lefiAntennaModel* obj) {$/;"	f
lefiAntennaModel_antennaCumAreaRatio	clef/xlefiLayer.cpp	/^double lefiAntennaModel_antennaCumAreaRatio (const ::lefiAntennaModel* obj) {$/;"	f
lefiAntennaModel_antennaCumDiffAreaRatio	clef/xlefiLayer.cpp	/^double lefiAntennaModel_antennaCumDiffAreaRatio (const ::lefiAntennaModel* obj) {$/;"	f
lefiAntennaModel_antennaCumDiffAreaRatioPWL	clef/xlefiLayer.cpp	/^const ::lefiAntennaPWL* lefiAntennaModel_antennaCumDiffAreaRatioPWL (const ::lefiAntennaModel* obj) {$/;"	f
lefiAntennaModel_antennaCumDiffSideAreaRatio	clef/xlefiLayer.cpp	/^double lefiAntennaModel_antennaCumDiffSideAreaRatio (const ::lefiAntennaModel* obj) {$/;"	f
lefiAntennaModel_antennaCumDiffSideAreaRatioPWL	clef/xlefiLayer.cpp	/^const ::lefiAntennaPWL* lefiAntennaModel_antennaCumDiffSideAreaRatioPWL (const ::lefiAntennaModel* obj) {$/;"	f
lefiAntennaModel_antennaCumSideAreaRatio	clef/xlefiLayer.cpp	/^double lefiAntennaModel_antennaCumSideAreaRatio (const ::lefiAntennaModel* obj) {$/;"	f
lefiAntennaModel_antennaDiffAreaRatio	clef/xlefiLayer.cpp	/^double lefiAntennaModel_antennaDiffAreaRatio (const ::lefiAntennaModel* obj) {$/;"	f
lefiAntennaModel_antennaDiffAreaRatioPWL	clef/xlefiLayer.cpp	/^const ::lefiAntennaPWL* lefiAntennaModel_antennaDiffAreaRatioPWL (const ::lefiAntennaModel* obj) {$/;"	f
lefiAntennaModel_antennaDiffSideAreaRatio	clef/xlefiLayer.cpp	/^double lefiAntennaModel_antennaDiffSideAreaRatio (const ::lefiAntennaModel* obj) {$/;"	f
lefiAntennaModel_antennaDiffSideAreaRatioPWL	clef/xlefiLayer.cpp	/^const ::lefiAntennaPWL* lefiAntennaModel_antennaDiffSideAreaRatioPWL (const ::lefiAntennaModel* obj) {$/;"	f
lefiAntennaModel_antennaGatePlusDiff	clef/xlefiLayer.cpp	/^double lefiAntennaModel_antennaGatePlusDiff (const ::lefiAntennaModel* obj) {$/;"	f
lefiAntennaModel_antennaOxide	clef/xlefiLayer.cpp	/^char* lefiAntennaModel_antennaOxide (const ::lefiAntennaModel* obj) {$/;"	f
lefiAntennaModel_antennaSideAreaFactor	clef/xlefiLayer.cpp	/^double lefiAntennaModel_antennaSideAreaFactor (const ::lefiAntennaModel* obj) {$/;"	f
lefiAntennaModel_antennaSideAreaRatio	clef/xlefiLayer.cpp	/^double lefiAntennaModel_antennaSideAreaRatio (const ::lefiAntennaModel* obj) {$/;"	f
lefiAntennaModel_hasAntennaAreaDiffReducePWL	clef/xlefiLayer.cpp	/^int lefiAntennaModel_hasAntennaAreaDiffReducePWL (const ::lefiAntennaModel* obj) {$/;"	f
lefiAntennaModel_hasAntennaAreaFactor	clef/xlefiLayer.cpp	/^int lefiAntennaModel_hasAntennaAreaFactor (const ::lefiAntennaModel* obj) {$/;"	f
lefiAntennaModel_hasAntennaAreaFactorDUO	clef/xlefiLayer.cpp	/^int lefiAntennaModel_hasAntennaAreaFactorDUO (const ::lefiAntennaModel* obj) {$/;"	f
lefiAntennaModel_hasAntennaAreaMinusDiff	clef/xlefiLayer.cpp	/^int lefiAntennaModel_hasAntennaAreaMinusDiff (const ::lefiAntennaModel* obj) {$/;"	f
lefiAntennaModel_hasAntennaAreaRatio	clef/xlefiLayer.cpp	/^int lefiAntennaModel_hasAntennaAreaRatio (const ::lefiAntennaModel* obj) {$/;"	f
lefiAntennaModel_hasAntennaCumAreaRatio	clef/xlefiLayer.cpp	/^int lefiAntennaModel_hasAntennaCumAreaRatio (const ::lefiAntennaModel* obj) {$/;"	f
lefiAntennaModel_hasAntennaCumDiffAreaRatio	clef/xlefiLayer.cpp	/^int lefiAntennaModel_hasAntennaCumDiffAreaRatio (const ::lefiAntennaModel* obj) {$/;"	f
lefiAntennaModel_hasAntennaCumDiffAreaRatioPWL	clef/xlefiLayer.cpp	/^int lefiAntennaModel_hasAntennaCumDiffAreaRatioPWL (const ::lefiAntennaModel* obj) {$/;"	f
lefiAntennaModel_hasAntennaCumDiffSideAreaRatio	clef/xlefiLayer.cpp	/^int lefiAntennaModel_hasAntennaCumDiffSideAreaRatio (const ::lefiAntennaModel* obj) {$/;"	f
lefiAntennaModel_hasAntennaCumDiffSideAreaRatioPWL	clef/xlefiLayer.cpp	/^int lefiAntennaModel_hasAntennaCumDiffSideAreaRatioPWL (const ::lefiAntennaModel* obj) {$/;"	f
lefiAntennaModel_hasAntennaCumRoutingPlusCut	clef/xlefiLayer.cpp	/^int lefiAntennaModel_hasAntennaCumRoutingPlusCut (const ::lefiAntennaModel* obj) {$/;"	f
lefiAntennaModel_hasAntennaCumSideAreaRatio	clef/xlefiLayer.cpp	/^int lefiAntennaModel_hasAntennaCumSideAreaRatio (const ::lefiAntennaModel* obj) {$/;"	f
lefiAntennaModel_hasAntennaDiffAreaRatio	clef/xlefiLayer.cpp	/^int lefiAntennaModel_hasAntennaDiffAreaRatio (const ::lefiAntennaModel* obj) {$/;"	f
lefiAntennaModel_hasAntennaDiffAreaRatioPWL	clef/xlefiLayer.cpp	/^int lefiAntennaModel_hasAntennaDiffAreaRatioPWL (const ::lefiAntennaModel* obj) {$/;"	f
lefiAntennaModel_hasAntennaDiffSideAreaRatio	clef/xlefiLayer.cpp	/^int lefiAntennaModel_hasAntennaDiffSideAreaRatio (const ::lefiAntennaModel* obj) {$/;"	f
lefiAntennaModel_hasAntennaDiffSideAreaRatioPWL	clef/xlefiLayer.cpp	/^int lefiAntennaModel_hasAntennaDiffSideAreaRatioPWL (const ::lefiAntennaModel* obj) {$/;"	f
lefiAntennaModel_hasAntennaGatePlusDiff	clef/xlefiLayer.cpp	/^int lefiAntennaModel_hasAntennaGatePlusDiff (const ::lefiAntennaModel* obj) {$/;"	f
lefiAntennaModel_hasAntennaSideAreaFactor	clef/xlefiLayer.cpp	/^int lefiAntennaModel_hasAntennaSideAreaFactor (const ::lefiAntennaModel* obj) {$/;"	f
lefiAntennaModel_hasAntennaSideAreaFactorDUO	clef/xlefiLayer.cpp	/^int lefiAntennaModel_hasAntennaSideAreaFactorDUO (const ::lefiAntennaModel* obj) {$/;"	f
lefiAntennaModel_hasAntennaSideAreaRatio	clef/xlefiLayer.cpp	/^int lefiAntennaModel_hasAntennaSideAreaRatio (const ::lefiAntennaModel* obj) {$/;"	f
lefiAntennaO	clef/lefiLayer.h	/^  lefiAntennaO = 11,$/;"	e	enum:lefiAntennaEnum
lefiAntennaO	lef/lefiLayer.hpp	/^  lefiAntennaO,$/;"	e	enum:lefiAntennaEnum
lefiAntennaPWL	clef/lefiTypedefs.h	/^typedef void *lefiAntennaPWL;$/;"	t
lefiAntennaPWL	lef/lefiLayer.cpp	/^lefiAntennaPWL::lefiAntennaPWL()$/;"	f	class:lefiAntennaPWL
lefiAntennaPWL	lef/lefiLayer.hpp	/^class lefiAntennaPWL {$/;"	c
lefiAntennaPWL_numPWL	clef/xlefiLayer.cpp	/^int lefiAntennaPWL_numPWL (const ::lefiAntennaPWL* obj) {$/;"	f
lefiAntennaSAF	clef/lefiLayer.h	/^  lefiAntennaSAF = 10,$/;"	e	enum:lefiAntennaEnum
lefiAntennaSAF	lef/lefiLayer.hpp	/^  lefiAntennaSAF,$/;"	e	enum:lefiAntennaEnum
lefiAntennaSAR	clef/lefiLayer.h	/^  lefiAntennaSAR = 6,$/;"	e	enum:lefiAntennaEnum
lefiAntennaSAR	lef/lefiLayer.hpp	/^  lefiAntennaSAR,$/;"	e	enum:lefiAntennaEnum
lefiArray	clef/lefiTypedefs.h	/^typedef void *lefiArray;$/;"	t
lefiArray	lef/lefiArray.cpp	/^lefiArray::lefiArray()$/;"	f	class:lefiArray
lefiArray	lef/lefiArray.hpp	/^class lefiArray {$/;"	c
lefiArrayFloorPlan	clef/lefiTypedefs.h	/^typedef void *lefiArrayFloorPlan;$/;"	t
lefiArrayFloorPlan	lef/lefiArray.hpp	/^class lefiArrayFloorPlan {$/;"	c
lefiArrayFloorPlan_name	clef/xlefiArray.cpp	/^const char* lefiArrayFloorPlan_name (const ::lefiArrayFloorPlan* obj) {$/;"	f
lefiArrayFloorPlan_numPatterns	clef/xlefiArray.cpp	/^int lefiArrayFloorPlan_numPatterns (const ::lefiArrayFloorPlan* obj) {$/;"	f
lefiArrayFloorPlan_pattern	clef/xlefiArray.cpp	/^const ::lefiSitePattern* lefiArrayFloorPlan_pattern (const ::lefiArrayFloorPlan* obj, int  index) {$/;"	f
lefiArrayFloorPlan_typ	clef/xlefiArray.cpp	/^char* lefiArrayFloorPlan_typ (const ::lefiArrayFloorPlan* obj, int  index) {$/;"	f
lefiArray_canPlace	clef/xlefiArray.cpp	/^const ::lefiSitePattern* lefiArray_canPlace (const ::lefiArray* obj, int  index) {$/;"	f
lefiArray_cannotOccupy	clef/xlefiArray.cpp	/^const ::lefiSitePattern* lefiArray_cannotOccupy (const ::lefiArray* obj, int  index) {$/;"	f
lefiArray_defaultCap	clef/xlefiArray.cpp	/^double lefiArray_defaultCap (const ::lefiArray* obj, int  index) {$/;"	f
lefiArray_defaultCapMinPins	clef/xlefiArray.cpp	/^int lefiArray_defaultCapMinPins (const ::lefiArray* obj, int  index) {$/;"	f
lefiArray_floorPlanName	clef/xlefiArray.cpp	/^const char* lefiArray_floorPlanName (const ::lefiArray* obj, int  index) {$/;"	f
lefiArray_gcell	clef/xlefiArray.cpp	/^const ::lefiGcellPattern* lefiArray_gcell (const ::lefiArray* obj, int  index) {$/;"	f
lefiArray_h	lef/lefiArray.hpp	31;"	d
lefiArray_hasDefaultCap	clef/xlefiArray.cpp	/^int lefiArray_hasDefaultCap (const ::lefiArray* obj) {$/;"	f
lefiArray_name	clef/xlefiArray.cpp	/^const char* lefiArray_name (const ::lefiArray* obj) {$/;"	f
lefiArray_numCanPlace	clef/xlefiArray.cpp	/^int lefiArray_numCanPlace (const ::lefiArray* obj) {$/;"	f
lefiArray_numCannotOccupy	clef/xlefiArray.cpp	/^int lefiArray_numCannotOccupy (const ::lefiArray* obj) {$/;"	f
lefiArray_numDefaultCaps	clef/xlefiArray.cpp	/^int lefiArray_numDefaultCaps (const ::lefiArray* obj) {$/;"	f
lefiArray_numFloorPlans	clef/xlefiArray.cpp	/^int lefiArray_numFloorPlans (const ::lefiArray* obj) {$/;"	f
lefiArray_numGcell	clef/xlefiArray.cpp	/^int lefiArray_numGcell (const ::lefiArray* obj) {$/;"	f
lefiArray_numSitePattern	clef/xlefiArray.cpp	/^int lefiArray_numSitePattern (const ::lefiArray* obj) {$/;"	f
lefiArray_numSites	clef/xlefiArray.cpp	/^int lefiArray_numSites (const ::lefiArray* obj, int  index) {$/;"	f
lefiArray_numTrack	clef/xlefiArray.cpp	/^int lefiArray_numTrack (const ::lefiArray* obj) {$/;"	f
lefiArray_print	clef/xlefiArray.cpp	/^void lefiArray_print (const ::lefiArray* obj, FILE*  f) {$/;"	f
lefiArray_site	clef/xlefiArray.cpp	/^const ::lefiSitePattern* lefiArray_site (const ::lefiArray* obj, int  floorIndex, int  siteIndex) {$/;"	f
lefiArray_sitePattern	clef/xlefiArray.cpp	/^const ::lefiSitePattern* lefiArray_sitePattern (const ::lefiArray* obj, int  index) {$/;"	f
lefiArray_siteType	clef/xlefiArray.cpp	/^const char* lefiArray_siteType (const ::lefiArray* obj, int  floorIndex, int  siteIndex) {$/;"	f
lefiArray_tableSize	clef/xlefiArray.cpp	/^int lefiArray_tableSize (const ::lefiArray* obj) {$/;"	f
lefiArray_track	clef/xlefiArray.cpp	/^const ::lefiTrackPattern* lefiArray_track (const ::lefiArray* obj, int  index) {$/;"	f
lefiBoolean	lef/lefiDefs.hpp	/^typedef int lefiBoolean;$/;"	t
lefiCalcTime	lef/lefiTBExt.cpp	/^lefiCalcTime()$/;"	f
lefiCorrectionEdge	clef/lefiTypedefs.h	/^typedef void *lefiCorrectionEdge;$/;"	t
lefiCorrectionEdge	lef/lefiCrossTalk.cpp	/^lefiCorrectionEdge::lefiCorrectionEdge()$/;"	f	class:lefiCorrectionEdge
lefiCorrectionEdge	lef/lefiCrossTalk.hpp	/^class lefiCorrectionEdge {$/;"	c
lefiCorrectionResistance	clef/lefiTypedefs.h	/^typedef void *lefiCorrectionResistance;$/;"	t
lefiCorrectionResistance	lef/lefiCrossTalk.cpp	/^lefiCorrectionResistance::lefiCorrectionResistance()$/;"	f	class:lefiCorrectionResistance
lefiCorrectionResistance	lef/lefiCrossTalk.hpp	/^class lefiCorrectionResistance {$/;"	c
lefiCorrectionTable	clef/lefiTypedefs.h	/^typedef void *lefiCorrectionTable;$/;"	t
lefiCorrectionTable	lef/lefiCrossTalk.cpp	/^lefiCorrectionTable::lefiCorrectionTable()$/;"	f	class:lefiCorrectionTable
lefiCorrectionTable	lef/lefiCrossTalk.hpp	/^class lefiCorrectionTable {$/;"	c
lefiCorrectionVictim	clef/lefiTypedefs.h	/^typedef void *lefiCorrectionVictim;$/;"	t
lefiCorrectionVictim	lef/lefiCrossTalk.cpp	/^lefiCorrectionVictim::lefiCorrectionVictim(double d)$/;"	f	class:lefiCorrectionVictim
lefiCorrectionVictim	lef/lefiCrossTalk.hpp	/^class lefiCorrectionVictim {$/;"	c
lefiCrossTalk_h	lef/lefiCrossTalk.hpp	31;"	d
lefiDebug	clef/xlefiDebug.cpp	/^int lefiDebug (int  num) {$/;"	f
lefiDebug	lef/lefiDebug.cpp	/^lefiDebug(int num)$/;"	f
lefiDebug_h	lef/lefiDebug.hpp	31;"	d
lefiDensity	clef/lefiTypedefs.h	/^typedef void *lefiDensity;$/;"	t
lefiDensity	lef/lefiMacro.cpp	/^lefiDensity::lefiDensity()$/;"	f	class:lefiDensity
lefiDensity	lef/lefiMacro.hpp	/^class lefiDensity {$/;"	c
lefiDensity_densityValue	clef/xlefiMacro.cpp	/^double lefiDensity_densityValue (const ::lefiDensity* obj, int  index, int  rectIndex) {$/;"	f
lefiDensity_getRect	clef/xlefiMacro.cpp	/^::lefiGeomRect lefiDensity_getRect (const ::lefiDensity* obj, int  index, int  rectIndex) {$/;"	f
lefiDensity_layerName	clef/xlefiMacro.cpp	/^char* lefiDensity_layerName (const ::lefiDensity* obj, int  index) {$/;"	f
lefiDensity_numLayer	clef/xlefiMacro.cpp	/^int lefiDensity_numLayer (const ::lefiDensity* obj) {$/;"	f
lefiDensity_numRects	clef/xlefiMacro.cpp	/^int lefiDensity_numRects (const ::lefiDensity* obj, int  index) {$/;"	f
lefiDensity_print	clef/xlefiMacro.cpp	/^void lefiDensity_print (const ::lefiDensity* obj, FILE*  f) {$/;"	f
lefiError	clef/xlefiDebug.cpp	/^void lefiError (int  check, int  msgNum, const char*  msg) {$/;"	f
lefiError	lef/lefiDebug.cpp	/^lefiError(int           check,$/;"	f
lefiGcellPattern	clef/lefiTypedefs.h	/^typedef void *lefiGcellPattern;$/;"	t
lefiGcellPattern	lef/lefiMisc.cpp	/^lefiGcellPattern::lefiGcellPattern()$/;"	f	class:lefiGcellPattern
lefiGcellPattern	lef/lefiMisc.hpp	/^class lefiGcellPattern {$/;"	c
lefiGcellPattern_name	clef/xlefiMisc.cpp	/^const char* lefiGcellPattern_name (const ::lefiGcellPattern* obj) {$/;"	f
lefiGcellPattern_numCRs	clef/xlefiMisc.cpp	/^int lefiGcellPattern_numCRs (const ::lefiGcellPattern* obj) {$/;"	f
lefiGcellPattern_print	clef/xlefiMisc.cpp	/^void lefiGcellPattern_print (const ::lefiGcellPattern* obj, FILE*  f) {$/;"	f
lefiGcellPattern_space	clef/xlefiMisc.cpp	/^double lefiGcellPattern_space (const ::lefiGcellPattern* obj) {$/;"	f
lefiGcellPattern_start	clef/xlefiMisc.cpp	/^double lefiGcellPattern_start (const ::lefiGcellPattern* obj) {$/;"	f
lefiGeomClassE	clef/lefiMisc.h	/^  lefiGeomClassE = 14,$/;"	e	enum:lefiGeomEnum
lefiGeomClassE	lef/lefiMisc.hpp	/^  lefiGeomClassE,$/;"	e	enum:lefiGeomEnum
lefiGeomEnd	clef/lefiMisc.h	/^  lefiGeomEnd = 15$/;"	e	enum:lefiGeomEnum
lefiGeomEnd	lef/lefiMisc.hpp	/^  lefiGeomEnd$/;"	e	enum:lefiGeomEnum
lefiGeomEnum	clef/lefiMisc.h	/^enum lefiGeomEnum {$/;"	g
lefiGeomEnum	lef/lefiMisc.hpp	/^enum lefiGeomEnum {$/;"	g
lefiGeomLayerE	clef/lefiMisc.h	/^  lefiGeomLayerE = 1,$/;"	e	enum:lefiGeomEnum
lefiGeomLayerE	lef/lefiMisc.hpp	/^  lefiGeomLayerE,$/;"	e	enum:lefiGeomEnum
lefiGeomLayerExceptPgNetE	clef/lefiMisc.h	/^  lefiGeomLayerExceptPgNetE = 2,$/;"	e	enum:lefiGeomEnum
lefiGeomLayerExceptPgNetE	lef/lefiMisc.hpp	/^  lefiGeomLayerExceptPgNetE,$/;"	e	enum:lefiGeomEnum
lefiGeomLayerMinSpacingE	clef/lefiMisc.h	/^  lefiGeomLayerMinSpacingE = 3,$/;"	e	enum:lefiGeomEnum
lefiGeomLayerMinSpacingE	lef/lefiMisc.hpp	/^  lefiGeomLayerMinSpacingE,$/;"	e	enum:lefiGeomEnum
lefiGeomLayerRuleWidthE	clef/lefiMisc.h	/^  lefiGeomLayerRuleWidthE = 4,$/;"	e	enum:lefiGeomEnum
lefiGeomLayerRuleWidthE	lef/lefiMisc.hpp	/^  lefiGeomLayerRuleWidthE,$/;"	e	enum:lefiGeomEnum
lefiGeomPath	clef/lefiTypedefs.h	/^struct lefiGeomPath {$/;"	s
lefiGeomPath	lef/lefiMisc.hpp	/^struct lefiGeomPath {$/;"	s
lefiGeomPathE	clef/lefiMisc.h	/^  lefiGeomPathE = 6,$/;"	e	enum:lefiGeomEnum
lefiGeomPathE	lef/lefiMisc.hpp	/^  lefiGeomPathE,$/;"	e	enum:lefiGeomEnum
lefiGeomPathIter	clef/lefiTypedefs.h	/^struct lefiGeomPathIter {$/;"	s
lefiGeomPathIter	lef/lefiMisc.hpp	/^struct lefiGeomPathIter {$/;"	s
lefiGeomPathIterE	clef/lefiMisc.h	/^  lefiGeomPathIterE = 7,$/;"	e	enum:lefiGeomEnum
lefiGeomPathIterE	lef/lefiMisc.hpp	/^  lefiGeomPathIterE,$/;"	e	enum:lefiGeomEnum
lefiGeomPolygon	clef/lefiTypedefs.h	/^struct lefiGeomPolygon {$/;"	s
lefiGeomPolygon	lef/lefiMisc.hpp	/^struct lefiGeomPolygon {$/;"	s
lefiGeomPolygonE	clef/lefiMisc.h	/^  lefiGeomPolygonE = 10,$/;"	e	enum:lefiGeomEnum
lefiGeomPolygonE	lef/lefiMisc.hpp	/^  lefiGeomPolygonE,$/;"	e	enum:lefiGeomEnum
lefiGeomPolygonIter	clef/lefiTypedefs.h	/^struct lefiGeomPolygonIter {$/;"	s
lefiGeomPolygonIter	lef/lefiMisc.hpp	/^struct lefiGeomPolygonIter {$/;"	s
lefiGeomPolygonIterE	clef/lefiMisc.h	/^  lefiGeomPolygonIterE = 11,$/;"	e	enum:lefiGeomEnum
lefiGeomPolygonIterE	lef/lefiMisc.hpp	/^  lefiGeomPolygonIterE,$/;"	e	enum:lefiGeomEnum
lefiGeomRect	clef/lefiTypedefs.h	/^struct lefiGeomRect {$/;"	s
lefiGeomRect	lef/lefiMisc.hpp	/^struct lefiGeomRect {$/;"	s
lefiGeomRectE	clef/lefiMisc.h	/^  lefiGeomRectE = 8,$/;"	e	enum:lefiGeomEnum
lefiGeomRectE	lef/lefiMisc.hpp	/^  lefiGeomRectE,$/;"	e	enum:lefiGeomEnum
lefiGeomRectIter	clef/lefiTypedefs.h	/^struct lefiGeomRectIter {$/;"	s
lefiGeomRectIter	lef/lefiMisc.hpp	/^struct lefiGeomRectIter {$/;"	s
lefiGeomRectIterE	clef/lefiMisc.h	/^  lefiGeomRectIterE = 9,$/;"	e	enum:lefiGeomEnum
lefiGeomRectIterE	lef/lefiMisc.hpp	/^  lefiGeomRectIterE,$/;"	e	enum:lefiGeomEnum
lefiGeomUnknown	clef/lefiMisc.h	/^  lefiGeomUnknown = 0,$/;"	e	enum:lefiGeomEnum
lefiGeomUnknown	lef/lefiMisc.hpp	/^  lefiGeomUnknown = 0,$/;"	e	enum:lefiGeomEnum
lefiGeomVia	clef/lefiTypedefs.h	/^struct lefiGeomVia {$/;"	s
lefiGeomVia	lef/lefiMisc.hpp	/^struct lefiGeomVia {$/;"	s
lefiGeomViaE	clef/lefiMisc.h	/^  lefiGeomViaE = 12,$/;"	e	enum:lefiGeomEnum
lefiGeomViaE	lef/lefiMisc.hpp	/^  lefiGeomViaE,$/;"	e	enum:lefiGeomEnum
lefiGeomViaIter	clef/lefiTypedefs.h	/^struct lefiGeomViaIter {$/;"	s
lefiGeomViaIter	lef/lefiMisc.hpp	/^struct lefiGeomViaIter {$/;"	s
lefiGeomViaIterE	clef/lefiMisc.h	/^  lefiGeomViaIterE = 13,$/;"	e	enum:lefiGeomEnum
lefiGeomViaIterE	lef/lefiMisc.hpp	/^  lefiGeomViaIterE,$/;"	e	enum:lefiGeomEnum
lefiGeomWidthE	clef/lefiMisc.h	/^  lefiGeomWidthE = 5,$/;"	e	enum:lefiGeomEnum
lefiGeomWidthE	lef/lefiMisc.hpp	/^  lefiGeomWidthE,$/;"	e	enum:lefiGeomEnum
lefiGeometries	clef/lefiTypedefs.h	/^typedef void *lefiGeometries;$/;"	t
lefiGeometries	lef/lefiMisc.cpp	/^lefiGeometries::lefiGeometries()$/;"	f	class:lefiGeometries
lefiGeometries	lef/lefiMisc.hpp	/^class lefiGeometries {$/;"	c
lefiGeometries_getClass	clef/xlefiMisc.cpp	/^char* lefiGeometries_getClass (const ::lefiGeometries* obj, int  index) {$/;"	f
lefiGeometries_getLayer	clef/xlefiMisc.cpp	/^char* lefiGeometries_getLayer (const ::lefiGeometries* obj, int  index) {$/;"	f
lefiGeometries_getLayerMinSpacing	clef/xlefiMisc.cpp	/^double lefiGeometries_getLayerMinSpacing (const ::lefiGeometries* obj, int  index) {$/;"	f
lefiGeometries_getLayerRuleWidth	clef/xlefiMisc.cpp	/^double lefiGeometries_getLayerRuleWidth (const ::lefiGeometries* obj, int  index) {$/;"	f
lefiGeometries_getPath	clef/xlefiMisc.cpp	/^struct ::lefiGeomPath* lefiGeometries_getPath (const ::lefiGeometries* obj, int  index) {$/;"	f
lefiGeometries_getPathIter	clef/xlefiMisc.cpp	/^struct ::lefiGeomPathIter* lefiGeometries_getPathIter (const ::lefiGeometries* obj, int  index) {$/;"	f
lefiGeometries_getPolygon	clef/xlefiMisc.cpp	/^struct ::lefiGeomPolygon* lefiGeometries_getPolygon (const ::lefiGeometries* obj, int  index) {$/;"	f
lefiGeometries_getPolygonIter	clef/xlefiMisc.cpp	/^struct ::lefiGeomPolygonIter* lefiGeometries_getPolygonIter (const ::lefiGeometries* obj, int  index) {$/;"	f
lefiGeometries_getRect	clef/xlefiMisc.cpp	/^struct ::lefiGeomRect* lefiGeometries_getRect (const ::lefiGeometries* obj, int  index) {$/;"	f
lefiGeometries_getRectIter	clef/xlefiMisc.cpp	/^struct ::lefiGeomRectIter* lefiGeometries_getRectIter (const ::lefiGeometries* obj, int  index) {$/;"	f
lefiGeometries_getVia	clef/xlefiMisc.cpp	/^struct ::lefiGeomVia* lefiGeometries_getVia (const ::lefiGeometries* obj, int  index) {$/;"	f
lefiGeometries_getViaIter	clef/xlefiMisc.cpp	/^struct ::lefiGeomViaIter* lefiGeometries_getViaIter (const ::lefiGeometries* obj, int  index) {$/;"	f
lefiGeometries_getWidth	clef/xlefiMisc.cpp	/^double lefiGeometries_getWidth (const ::lefiGeometries* obj, int  index) {$/;"	f
lefiGeometries_hasLayerExceptPgNet	clef/xlefiMisc.cpp	/^int lefiGeometries_hasLayerExceptPgNet (const ::lefiGeometries* obj, int  index) {$/;"	f
lefiGeometries_itemType	clef/xlefiMisc.cpp	/^enum ::lefiGeomEnum lefiGeometries_itemType (const ::lefiGeometries* obj, int  index) {$/;"	f
lefiGeometries_numItems	clef/xlefiMisc.cpp	/^int lefiGeometries_numItems (const ::lefiGeometries* obj) {$/;"	f
lefiGeometries_print	clef/xlefiMisc.cpp	/^void lefiGeometries_print (const ::lefiGeometries* obj, FILE*  f) {$/;"	f
lefiIRDrop	clef/lefiTypedefs.h	/^typedef void *lefiIRDrop;$/;"	t
lefiIRDrop	lef/lefiMisc.cpp	/^lefiIRDrop::lefiIRDrop()$/;"	f	class:lefiIRDrop
lefiIRDrop	lef/lefiMisc.hpp	/^class lefiIRDrop {$/;"	c
lefiIRDrop_name	clef/xlefiMisc.cpp	/^const char* lefiIRDrop_name (const ::lefiIRDrop* obj) {$/;"	f
lefiIRDrop_numValues	clef/xlefiMisc.cpp	/^int lefiIRDrop_numValues (const ::lefiIRDrop* obj) {$/;"	f
lefiIRDrop_print	clef/xlefiMisc.cpp	/^void lefiIRDrop_print (const ::lefiIRDrop* obj, FILE*  f) {$/;"	f
lefiIRDrop_value1	clef/xlefiMisc.cpp	/^double lefiIRDrop_value1 (const ::lefiIRDrop* obj, int  index) {$/;"	f
lefiIRDrop_value2	clef/xlefiMisc.cpp	/^double lefiIRDrop_value2 (const ::lefiIRDrop* obj, int  index) {$/;"	f
lefiInfluence	clef/lefiTypedefs.h	/^typedef void *lefiInfluence;$/;"	t
lefiInfluence	lef/lefiLayer.cpp	/^lefiInfluence::lefiInfluence()$/;"	f	class:lefiInfluence
lefiInfluence	lef/lefiLayer.hpp	/^class lefiInfluence {$/;"	c
lefiInfluence_distance	clef/xlefiLayer.cpp	/^double lefiInfluence_distance (const ::lefiInfluence* obj, int  index) {$/;"	f
lefiInfluence_numInfluenceEntry	clef/xlefiLayer.cpp	/^int lefiInfluence_numInfluenceEntry (const ::lefiInfluence* obj) {$/;"	f
lefiInfluence_spacing	clef/xlefiLayer.cpp	/^double lefiInfluence_spacing (const ::lefiInfluence* obj, int  index) {$/;"	f
lefiInfluence_width	clef/xlefiLayer.cpp	/^double lefiInfluence_width (const ::lefiInfluence* obj, int  index) {$/;"	f
lefiInvalidMemoryPolicy	lef/lefiDefs.hpp	/^  lefiInvalidMemoryPolicy = 23950,$/;"	e	enum:__anon5
lefiInvalidObject	lef/lefiDefs.hpp	/^  lefiInvalidObject = 41713, $/;"	e	enum:__anon4
lefiKRDEFS_h	lef/lefiKRDefs.hpp	31;"	d
lefiLayer	clef/lefiTypedefs.h	/^typedef void *lefiLayer;$/;"	t
lefiLayer	lef/lefiLayer.cpp	/^lefiLayer::lefiLayer()$/;"	f	class:lefiLayer
lefiLayer	lef/lefiLayer.hpp	/^class lefiLayer {$/;"	c
lefiLayerDensity	clef/lefiTypedefs.h	/^typedef void *lefiLayerDensity;$/;"	t
lefiLayerDensity	lef/lefiLayer.cpp	/^lefiLayerDensity::lefiLayerDensity()$/;"	f	class:lefiLayerDensity
lefiLayerDensity	lef/lefiLayer.hpp	/^class lefiLayerDensity {$/;"	c
lefiLayerDensity_cutArea	clef/xlefiLayer.cpp	/^double lefiLayerDensity_cutArea (const ::lefiLayerDensity* obj, int  index) {$/;"	f
lefiLayerDensity_frequency	clef/xlefiLayer.cpp	/^double lefiLayerDensity_frequency (const ::lefiLayerDensity* obj, int  index) {$/;"	f
lefiLayerDensity_hasOneEntry	clef/xlefiLayer.cpp	/^int lefiLayerDensity_hasOneEntry (const ::lefiLayerDensity* obj) {$/;"	f
lefiLayerDensity_numCutareas	clef/xlefiLayer.cpp	/^int lefiLayerDensity_numCutareas (const ::lefiLayerDensity* obj) {$/;"	f
lefiLayerDensity_numFrequency	clef/xlefiLayer.cpp	/^int lefiLayerDensity_numFrequency (const ::lefiLayerDensity* obj) {$/;"	f
lefiLayerDensity_numTableEntries	clef/xlefiLayer.cpp	/^int lefiLayerDensity_numTableEntries (const ::lefiLayerDensity* obj) {$/;"	f
lefiLayerDensity_numWidths	clef/xlefiLayer.cpp	/^int lefiLayerDensity_numWidths (const ::lefiLayerDensity* obj) {$/;"	f
lefiLayerDensity_oneEntry	clef/xlefiLayer.cpp	/^double lefiLayerDensity_oneEntry (const ::lefiLayerDensity* obj) {$/;"	f
lefiLayerDensity_tableEntry	clef/xlefiLayer.cpp	/^double lefiLayerDensity_tableEntry (const ::lefiLayerDensity* obj, int  index) {$/;"	f
lefiLayerDensity_type	clef/xlefiLayer.cpp	/^char* lefiLayerDensity_type (const ::lefiLayerDensity* obj) {$/;"	f
lefiLayerDensity_width	clef/xlefiLayer.cpp	/^double lefiLayerDensity_width (const ::lefiLayerDensity* obj, int  index) {$/;"	f
lefiLayer_accurrent	clef/xlefiLayer.cpp	/^const ::lefiLayerDensity* lefiLayer_accurrent (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_antennaArea	clef/xlefiLayer.cpp	/^double lefiLayer_antennaArea (const ::lefiLayer* obj) {$/;"	f
lefiLayer_antennaLength	clef/xlefiLayer.cpp	/^double lefiLayer_antennaLength (const ::lefiLayer* obj) {$/;"	f
lefiLayer_antennaModel	clef/xlefiLayer.cpp	/^const ::lefiAntennaModel* lefiLayer_antennaModel (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_area	clef/xlefiLayer.cpp	/^double lefiLayer_area (const ::lefiLayer* obj) {$/;"	f
lefiLayer_arrayCuts	clef/xlefiLayer.cpp	/^int lefiLayer_arrayCuts (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_arraySpacing	clef/xlefiLayer.cpp	/^double lefiLayer_arraySpacing (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_capMultiplier	clef/xlefiLayer.cpp	/^double lefiLayer_capMultiplier (const ::lefiLayer* obj) {$/;"	f
lefiLayer_capacitance	clef/xlefiLayer.cpp	/^double lefiLayer_capacitance (const ::lefiLayer* obj) {$/;"	f
lefiLayer_capacitanceArray	clef/xlefiLayer.cpp	/^void lefiLayer_capacitanceArray (const ::lefiLayer* obj, int*  numPoints, double**  widths, double**  resValues) {$/;"	f
lefiLayer_currentDensityArray	clef/xlefiLayer.cpp	/^void lefiLayer_currentDensityArray (const ::lefiLayer* obj, int*  numPoints, double**  widths, double**  current) {$/;"	f
lefiLayer_currentDensityPoint	clef/xlefiLayer.cpp	/^double lefiLayer_currentDensityPoint (const ::lefiLayer* obj) {$/;"	f
lefiLayer_cutSpacing	clef/xlefiLayer.cpp	/^double lefiLayer_cutSpacing (const ::lefiLayer* obj) {$/;"	f
lefiLayer_dccurrent	clef/xlefiLayer.cpp	/^const ::lefiLayerDensity* lefiLayer_dccurrent (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_densityCheckStep	clef/xlefiLayer.cpp	/^double lefiLayer_densityCheckStep (const ::lefiLayer* obj) {$/;"	f
lefiLayer_densityCheckWindowLength	clef/xlefiLayer.cpp	/^double lefiLayer_densityCheckWindowLength (const ::lefiLayer* obj) {$/;"	f
lefiLayer_densityCheckWindowWidth	clef/xlefiLayer.cpp	/^double lefiLayer_densityCheckWindowWidth (const ::lefiLayer* obj) {$/;"	f
lefiLayer_diagMinEdgeLength	clef/xlefiLayer.cpp	/^double lefiLayer_diagMinEdgeLength (const ::lefiLayer* obj) {$/;"	f
lefiLayer_diagPitch	clef/xlefiLayer.cpp	/^double lefiLayer_diagPitch (const ::lefiLayer* obj) {$/;"	f
lefiLayer_diagPitchX	clef/xlefiLayer.cpp	/^double lefiLayer_diagPitchX (const ::lefiLayer* obj) {$/;"	f
lefiLayer_diagPitchY	clef/xlefiLayer.cpp	/^double lefiLayer_diagPitchY (const ::lefiLayer* obj) {$/;"	f
lefiLayer_diagSpacing	clef/xlefiLayer.cpp	/^double lefiLayer_diagSpacing (const ::lefiLayer* obj) {$/;"	f
lefiLayer_diagWidth	clef/xlefiLayer.cpp	/^double lefiLayer_diagWidth (const ::lefiLayer* obj) {$/;"	f
lefiLayer_direction	clef/xlefiLayer.cpp	/^const char* lefiLayer_direction (const ::lefiLayer* obj) {$/;"	f
lefiLayer_edgeCap	clef/xlefiLayer.cpp	/^double lefiLayer_edgeCap (const ::lefiLayer* obj) {$/;"	f
lefiLayer_enclosureExceptExtraCut	clef/xlefiLayer.cpp	/^double lefiLayer_enclosureExceptExtraCut (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_enclosureMinLength	clef/xlefiLayer.cpp	/^double lefiLayer_enclosureMinLength (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_enclosureMinWidth	clef/xlefiLayer.cpp	/^double lefiLayer_enclosureMinWidth (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_enclosureOverhang1	clef/xlefiLayer.cpp	/^double lefiLayer_enclosureOverhang1 (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_enclosureOverhang2	clef/xlefiLayer.cpp	/^double lefiLayer_enclosureOverhang2 (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_fillActiveSpacing	clef/xlefiLayer.cpp	/^double lefiLayer_fillActiveSpacing (const ::lefiLayer* obj) {$/;"	f
lefiLayer_h	lef/lefiLayer.hpp	31;"	d
lefiLayer_hasAccurrentDensity	clef/xlefiLayer.cpp	/^int lefiLayer_hasAccurrentDensity (const ::lefiLayer* obj) {$/;"	f
lefiLayer_hasAntennaArea	clef/xlefiLayer.cpp	/^int lefiLayer_hasAntennaArea (const ::lefiLayer* obj) {$/;"	f
lefiLayer_hasAntennaLength	clef/xlefiLayer.cpp	/^int lefiLayer_hasAntennaLength (const ::lefiLayer* obj) {$/;"	f
lefiLayer_hasArea	clef/xlefiLayer.cpp	/^int lefiLayer_hasArea (const ::lefiLayer* obj) {$/;"	f
lefiLayer_hasArraySpacing	clef/xlefiLayer.cpp	/^int lefiLayer_hasArraySpacing (const ::lefiLayer* obj) {$/;"	f
lefiLayer_hasCapMultiplier	clef/xlefiLayer.cpp	/^int lefiLayer_hasCapMultiplier (const ::lefiLayer* obj) {$/;"	f
lefiLayer_hasCapacitance	clef/xlefiLayer.cpp	/^int lefiLayer_hasCapacitance (const ::lefiLayer* obj) {$/;"	f
lefiLayer_hasCapacitanceArray	clef/xlefiLayer.cpp	/^int lefiLayer_hasCapacitanceArray (const ::lefiLayer* obj) {$/;"	f
lefiLayer_hasCurrentDensityArray	clef/xlefiLayer.cpp	/^int lefiLayer_hasCurrentDensityArray (const ::lefiLayer* obj) {$/;"	f
lefiLayer_hasCurrentDensityPoint	clef/xlefiLayer.cpp	/^int lefiLayer_hasCurrentDensityPoint (const ::lefiLayer* obj) {$/;"	f
lefiLayer_hasDccurrentDensity	clef/xlefiLayer.cpp	/^int lefiLayer_hasDccurrentDensity (const ::lefiLayer* obj) {$/;"	f
lefiLayer_hasDensityCheckStep	clef/xlefiLayer.cpp	/^int lefiLayer_hasDensityCheckStep (const ::lefiLayer* obj) {$/;"	f
lefiLayer_hasDensityCheckWindow	clef/xlefiLayer.cpp	/^int lefiLayer_hasDensityCheckWindow (const ::lefiLayer* obj) {$/;"	f
lefiLayer_hasDiagMinEdgeLength	clef/xlefiLayer.cpp	/^int lefiLayer_hasDiagMinEdgeLength (const ::lefiLayer* obj) {$/;"	f
lefiLayer_hasDiagPitch	clef/xlefiLayer.cpp	/^int lefiLayer_hasDiagPitch (const ::lefiLayer* obj) {$/;"	f
lefiLayer_hasDiagSpacing	clef/xlefiLayer.cpp	/^int lefiLayer_hasDiagSpacing (const ::lefiLayer* obj) {$/;"	f
lefiLayer_hasDiagWidth	clef/xlefiLayer.cpp	/^int lefiLayer_hasDiagWidth (const ::lefiLayer* obj) {$/;"	f
lefiLayer_hasDirection	clef/xlefiLayer.cpp	/^int lefiLayer_hasDirection (const ::lefiLayer* obj) {$/;"	f
lefiLayer_hasEdgeCap	clef/xlefiLayer.cpp	/^int lefiLayer_hasEdgeCap (const ::lefiLayer* obj) {$/;"	f
lefiLayer_hasEnclosureExceptExtraCut	clef/xlefiLayer.cpp	/^int lefiLayer_hasEnclosureExceptExtraCut (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_hasEnclosureMinLength	clef/xlefiLayer.cpp	/^int lefiLayer_hasEnclosureMinLength (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_hasEnclosureRule	clef/xlefiLayer.cpp	/^int lefiLayer_hasEnclosureRule (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_hasEnclosureWidth	clef/xlefiLayer.cpp	/^int lefiLayer_hasEnclosureWidth (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_hasFillActiveSpacing	clef/xlefiLayer.cpp	/^int lefiLayer_hasFillActiveSpacing (const ::lefiLayer* obj) {$/;"	f
lefiLayer_hasHeight	clef/xlefiLayer.cpp	/^int lefiLayer_hasHeight (const ::lefiLayer* obj) {$/;"	f
lefiLayer_hasLayerType	clef/xlefiLayer.cpp	/^int lefiLayer_hasLayerType (const ::lefiLayer* obj) {$/;"	f
lefiLayer_hasLongArray	clef/xlefiLayer.cpp	/^int lefiLayer_hasLongArray (const ::lefiLayer* obj) {$/;"	f
lefiLayer_hasMask	clef/xlefiLayer.cpp	/^int lefiLayer_hasMask (const ::lefiLayer* obj) {$/;"	f
lefiLayer_hasMaxAdjacentSlotSpacing	clef/xlefiLayer.cpp	/^int lefiLayer_hasMaxAdjacentSlotSpacing (const ::lefiLayer* obj) {$/;"	f
lefiLayer_hasMaxCoaxialSlotSpacing	clef/xlefiLayer.cpp	/^int lefiLayer_hasMaxCoaxialSlotSpacing (const ::lefiLayer* obj) {$/;"	f
lefiLayer_hasMaxEdgeSlotSpacing	clef/xlefiLayer.cpp	/^int lefiLayer_hasMaxEdgeSlotSpacing (const ::lefiLayer* obj) {$/;"	f
lefiLayer_hasMaxFloatingArea	clef/xlefiLayer.cpp	/^int lefiLayer_hasMaxFloatingArea (const ::lefiLayer* obj) {$/;"	f
lefiLayer_hasMaximumDensity	clef/xlefiLayer.cpp	/^int lefiLayer_hasMaximumDensity (const ::lefiLayer* obj) {$/;"	f
lefiLayer_hasMaxwidth	clef/xlefiLayer.cpp	/^int lefiLayer_hasMaxwidth (const ::lefiLayer* obj) {$/;"	f
lefiLayer_hasMinenclosedareaWidth	clef/xlefiLayer.cpp	/^int lefiLayer_hasMinenclosedareaWidth (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_hasMinimumDensity	clef/xlefiLayer.cpp	/^int lefiLayer_hasMinimumDensity (const ::lefiLayer* obj) {$/;"	f
lefiLayer_hasMinimumcutConnection	clef/xlefiLayer.cpp	/^int lefiLayer_hasMinimumcutConnection (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_hasMinimumcutNumCuts	clef/xlefiLayer.cpp	/^int lefiLayer_hasMinimumcutNumCuts (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_hasMinimumcutWithin	clef/xlefiLayer.cpp	/^int lefiLayer_hasMinimumcutWithin (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_hasMinstep	clef/xlefiLayer.cpp	/^int lefiLayer_hasMinstep (const ::lefiLayer* obj) {$/;"	f
lefiLayer_hasMinstepLengthsum	clef/xlefiLayer.cpp	/^int lefiLayer_hasMinstepLengthsum (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_hasMinstepMaxedges	clef/xlefiLayer.cpp	/^int lefiLayer_hasMinstepMaxedges (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_hasMinstepMinAdjLength	clef/xlefiLayer.cpp	/^int lefiLayer_hasMinstepMinAdjLength (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_hasMinstepMinBetLength	clef/xlefiLayer.cpp	/^int lefiLayer_hasMinstepMinBetLength (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_hasMinstepType	clef/xlefiLayer.cpp	/^int lefiLayer_hasMinstepType (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_hasMinstepXSameCorners	clef/xlefiLayer.cpp	/^int lefiLayer_hasMinstepXSameCorners (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_hasMinwidth	clef/xlefiLayer.cpp	/^int lefiLayer_hasMinwidth (const ::lefiLayer* obj) {$/;"	f
lefiLayer_hasOffset	clef/xlefiLayer.cpp	/^int lefiLayer_hasOffset (const ::lefiLayer* obj) {$/;"	f
lefiLayer_hasPitch	clef/xlefiLayer.cpp	/^int lefiLayer_hasPitch (const ::lefiLayer* obj) {$/;"	f
lefiLayer_hasPreferEnclosureRule	clef/xlefiLayer.cpp	/^int lefiLayer_hasPreferEnclosureRule (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_hasPreferEnclosureWidth	clef/xlefiLayer.cpp	/^int lefiLayer_hasPreferEnclosureWidth (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_hasProtrusion	clef/xlefiLayer.cpp	/^int lefiLayer_hasProtrusion (const ::lefiLayer* obj) {$/;"	f
lefiLayer_hasResistance	clef/xlefiLayer.cpp	/^int lefiLayer_hasResistance (const ::lefiLayer* obj) {$/;"	f
lefiLayer_hasResistanceArray	clef/xlefiLayer.cpp	/^int lefiLayer_hasResistanceArray (const ::lefiLayer* obj) {$/;"	f
lefiLayer_hasResistancePerCut	clef/xlefiLayer.cpp	/^int lefiLayer_hasResistancePerCut (const ::lefiLayer* obj) {$/;"	f
lefiLayer_hasShrinkage	clef/xlefiLayer.cpp	/^int lefiLayer_hasShrinkage (const ::lefiLayer* obj) {$/;"	f
lefiLayer_hasSlotLength	clef/xlefiLayer.cpp	/^int lefiLayer_hasSlotLength (const ::lefiLayer* obj) {$/;"	f
lefiLayer_hasSlotWidth	clef/xlefiLayer.cpp	/^int lefiLayer_hasSlotWidth (const ::lefiLayer* obj) {$/;"	f
lefiLayer_hasSlotWireLength	clef/xlefiLayer.cpp	/^int lefiLayer_hasSlotWireLength (const ::lefiLayer* obj) {$/;"	f
lefiLayer_hasSlotWireWidth	clef/xlefiLayer.cpp	/^int lefiLayer_hasSlotWireWidth (const ::lefiLayer* obj) {$/;"	f
lefiLayer_hasSpacingAdjacent	clef/xlefiLayer.cpp	/^int lefiLayer_hasSpacingAdjacent (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_hasSpacingAdjacentExcept	clef/xlefiLayer.cpp	/^int lefiLayer_hasSpacingAdjacentExcept (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_hasSpacingArea	clef/xlefiLayer.cpp	/^int lefiLayer_hasSpacingArea (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_hasSpacingCenterToCenter	clef/xlefiLayer.cpp	/^int lefiLayer_hasSpacingCenterToCenter (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_hasSpacingEndOfLine	clef/xlefiLayer.cpp	/^int lefiLayer_hasSpacingEndOfLine (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_hasSpacingEndOfNotchWidth	clef/xlefiLayer.cpp	/^int lefiLayer_hasSpacingEndOfNotchWidth (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_hasSpacingLayerStack	clef/xlefiLayer.cpp	/^int lefiLayer_hasSpacingLayerStack (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_hasSpacingLengthThreshold	clef/xlefiLayer.cpp	/^int lefiLayer_hasSpacingLengthThreshold (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_hasSpacingLengthThresholdRange	clef/xlefiLayer.cpp	/^int lefiLayer_hasSpacingLengthThresholdRange (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_hasSpacingName	clef/xlefiLayer.cpp	/^int lefiLayer_hasSpacingName (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_hasSpacingNotchLength	clef/xlefiLayer.cpp	/^int lefiLayer_hasSpacingNotchLength (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_hasSpacingNumber	clef/xlefiLayer.cpp	/^int lefiLayer_hasSpacingNumber (const ::lefiLayer* obj) {$/;"	f
lefiLayer_hasSpacingParallelOverlap	clef/xlefiLayer.cpp	/^int lefiLayer_hasSpacingParallelOverlap (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_hasSpacingParellelEdge	clef/xlefiLayer.cpp	/^int lefiLayer_hasSpacingParellelEdge (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_hasSpacingRange	clef/xlefiLayer.cpp	/^int lefiLayer_hasSpacingRange (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_hasSpacingRangeInfluence	clef/xlefiLayer.cpp	/^int lefiLayer_hasSpacingRangeInfluence (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_hasSpacingRangeInfluenceRange	clef/xlefiLayer.cpp	/^int lefiLayer_hasSpacingRangeInfluenceRange (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_hasSpacingRangeRange	clef/xlefiLayer.cpp	/^int lefiLayer_hasSpacingRangeRange (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_hasSpacingRangeUseLengthThreshold	clef/xlefiLayer.cpp	/^int lefiLayer_hasSpacingRangeUseLengthThreshold (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_hasSpacingSamenet	clef/xlefiLayer.cpp	/^int lefiLayer_hasSpacingSamenet (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_hasSpacingSamenetPGonly	clef/xlefiLayer.cpp	/^int lefiLayer_hasSpacingSamenetPGonly (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_hasSpacingTableOrtho	clef/xlefiLayer.cpp	/^int lefiLayer_hasSpacingTableOrtho (const ::lefiLayer* obj) {$/;"	f
lefiLayer_hasSpacingTwoEdges	clef/xlefiLayer.cpp	/^int lefiLayer_hasSpacingTwoEdges (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_hasSplitWireWidth	clef/xlefiLayer.cpp	/^int lefiLayer_hasSplitWireWidth (const ::lefiLayer* obj) {$/;"	f
lefiLayer_hasThickness	clef/xlefiLayer.cpp	/^int lefiLayer_hasThickness (const ::lefiLayer* obj) {$/;"	f
lefiLayer_hasType	clef/xlefiLayer.cpp	/^int lefiLayer_hasType (const ::lefiLayer* obj) {$/;"	f
lefiLayer_hasViaWidth	clef/xlefiLayer.cpp	/^int lefiLayer_hasViaWidth (const ::lefiLayer* obj) {$/;"	f
lefiLayer_hasWidth	clef/xlefiLayer.cpp	/^int lefiLayer_hasWidth (const ::lefiLayer* obj) {$/;"	f
lefiLayer_hasWireExtension	clef/xlefiLayer.cpp	/^int lefiLayer_hasWireExtension (const ::lefiLayer* obj) {$/;"	f
lefiLayer_hasXYDiagPitch	clef/xlefiLayer.cpp	/^int lefiLayer_hasXYDiagPitch (const ::lefiLayer* obj) {$/;"	f
lefiLayer_hasXYOffset	clef/xlefiLayer.cpp	/^int lefiLayer_hasXYOffset (const ::lefiLayer* obj) {$/;"	f
lefiLayer_hasXYPitch	clef/xlefiLayer.cpp	/^int lefiLayer_hasXYPitch (const ::lefiLayer* obj) {$/;"	f
lefiLayer_height	clef/xlefiLayer.cpp	/^double lefiLayer_height (const ::lefiLayer* obj) {$/;"	f
lefiLayer_layerType	clef/xlefiLayer.cpp	/^const char* lefiLayer_layerType (const ::lefiLayer* obj) {$/;"	f
lefiLayer_mask	clef/xlefiLayer.cpp	/^int lefiLayer_mask (const ::lefiLayer* obj) {$/;"	f
lefiLayer_maxAdjacentSlotSpacing	clef/xlefiLayer.cpp	/^double lefiLayer_maxAdjacentSlotSpacing (const ::lefiLayer* obj) {$/;"	f
lefiLayer_maxCoaxialSlotSpacing	clef/xlefiLayer.cpp	/^double lefiLayer_maxCoaxialSlotSpacing (const ::lefiLayer* obj) {$/;"	f
lefiLayer_maxEdgeSlotSpacing	clef/xlefiLayer.cpp	/^double lefiLayer_maxEdgeSlotSpacing (const ::lefiLayer* obj) {$/;"	f
lefiLayer_maxFloatingArea	clef/xlefiLayer.cpp	/^double lefiLayer_maxFloatingArea (const ::lefiLayer* obj) {$/;"	f
lefiLayer_maximumDensity	clef/xlefiLayer.cpp	/^double lefiLayer_maximumDensity (const ::lefiLayer* obj) {$/;"	f
lefiLayer_maxwidth	clef/xlefiLayer.cpp	/^double lefiLayer_maxwidth (const ::lefiLayer* obj) {$/;"	f
lefiLayer_minSizeLength	clef/xlefiLayer.cpp	/^double lefiLayer_minSizeLength (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_minSizeWidth	clef/xlefiLayer.cpp	/^double lefiLayer_minSizeWidth (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_minenclosedarea	clef/xlefiLayer.cpp	/^double lefiLayer_minenclosedarea (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_minenclosedareaWidth	clef/xlefiLayer.cpp	/^double lefiLayer_minenclosedareaWidth (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_minimumDensity	clef/xlefiLayer.cpp	/^double lefiLayer_minimumDensity (const ::lefiLayer* obj) {$/;"	f
lefiLayer_minimumcut	clef/xlefiLayer.cpp	/^int lefiLayer_minimumcut (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_minimumcutConnection	clef/xlefiLayer.cpp	/^const char* lefiLayer_minimumcutConnection (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_minimumcutDistance	clef/xlefiLayer.cpp	/^double lefiLayer_minimumcutDistance (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_minimumcutLength	clef/xlefiLayer.cpp	/^double lefiLayer_minimumcutLength (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_minimumcutWidth	clef/xlefiLayer.cpp	/^double lefiLayer_minimumcutWidth (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_minimumcutWithin	clef/xlefiLayer.cpp	/^double lefiLayer_minimumcutWithin (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_minstep	clef/xlefiLayer.cpp	/^double lefiLayer_minstep (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_minstepLengthsum	clef/xlefiLayer.cpp	/^double lefiLayer_minstepLengthsum (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_minstepMaxedges	clef/xlefiLayer.cpp	/^int lefiLayer_minstepMaxedges (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_minstepMinAdjLength	clef/xlefiLayer.cpp	/^double lefiLayer_minstepMinAdjLength (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_minstepMinBetLength	clef/xlefiLayer.cpp	/^double lefiLayer_minstepMinBetLength (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_minstepType	clef/xlefiLayer.cpp	/^char* lefiLayer_minstepType (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_minwidth	clef/xlefiLayer.cpp	/^double lefiLayer_minwidth (const ::lefiLayer* obj) {$/;"	f
lefiLayer_name	clef/xlefiLayer.cpp	/^char* lefiLayer_name (const ::lefiLayer* obj) {$/;"	f
lefiLayer_need58PropsProcessing	clef/xlefiLayer.cpp	/^int lefiLayer_need58PropsProcessing (const ::lefiLayer* obj) {$/;"	f
lefiLayer_numAccurrentDensity	clef/xlefiLayer.cpp	/^int lefiLayer_numAccurrentDensity (const ::lefiLayer* obj) {$/;"	f
lefiLayer_numAntennaModel	clef/xlefiLayer.cpp	/^int lefiLayer_numAntennaModel (const ::lefiLayer* obj) {$/;"	f
lefiLayer_numArrayCuts	clef/xlefiLayer.cpp	/^int lefiLayer_numArrayCuts (const ::lefiLayer* obj) {$/;"	f
lefiLayer_numDccurrentDensity	clef/xlefiLayer.cpp	/^int lefiLayer_numDccurrentDensity (const ::lefiLayer* obj) {$/;"	f
lefiLayer_numEnclosure	clef/xlefiLayer.cpp	/^int lefiLayer_numEnclosure (const ::lefiLayer* obj) {$/;"	f
lefiLayer_numMinSize	clef/xlefiLayer.cpp	/^int lefiLayer_numMinSize (const ::lefiLayer* obj) {$/;"	f
lefiLayer_numMinenclosedarea	clef/xlefiLayer.cpp	/^int lefiLayer_numMinenclosedarea (const ::lefiLayer* obj) {$/;"	f
lefiLayer_numMinimumcut	clef/xlefiLayer.cpp	/^int lefiLayer_numMinimumcut (const ::lefiLayer* obj) {$/;"	f
lefiLayer_numMinstep	clef/xlefiLayer.cpp	/^int lefiLayer_numMinstep (const ::lefiLayer* obj) {$/;"	f
lefiLayer_numPreferEnclosure	clef/xlefiLayer.cpp	/^int lefiLayer_numPreferEnclosure (const ::lefiLayer* obj) {$/;"	f
lefiLayer_numProps	clef/xlefiLayer.cpp	/^int lefiLayer_numProps (const ::lefiLayer* obj) {$/;"	f
lefiLayer_numSpacing	clef/xlefiLayer.cpp	/^int lefiLayer_numSpacing (const ::lefiLayer* obj) {$/;"	f
lefiLayer_offset	clef/xlefiLayer.cpp	/^double lefiLayer_offset (const ::lefiLayer* obj) {$/;"	f
lefiLayer_offsetX	clef/xlefiLayer.cpp	/^double lefiLayer_offsetX (const ::lefiLayer* obj) {$/;"	f
lefiLayer_offsetY	clef/xlefiLayer.cpp	/^double lefiLayer_offsetY (const ::lefiLayer* obj) {$/;"	f
lefiLayer_orthogonal	clef/xlefiLayer.cpp	/^const ::lefiOrthogonal* lefiLayer_orthogonal (const ::lefiLayer* obj) {$/;"	f
lefiLayer_pitch	clef/xlefiLayer.cpp	/^double lefiLayer_pitch (const ::lefiLayer* obj) {$/;"	f
lefiLayer_pitchX	clef/xlefiLayer.cpp	/^double lefiLayer_pitchX (const ::lefiLayer* obj) {$/;"	f
lefiLayer_pitchY	clef/xlefiLayer.cpp	/^double lefiLayer_pitchY (const ::lefiLayer* obj) {$/;"	f
lefiLayer_preferEnclosureMinWidth	clef/xlefiLayer.cpp	/^double lefiLayer_preferEnclosureMinWidth (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_preferEnclosureOverhang1	clef/xlefiLayer.cpp	/^double lefiLayer_preferEnclosureOverhang1 (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_preferEnclosureOverhang2	clef/xlefiLayer.cpp	/^double lefiLayer_preferEnclosureOverhang2 (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_print	clef/xlefiLayer.cpp	/^void lefiLayer_print (const ::lefiLayer* obj, FILE*  f) {$/;"	f
lefiLayer_propIsNumber	clef/xlefiLayer.cpp	/^int lefiLayer_propIsNumber (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_propIsString	clef/xlefiLayer.cpp	/^int lefiLayer_propIsString (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_propName	clef/xlefiLayer.cpp	/^const char* lefiLayer_propName (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_propNumber	clef/xlefiLayer.cpp	/^double lefiLayer_propNumber (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_propType	clef/xlefiLayer.cpp	/^const char lefiLayer_propType (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_propValue	clef/xlefiLayer.cpp	/^const char* lefiLayer_propValue (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_protrusionLength	clef/xlefiLayer.cpp	/^double lefiLayer_protrusionLength (const ::lefiLayer* obj) {$/;"	f
lefiLayer_protrusionWidth1	clef/xlefiLayer.cpp	/^double lefiLayer_protrusionWidth1 (const ::lefiLayer* obj) {$/;"	f
lefiLayer_protrusionWidth2	clef/xlefiLayer.cpp	/^double lefiLayer_protrusionWidth2 (const ::lefiLayer* obj) {$/;"	f
lefiLayer_resistance	clef/xlefiLayer.cpp	/^double lefiLayer_resistance (const ::lefiLayer* obj) {$/;"	f
lefiLayer_resistanceArray	clef/xlefiLayer.cpp	/^void lefiLayer_resistanceArray (const ::lefiLayer* obj, int*  numPoints, double**  widths, double**  capValues) {$/;"	f
lefiLayer_resistancePerCut	clef/xlefiLayer.cpp	/^double lefiLayer_resistancePerCut (const ::lefiLayer* obj) {$/;"	f
lefiLayer_shrinkage	clef/xlefiLayer.cpp	/^double lefiLayer_shrinkage (const ::lefiLayer* obj) {$/;"	f
lefiLayer_slotLength	clef/xlefiLayer.cpp	/^double lefiLayer_slotLength (const ::lefiLayer* obj) {$/;"	f
lefiLayer_slotWidth	clef/xlefiLayer.cpp	/^double lefiLayer_slotWidth (const ::lefiLayer* obj) {$/;"	f
lefiLayer_slotWireLength	clef/xlefiLayer.cpp	/^double lefiLayer_slotWireLength (const ::lefiLayer* obj) {$/;"	f
lefiLayer_slotWireWidth	clef/xlefiLayer.cpp	/^double lefiLayer_slotWireWidth (const ::lefiLayer* obj) {$/;"	f
lefiLayer_spacing	clef/xlefiLayer.cpp	/^double lefiLayer_spacing (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_spacingAdjacentCuts	clef/xlefiLayer.cpp	/^int lefiLayer_spacingAdjacentCuts (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_spacingAdjacentWithin	clef/xlefiLayer.cpp	/^double lefiLayer_spacingAdjacentWithin (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_spacingArea	clef/xlefiLayer.cpp	/^double lefiLayer_spacingArea (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_spacingEndOfNotchLength	clef/xlefiLayer.cpp	/^double lefiLayer_spacingEndOfNotchLength (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_spacingEndOfNotchSpacing	clef/xlefiLayer.cpp	/^double lefiLayer_spacingEndOfNotchSpacing (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_spacingEndOfNotchWidth	clef/xlefiLayer.cpp	/^double lefiLayer_spacingEndOfNotchWidth (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_spacingEolWidth	clef/xlefiLayer.cpp	/^double lefiLayer_spacingEolWidth (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_spacingEolWithin	clef/xlefiLayer.cpp	/^double lefiLayer_spacingEolWithin (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_spacingLengthThreshold	clef/xlefiLayer.cpp	/^double lefiLayer_spacingLengthThreshold (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_spacingLengthThresholdRangeMax	clef/xlefiLayer.cpp	/^double lefiLayer_spacingLengthThresholdRangeMax (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_spacingLengthThresholdRangeMin	clef/xlefiLayer.cpp	/^double lefiLayer_spacingLengthThresholdRangeMin (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_spacingName	clef/xlefiLayer.cpp	/^char* lefiLayer_spacingName (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_spacingNotchLength	clef/xlefiLayer.cpp	/^double lefiLayer_spacingNotchLength (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_spacingParSpace	clef/xlefiLayer.cpp	/^double lefiLayer_spacingParSpace (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_spacingParWithin	clef/xlefiLayer.cpp	/^double lefiLayer_spacingParWithin (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_spacingRangeInfluence	clef/xlefiLayer.cpp	/^double lefiLayer_spacingRangeInfluence (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_spacingRangeInfluenceMax	clef/xlefiLayer.cpp	/^double lefiLayer_spacingRangeInfluenceMax (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_spacingRangeInfluenceMin	clef/xlefiLayer.cpp	/^double lefiLayer_spacingRangeInfluenceMin (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_spacingRangeMax	clef/xlefiLayer.cpp	/^double lefiLayer_spacingRangeMax (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_spacingRangeMin	clef/xlefiLayer.cpp	/^double lefiLayer_spacingRangeMin (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_spacingRangeRangeMax	clef/xlefiLayer.cpp	/^double lefiLayer_spacingRangeRangeMax (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_spacingRangeRangeMin	clef/xlefiLayer.cpp	/^double lefiLayer_spacingRangeRangeMin (const ::lefiLayer* obj, int  index) {$/;"	f
lefiLayer_splitWireWidth	clef/xlefiLayer.cpp	/^double lefiLayer_splitWireWidth (const ::lefiLayer* obj) {$/;"	f
lefiLayer_thickness	clef/xlefiLayer.cpp	/^double lefiLayer_thickness (const ::lefiLayer* obj) {$/;"	f
lefiLayer_type	clef/xlefiLayer.cpp	/^const char* lefiLayer_type (const ::lefiLayer* obj) {$/;"	f
lefiLayer_viaWidth	clef/xlefiLayer.cpp	/^double lefiLayer_viaWidth (const ::lefiLayer* obj) {$/;"	f
lefiLayer_width	clef/xlefiLayer.cpp	/^double lefiLayer_width (const ::lefiLayer* obj) {$/;"	f
lefiLayer_wireExtension	clef/xlefiLayer.cpp	/^double lefiLayer_wireExtension (const ::lefiLayer* obj) {$/;"	f
lefiMacro	clef/lefiTypedefs.h	/^typedef void *lefiMacro;$/;"	t
lefiMacro	lef/lefiMacro.cpp	/^lefiMacro::lefiMacro()$/;"	f	class:lefiMacro
lefiMacro	lef/lefiMacro.hpp	/^class lefiMacro {$/;"	c
lefiMacroForeign	lef/lefiMacro.cpp	/^lefiMacroForeign::lefiMacroForeign(const char *name,$/;"	f	class:lefiMacroForeign
lefiMacroForeign	lef/lefiMacro.hpp	/^class lefiMacroForeign {$/;"	c
lefiMacroSite	lef/lefiMacro.cpp	/^lefiMacroSite::lefiMacroSite(const char            *name, $/;"	f	class:lefiMacroSite
lefiMacroSite	lef/lefiMacro.hpp	/^class lefiMacroSite {$/;"	c
lefiMacro_EEQ	clef/xlefiMacro.cpp	/^const char* lefiMacro_EEQ (const ::lefiMacro* obj) {$/;"	f
lefiMacro_LEQ	clef/xlefiMacro.cpp	/^const char* lefiMacro_LEQ (const ::lefiMacro* obj) {$/;"	f
lefiMacro_clockType	clef/xlefiMacro.cpp	/^const char* lefiMacro_clockType (const ::lefiMacro* obj) {$/;"	f
lefiMacro_foreignName	clef/xlefiMacro.cpp	/^const char* lefiMacro_foreignName (const ::lefiMacro* obj, int  index) {$/;"	f
lefiMacro_foreignOrient	clef/xlefiMacro.cpp	/^int lefiMacro_foreignOrient (const ::lefiMacro* obj, int  index) {$/;"	f
lefiMacro_foreignOrientStr	clef/xlefiMacro.cpp	/^const char* lefiMacro_foreignOrientStr (const ::lefiMacro* obj, int  index) {$/;"	f
lefiMacro_foreignX	clef/xlefiMacro.cpp	/^double lefiMacro_foreignX (const ::lefiMacro* obj, int  index) {$/;"	f
lefiMacro_foreignY	clef/xlefiMacro.cpp	/^double lefiMacro_foreignY (const ::lefiMacro* obj, int  index) {$/;"	f
lefiMacro_generate	clef/xlefiMacro.cpp	/^void lefiMacro_generate (const ::lefiMacro* obj, char**  name1, char**  name2) {$/;"	f
lefiMacro_generator	clef/xlefiMacro.cpp	/^const char* lefiMacro_generator (const ::lefiMacro* obj) {$/;"	f
lefiMacro_h	lef/lefiMacro.hpp	31;"	d
lefiMacro_has90Symmetry	clef/xlefiMacro.cpp	/^int lefiMacro_has90Symmetry (const ::lefiMacro* obj) {$/;"	f
lefiMacro_hasClass	clef/xlefiMacro.cpp	/^int lefiMacro_hasClass (const ::lefiMacro* obj) {$/;"	f
lefiMacro_hasClockType	clef/xlefiMacro.cpp	/^int lefiMacro_hasClockType (const ::lefiMacro* obj) {$/;"	f
lefiMacro_hasEEQ	clef/xlefiMacro.cpp	/^int lefiMacro_hasEEQ (const ::lefiMacro* obj) {$/;"	f
lefiMacro_hasForeign	clef/xlefiMacro.cpp	/^int lefiMacro_hasForeign (const ::lefiMacro* obj) {$/;"	f
lefiMacro_hasForeignOrient	clef/xlefiMacro.cpp	/^int lefiMacro_hasForeignOrient (const ::lefiMacro* obj, int  index) {$/;"	f
lefiMacro_hasForeignOrigin	clef/xlefiMacro.cpp	/^int lefiMacro_hasForeignOrigin (const ::lefiMacro* obj, int  index) {$/;"	f
lefiMacro_hasForeignPoint	clef/xlefiMacro.cpp	/^int lefiMacro_hasForeignPoint (const ::lefiMacro* obj, int  index) {$/;"	f
lefiMacro_hasGenerate	clef/xlefiMacro.cpp	/^int lefiMacro_hasGenerate (const ::lefiMacro* obj) {$/;"	f
lefiMacro_hasGenerator	clef/xlefiMacro.cpp	/^int lefiMacro_hasGenerator (const ::lefiMacro* obj) {$/;"	f
lefiMacro_hasLEQ	clef/xlefiMacro.cpp	/^int lefiMacro_hasLEQ (const ::lefiMacro* obj) {$/;"	f
lefiMacro_hasOrigin	clef/xlefiMacro.cpp	/^int lefiMacro_hasOrigin (const ::lefiMacro* obj) {$/;"	f
lefiMacro_hasPower	clef/xlefiMacro.cpp	/^int lefiMacro_hasPower (const ::lefiMacro* obj) {$/;"	f
lefiMacro_hasSiteName	clef/xlefiMacro.cpp	/^int lefiMacro_hasSiteName (const ::lefiMacro* obj) {$/;"	f
lefiMacro_hasSitePattern	clef/xlefiMacro.cpp	/^int lefiMacro_hasSitePattern (const ::lefiMacro* obj) {$/;"	f
lefiMacro_hasSize	clef/xlefiMacro.cpp	/^int lefiMacro_hasSize (const ::lefiMacro* obj) {$/;"	f
lefiMacro_hasSource	clef/xlefiMacro.cpp	/^int lefiMacro_hasSource (const ::lefiMacro* obj) {$/;"	f
lefiMacro_hasXSymmetry	clef/xlefiMacro.cpp	/^int lefiMacro_hasXSymmetry (const ::lefiMacro* obj) {$/;"	f
lefiMacro_hasYSymmetry	clef/xlefiMacro.cpp	/^int lefiMacro_hasYSymmetry (const ::lefiMacro* obj) {$/;"	f
lefiMacro_isBuffer	clef/xlefiMacro.cpp	/^int lefiMacro_isBuffer (const ::lefiMacro* obj) {$/;"	f
lefiMacro_isFixedMask	clef/xlefiMacro.cpp	/^int lefiMacro_isFixedMask (const ::lefiMacro* obj) {$/;"	f
lefiMacro_isInverter	clef/xlefiMacro.cpp	/^int lefiMacro_isInverter (const ::lefiMacro* obj) {$/;"	f
lefiMacro_macroClass	clef/xlefiMacro.cpp	/^const char* lefiMacro_macroClass (const ::lefiMacro* obj) {$/;"	f
lefiMacro_name	clef/xlefiMacro.cpp	/^const char* lefiMacro_name (const ::lefiMacro* obj) {$/;"	f
lefiMacro_numForeigns	clef/xlefiMacro.cpp	/^int lefiMacro_numForeigns (const ::lefiMacro* obj) {$/;"	f
lefiMacro_numProperties	clef/xlefiMacro.cpp	/^int lefiMacro_numProperties (const ::lefiMacro* obj) {$/;"	f
lefiMacro_numSitePattern	clef/xlefiMacro.cpp	/^int lefiMacro_numSitePattern (const ::lefiMacro* obj) {$/;"	f
lefiMacro_originX	clef/xlefiMacro.cpp	/^double lefiMacro_originX (const ::lefiMacro* obj) {$/;"	f
lefiMacro_originY	clef/xlefiMacro.cpp	/^double lefiMacro_originY (const ::lefiMacro* obj) {$/;"	f
lefiMacro_power	clef/xlefiMacro.cpp	/^double lefiMacro_power (const ::lefiMacro* obj) {$/;"	f
lefiMacro_print	clef/xlefiMacro.cpp	/^void lefiMacro_print (const ::lefiMacro* obj, FILE*  f) {$/;"	f
lefiMacro_propIsNumber	clef/xlefiMacro.cpp	/^int lefiMacro_propIsNumber (const ::lefiMacro* obj, int  index) {$/;"	f
lefiMacro_propIsString	clef/xlefiMacro.cpp	/^int lefiMacro_propIsString (const ::lefiMacro* obj, int  index) {$/;"	f
lefiMacro_propName	clef/xlefiMacro.cpp	/^const char* lefiMacro_propName (const ::lefiMacro* obj, int  index) {$/;"	f
lefiMacro_propNum	clef/xlefiMacro.cpp	/^double lefiMacro_propNum (const ::lefiMacro* obj, int  index) {$/;"	f
lefiMacro_propType	clef/xlefiMacro.cpp	/^const char lefiMacro_propType (const ::lefiMacro* obj, int  index) {$/;"	f
lefiMacro_propValue	clef/xlefiMacro.cpp	/^const char* lefiMacro_propValue (const ::lefiMacro* obj, int  index) {$/;"	f
lefiMacro_siteName	clef/xlefiMacro.cpp	/^const char* lefiMacro_siteName (const ::lefiMacro* obj) {$/;"	f
lefiMacro_sitePattern	clef/xlefiMacro.cpp	/^const ::lefiSitePattern* lefiMacro_sitePattern (const ::lefiMacro* obj, int  index) {$/;"	f
lefiMacro_sizeX	clef/xlefiMacro.cpp	/^double lefiMacro_sizeX (const ::lefiMacro* obj) {$/;"	f
lefiMacro_sizeY	clef/xlefiMacro.cpp	/^double lefiMacro_sizeY (const ::lefiMacro* obj) {$/;"	f
lefiMacro_source	clef/xlefiMacro.cpp	/^const char* lefiMacro_source (const ::lefiMacro* obj) {$/;"	f
lefiMaxStackVia	clef/lefiTypedefs.h	/^typedef void *lefiMaxStackVia;$/;"	t
lefiMaxStackVia	lef/lefiMisc.cpp	/^lefiMaxStackVia::lefiMaxStackVia()$/;"	f	class:lefiMaxStackVia
lefiMaxStackVia	lef/lefiMisc.hpp	/^class lefiMaxStackVia {$/;"	c
lefiMaxStackVia_hasMaxStackViaRange	clef/xlefiMisc.cpp	/^int lefiMaxStackVia_hasMaxStackViaRange (const ::lefiMaxStackVia* obj) {$/;"	f
lefiMaxStackVia_maxStackVia	clef/xlefiMisc.cpp	/^int lefiMaxStackVia_maxStackVia (const ::lefiMaxStackVia* obj) {$/;"	f
lefiMaxStackVia_maxStackViaBottomLayer	clef/xlefiMisc.cpp	/^const char* lefiMaxStackVia_maxStackViaBottomLayer (const ::lefiMaxStackVia* obj) {$/;"	f
lefiMaxStackVia_maxStackViaTopLayer	clef/xlefiMisc.cpp	/^const char* lefiMaxStackVia_maxStackViaTopLayer (const ::lefiMaxStackVia* obj) {$/;"	f
lefiMaxStackVia_print	clef/xlefiMisc.cpp	/^void lefiMaxStackVia_print (const ::lefiMaxStackVia* obj, FILE*  f) {$/;"	f
lefiMemoryPolicy_e	lef/lefiDefs.hpp	/^} lefiMemoryPolicy_e;$/;"	t	typeref:enum:__anon5
lefiMinFeature	clef/lefiTypedefs.h	/^typedef void *lefiMinFeature;$/;"	t
lefiMinFeature	lef/lefiMisc.cpp	/^lefiMinFeature::lefiMinFeature()$/;"	f	class:lefiMinFeature
lefiMinFeature	lef/lefiMisc.hpp	/^class lefiMinFeature {$/;"	c
lefiMinFeature_one	clef/xlefiMisc.cpp	/^double lefiMinFeature_one (const ::lefiMinFeature* obj) {$/;"	f
lefiMinFeature_print	clef/xlefiMisc.cpp	/^void lefiMinFeature_print (const ::lefiMinFeature* obj, FILE*  f) {$/;"	f
lefiMinFeature_two	clef/xlefiMisc.cpp	/^double lefiMinFeature_two (const ::lefiMinFeature* obj) {$/;"	f
lefiMisc_h	lef/lefiMisc.hpp	31;"	d
lefiNerr	lef/lefrReader.cpp	/^lefiNerr(int i)$/;"	f
lefiNoiseEdge	clef/lefiTypedefs.h	/^typedef void *lefiNoiseEdge;$/;"	t
lefiNoiseEdge	lef/lefiCrossTalk.cpp	/^lefiNoiseEdge::lefiNoiseEdge()$/;"	f	class:lefiNoiseEdge
lefiNoiseEdge	lef/lefiCrossTalk.hpp	/^class lefiNoiseEdge {$/;"	c
lefiNoiseMargin	clef/lefiTypedefs.h	/^struct lefiNoiseMargin {$/;"	s
lefiNoiseMargin	lef/lefiCrossTalk.hpp	/^struct lefiNoiseMargin {$/;"	s
lefiNoiseResistance	clef/lefiTypedefs.h	/^typedef void *lefiNoiseResistance;$/;"	t
lefiNoiseResistance	lef/lefiCrossTalk.cpp	/^lefiNoiseResistance::lefiNoiseResistance()$/;"	f	class:lefiNoiseResistance
lefiNoiseResistance	lef/lefiCrossTalk.hpp	/^class lefiNoiseResistance {$/;"	c
lefiNoiseResistance_num	clef/xlefiCrossTalk.cpp	/^double lefiNoiseResistance_num (const ::lefiNoiseResistance* obj, int  index) {$/;"	f
lefiNoiseResistance_numNums	clef/xlefiCrossTalk.cpp	/^int lefiNoiseResistance_numNums (const ::lefiNoiseResistance* obj) {$/;"	f
lefiNoiseResistance_numVictims	clef/xlefiCrossTalk.cpp	/^int lefiNoiseResistance_numVictims (const ::lefiNoiseResistance* obj) {$/;"	f
lefiNoiseResistance_victim	clef/xlefiCrossTalk.cpp	/^const ::lefiNoiseVictim* lefiNoiseResistance_victim (const ::lefiNoiseResistance* obj, int  index) {$/;"	f
lefiNoiseTable	clef/lefiTypedefs.h	/^typedef void *lefiNoiseTable;$/;"	t
lefiNoiseTable	lef/lefiCrossTalk.cpp	/^lefiNoiseTable::lefiNoiseTable()$/;"	f	class:lefiNoiseTable
lefiNoiseTable	lef/lefiCrossTalk.hpp	/^class lefiNoiseTable {$/;"	c
lefiNoiseVictim	clef/lefiTypedefs.h	/^typedef void *lefiNoiseVictim;$/;"	t
lefiNoiseVictim	lef/lefiCrossTalk.cpp	/^lefiNoiseVictim::lefiNoiseVictim(double d)$/;"	f	class:lefiNoiseVictim
lefiNoiseVictim	lef/lefiCrossTalk.hpp	/^class lefiNoiseVictim {$/;"	c
lefiNoiseVictim_length	clef/xlefiCrossTalk.cpp	/^double lefiNoiseVictim_length (const ::lefiNoiseVictim* obj) {$/;"	f
lefiNoiseVictim_noise	clef/xlefiCrossTalk.cpp	/^double lefiNoiseVictim_noise (const ::lefiNoiseVictim* obj, int  index) {$/;"	f
lefiNoiseVictim_numNoises	clef/xlefiCrossTalk.cpp	/^int lefiNoiseVictim_numNoises (const ::lefiNoiseVictim* obj) {$/;"	f
lefiNonDefault	clef/lefiTypedefs.h	/^typedef void *lefiNonDefault;$/;"	t
lefiNonDefault	lef/lefiNonDefault.cpp	/^lefiNonDefault::lefiNonDefault()$/;"	f	class:lefiNonDefault
lefiNonDefault	lef/lefiNonDefault.hpp	/^class lefiNonDefault {$/;"	c
lefiNonDefault_cutLayerName	clef/xlefiNonDefault.cpp	/^const char* lefiNonDefault_cutLayerName (const ::lefiNonDefault* obj, int  index) {$/;"	f
lefiNonDefault_h	lef/lefiNonDefault.hpp	31;"	d
lefiNonDefault_hasHardspacing	clef/xlefiNonDefault.cpp	/^int lefiNonDefault_hasHardspacing (const ::lefiNonDefault* obj) {$/;"	f
lefiNonDefault_hasLayerCapacitance	clef/xlefiNonDefault.cpp	/^int lefiNonDefault_hasLayerCapacitance (const ::lefiNonDefault* obj, int  index) {$/;"	f
lefiNonDefault_hasLayerDiagWidth	clef/xlefiNonDefault.cpp	/^int lefiNonDefault_hasLayerDiagWidth (const ::lefiNonDefault* obj, int  index) {$/;"	f
lefiNonDefault_hasLayerEdgeCap	clef/xlefiNonDefault.cpp	/^int lefiNonDefault_hasLayerEdgeCap (const ::lefiNonDefault* obj, int  index) {$/;"	f
lefiNonDefault_hasLayerResistance	clef/xlefiNonDefault.cpp	/^int lefiNonDefault_hasLayerResistance (const ::lefiNonDefault* obj, int  index) {$/;"	f
lefiNonDefault_hasLayerSpacing	clef/xlefiNonDefault.cpp	/^int lefiNonDefault_hasLayerSpacing (const ::lefiNonDefault* obj, int  index) {$/;"	f
lefiNonDefault_hasLayerWidth	clef/xlefiNonDefault.cpp	/^int lefiNonDefault_hasLayerWidth (const ::lefiNonDefault* obj, int  index) {$/;"	f
lefiNonDefault_hasLayerWireExtension	clef/xlefiNonDefault.cpp	/^int lefiNonDefault_hasLayerWireExtension (const ::lefiNonDefault* obj, int  index) {$/;"	f
lefiNonDefault_layerCapacitance	clef/xlefiNonDefault.cpp	/^double lefiNonDefault_layerCapacitance (const ::lefiNonDefault* obj, int  index) {$/;"	f
lefiNonDefault_layerDiagWidth	clef/xlefiNonDefault.cpp	/^double lefiNonDefault_layerDiagWidth (const ::lefiNonDefault* obj, int  index) {$/;"	f
lefiNonDefault_layerEdgeCap	clef/xlefiNonDefault.cpp	/^double lefiNonDefault_layerEdgeCap (const ::lefiNonDefault* obj, int  index) {$/;"	f
lefiNonDefault_layerName	clef/xlefiNonDefault.cpp	/^const char* lefiNonDefault_layerName (const ::lefiNonDefault* obj, int  index) {$/;"	f
lefiNonDefault_layerResistance	clef/xlefiNonDefault.cpp	/^double lefiNonDefault_layerResistance (const ::lefiNonDefault* obj, int  index) {$/;"	f
lefiNonDefault_layerSpacing	clef/xlefiNonDefault.cpp	/^double lefiNonDefault_layerSpacing (const ::lefiNonDefault* obj, int  index) {$/;"	f
lefiNonDefault_layerWidth	clef/xlefiNonDefault.cpp	/^double lefiNonDefault_layerWidth (const ::lefiNonDefault* obj, int  index) {$/;"	f
lefiNonDefault_layerWireExtension	clef/xlefiNonDefault.cpp	/^double lefiNonDefault_layerWireExtension (const ::lefiNonDefault* obj, int  index) {$/;"	f
lefiNonDefault_name	clef/xlefiNonDefault.cpp	/^const char* lefiNonDefault_name (const ::lefiNonDefault* obj) {$/;"	f
lefiNonDefault_numCuts	clef/xlefiNonDefault.cpp	/^int lefiNonDefault_numCuts (const ::lefiNonDefault* obj, int  index) {$/;"	f
lefiNonDefault_numLayers	clef/xlefiNonDefault.cpp	/^int lefiNonDefault_numLayers (const ::lefiNonDefault* obj) {$/;"	f
lefiNonDefault_numMinCuts	clef/xlefiNonDefault.cpp	/^int lefiNonDefault_numMinCuts (const ::lefiNonDefault* obj) {$/;"	f
lefiNonDefault_numProps	clef/xlefiNonDefault.cpp	/^int lefiNonDefault_numProps (const ::lefiNonDefault* obj) {$/;"	f
lefiNonDefault_numSpacingRules	clef/xlefiNonDefault.cpp	/^int lefiNonDefault_numSpacingRules (const ::lefiNonDefault* obj) {$/;"	f
lefiNonDefault_numUseVia	clef/xlefiNonDefault.cpp	/^int lefiNonDefault_numUseVia (const ::lefiNonDefault* obj) {$/;"	f
lefiNonDefault_numUseViaRule	clef/xlefiNonDefault.cpp	/^int lefiNonDefault_numUseViaRule (const ::lefiNonDefault* obj) {$/;"	f
lefiNonDefault_numVias	clef/xlefiNonDefault.cpp	/^int lefiNonDefault_numVias (const ::lefiNonDefault* obj) {$/;"	f
lefiNonDefault_propIsNumber	clef/xlefiNonDefault.cpp	/^int lefiNonDefault_propIsNumber (const ::lefiNonDefault* obj, int  index) {$/;"	f
lefiNonDefault_propIsString	clef/xlefiNonDefault.cpp	/^int lefiNonDefault_propIsString (const ::lefiNonDefault* obj, int  index) {$/;"	f
lefiNonDefault_propName	clef/xlefiNonDefault.cpp	/^const char* lefiNonDefault_propName (const ::lefiNonDefault* obj, int  index) {$/;"	f
lefiNonDefault_propNumber	clef/xlefiNonDefault.cpp	/^double lefiNonDefault_propNumber (const ::lefiNonDefault* obj, int  index) {$/;"	f
lefiNonDefault_propType	clef/xlefiNonDefault.cpp	/^const char lefiNonDefault_propType (const ::lefiNonDefault* obj, int  index) {$/;"	f
lefiNonDefault_propValue	clef/xlefiNonDefault.cpp	/^const char* lefiNonDefault_propValue (const ::lefiNonDefault* obj, int  index) {$/;"	f
lefiNonDefault_spacingRule	clef/xlefiNonDefault.cpp	/^const ::lefiSpacing* lefiNonDefault_spacingRule (const ::lefiNonDefault* obj, int  index) {$/;"	f
lefiNonDefault_viaName	clef/xlefiNonDefault.cpp	/^const char* lefiNonDefault_viaName (const ::lefiNonDefault* obj, int  index) {$/;"	f
lefiNonDefault_viaRule	clef/xlefiNonDefault.cpp	/^const ::lefiVia* lefiNonDefault_viaRule (const ::lefiNonDefault* obj, int  index) {$/;"	f
lefiNonDefault_viaRuleName	clef/xlefiNonDefault.cpp	/^const char* lefiNonDefault_viaRuleName (const ::lefiNonDefault* obj, int  index) {$/;"	f
lefiNum	clef/lefiTypedefs.h	/^typedef struct lefiPoints lefiNum;$/;"	t	typeref:struct:lefiPoints
lefiNum	lef/lefiUtil.hpp	/^typedef struct lefiPoints lefiNum;$/;"	t	typeref:struct:lefiPoints
lefiNwarn	lef/lefrReader.cpp	/^lefiNwarn(int i)$/;"	f
lefiObjectType_e	lef/lefiDefs.hpp	/^} lefiObjectType_e;$/;"	t	typeref:enum:__anon4
lefiObstruction	clef/lefiTypedefs.h	/^typedef void *lefiObstruction;$/;"	t
lefiObstruction	lef/lefiMacro.cpp	/^lefiObstruction::lefiObstruction()$/;"	f	class:lefiObstruction
lefiObstruction	lef/lefiMacro.hpp	/^class lefiObstruction {$/;"	c
lefiObstruction_geometries	clef/xlefiMacro.cpp	/^const ::lefiGeometries* lefiObstruction_geometries (const ::lefiObstruction* obj) {$/;"	f
lefiObstruction_print	clef/xlefiMacro.cpp	/^void lefiObstruction_print (const ::lefiObstruction* obj, FILE*  f) {$/;"	f
lefiOrientStr	clef/xlefiUtil.cpp	/^char* lefiOrientStr (int  orient) {$/;"	f
lefiOrientStr	lef/lefiTBExt.cpp	/^lefiOrientStr(int orient)$/;"	f
lefiOrphanSubObjects	lef/lefiDefs.hpp	/^  lefiOrphanSubObjects,       \/\/ deep copy, no delete$/;"	e	enum:__anon5
lefiOrthogonal	clef/lefiTypedefs.h	/^typedef void *lefiOrthogonal;$/;"	t
lefiOrthogonal	lef/lefiLayer.cpp	/^lefiOrthogonal::lefiOrthogonal()$/;"	f	class:lefiOrthogonal
lefiOrthogonal	lef/lefiLayer.hpp	/^class lefiOrthogonal {$/;"	c
lefiOrthogonal_cutWithin	clef/xlefiLayer.cpp	/^double lefiOrthogonal_cutWithin (const ::lefiOrthogonal* obj, int  index) {$/;"	f
lefiOrthogonal_numOrthogonal	clef/xlefiLayer.cpp	/^int lefiOrthogonal_numOrthogonal (const ::lefiOrthogonal* obj) {$/;"	f
lefiOrthogonal_orthoSpacing	clef/xlefiLayer.cpp	/^double lefiOrthogonal_orthoSpacing (const ::lefiOrthogonal* obj, int  index) {$/;"	f
lefiParallel	clef/lefiTypedefs.h	/^typedef void *lefiParallel;$/;"	t
lefiParallel	lef/lefiLayer.cpp	/^lefiParallel::lefiParallel()$/;"	f	class:lefiParallel
lefiParallel	lef/lefiLayer.hpp	/^class lefiParallel {$/;"	c
lefiParallel_length	clef/xlefiLayer.cpp	/^double lefiParallel_length (const ::lefiParallel* obj, int  iLength) {$/;"	f
lefiParallel_numLength	clef/xlefiLayer.cpp	/^int lefiParallel_numLength (const ::lefiParallel* obj) {$/;"	f
lefiParallel_numWidth	clef/xlefiLayer.cpp	/^int lefiParallel_numWidth (const ::lefiParallel* obj) {$/;"	f
lefiParallel_width	clef/xlefiLayer.cpp	/^double lefiParallel_width (const ::lefiParallel* obj, int  iWidth) {$/;"	f
lefiParallel_widthSpacing	clef/xlefiLayer.cpp	/^double lefiParallel_widthSpacing (const ::lefiParallel* obj, int  iWidth, int  iWidthSpacing) {$/;"	f
lefiPin	clef/lefiTypedefs.h	/^typedef void *lefiPin;$/;"	t
lefiPin	lef/lefiMacro.cpp	/^lefiPin::lefiPin()$/;"	f	class:lefiPin
lefiPin	lef/lefiMacro.hpp	/^class lefiPin {$/;"	c
lefiPinAntennaModel	clef/lefiTypedefs.h	/^typedef void *lefiPinAntennaModel;$/;"	t
lefiPinAntennaModel	lef/lefiMacro.cpp	/^lefiPinAntennaModel::lefiPinAntennaModel()$/;"	f	class:lefiPinAntennaModel
lefiPinAntennaModel	lef/lefiMacro.hpp	/^class lefiPinAntennaModel {$/;"	c
lefiPinAntennaModel_antennaGateArea	clef/xlefiMacro.cpp	/^double lefiPinAntennaModel_antennaGateArea (const ::lefiPinAntennaModel* obj, int  index) {$/;"	f
lefiPinAntennaModel_antennaGateAreaLayer	clef/xlefiMacro.cpp	/^const char* lefiPinAntennaModel_antennaGateAreaLayer (const ::lefiPinAntennaModel* obj, int  index) {$/;"	f
lefiPinAntennaModel_antennaMaxAreaCar	clef/xlefiMacro.cpp	/^double lefiPinAntennaModel_antennaMaxAreaCar (const ::lefiPinAntennaModel* obj, int  index) {$/;"	f
lefiPinAntennaModel_antennaMaxAreaCarLayer	clef/xlefiMacro.cpp	/^const char* lefiPinAntennaModel_antennaMaxAreaCarLayer (const ::lefiPinAntennaModel* obj, int  index) {$/;"	f
lefiPinAntennaModel_antennaMaxCutCar	clef/xlefiMacro.cpp	/^double lefiPinAntennaModel_antennaMaxCutCar (const ::lefiPinAntennaModel* obj, int  index) {$/;"	f
lefiPinAntennaModel_antennaMaxCutCarLayer	clef/xlefiMacro.cpp	/^const char* lefiPinAntennaModel_antennaMaxCutCarLayer (const ::lefiPinAntennaModel* obj, int  index) {$/;"	f
lefiPinAntennaModel_antennaMaxSideAreaCar	clef/xlefiMacro.cpp	/^double lefiPinAntennaModel_antennaMaxSideAreaCar (const ::lefiPinAntennaModel* obj, int  index) {$/;"	f
lefiPinAntennaModel_antennaMaxSideAreaCarLayer	clef/xlefiMacro.cpp	/^const char* lefiPinAntennaModel_antennaMaxSideAreaCarLayer (const ::lefiPinAntennaModel* obj, int  index) {$/;"	f
lefiPinAntennaModel_antennaOxide	clef/xlefiMacro.cpp	/^char* lefiPinAntennaModel_antennaOxide (const ::lefiPinAntennaModel* obj) {$/;"	f
lefiPinAntennaModel_hasAntennaGateArea	clef/xlefiMacro.cpp	/^int lefiPinAntennaModel_hasAntennaGateArea (const ::lefiPinAntennaModel* obj) {$/;"	f
lefiPinAntennaModel_hasAntennaMaxAreaCar	clef/xlefiMacro.cpp	/^int lefiPinAntennaModel_hasAntennaMaxAreaCar (const ::lefiPinAntennaModel* obj) {$/;"	f
lefiPinAntennaModel_hasAntennaMaxCutCar	clef/xlefiMacro.cpp	/^int lefiPinAntennaModel_hasAntennaMaxCutCar (const ::lefiPinAntennaModel* obj) {$/;"	f
lefiPinAntennaModel_hasAntennaMaxSideAreaCar	clef/xlefiMacro.cpp	/^int lefiPinAntennaModel_hasAntennaMaxSideAreaCar (const ::lefiPinAntennaModel* obj) {$/;"	f
lefiPinAntennaModel_hasReturn	clef/xlefiMacro.cpp	/^int lefiPinAntennaModel_hasReturn (const ::lefiPinAntennaModel* obj) {$/;"	f
lefiPinAntennaModel_numAntennaGateArea	clef/xlefiMacro.cpp	/^int lefiPinAntennaModel_numAntennaGateArea (const ::lefiPinAntennaModel* obj) {$/;"	f
lefiPinAntennaModel_numAntennaMaxAreaCar	clef/xlefiMacro.cpp	/^int lefiPinAntennaModel_numAntennaMaxAreaCar (const ::lefiPinAntennaModel* obj) {$/;"	f
lefiPinAntennaModel_numAntennaMaxCutCar	clef/xlefiMacro.cpp	/^int lefiPinAntennaModel_numAntennaMaxCutCar (const ::lefiPinAntennaModel* obj) {$/;"	f
lefiPinAntennaModel_numAntennaMaxSideAreaCar	clef/xlefiMacro.cpp	/^int lefiPinAntennaModel_numAntennaMaxSideAreaCar (const ::lefiPinAntennaModel* obj) {$/;"	f
lefiPin_LEQ	clef/xlefiMacro.cpp	/^const char* lefiPin_LEQ (const ::lefiPin* obj) {$/;"	f
lefiPin_VHI	clef/xlefiMacro.cpp	/^double lefiPin_VHI (const ::lefiPin* obj) {$/;"	f
lefiPin_VLO	clef/xlefiMacro.cpp	/^double lefiPin_VLO (const ::lefiPin* obj) {$/;"	f
lefiPin_antennaDiffArea	clef/xlefiMacro.cpp	/^double lefiPin_antennaDiffArea (const ::lefiPin* obj, int  index) {$/;"	f
lefiPin_antennaDiffAreaLayer	clef/xlefiMacro.cpp	/^const char* lefiPin_antennaDiffAreaLayer (const ::lefiPin* obj, int  index) {$/;"	f
lefiPin_antennaMetalArea	clef/xlefiMacro.cpp	/^double lefiPin_antennaMetalArea (const ::lefiPin* obj, int  index) {$/;"	f
lefiPin_antennaMetalAreaLayer	clef/xlefiMacro.cpp	/^const char* lefiPin_antennaMetalAreaLayer (const ::lefiPin* obj, int  index) {$/;"	f
lefiPin_antennaMetalLength	clef/xlefiMacro.cpp	/^double lefiPin_antennaMetalLength (const ::lefiPin* obj, int  index) {$/;"	f
lefiPin_antennaMetalLengthLayer	clef/xlefiMacro.cpp	/^const char* lefiPin_antennaMetalLengthLayer (const ::lefiPin* obj, int  index) {$/;"	f
lefiPin_antennaModel	clef/xlefiMacro.cpp	/^const ::lefiPinAntennaModel* lefiPin_antennaModel (const ::lefiPin* obj, int  index) {$/;"	f
lefiPin_antennaPartialCutArea	clef/xlefiMacro.cpp	/^double lefiPin_antennaPartialCutArea (const ::lefiPin* obj, int  index) {$/;"	f
lefiPin_antennaPartialCutAreaLayer	clef/xlefiMacro.cpp	/^const char* lefiPin_antennaPartialCutAreaLayer (const ::lefiPin* obj, int  index) {$/;"	f
lefiPin_antennaPartialMetalArea	clef/xlefiMacro.cpp	/^double lefiPin_antennaPartialMetalArea (const ::lefiPin* obj, int  index) {$/;"	f
lefiPin_antennaPartialMetalAreaLayer	clef/xlefiMacro.cpp	/^const char* lefiPin_antennaPartialMetalAreaLayer (const ::lefiPin* obj, int  index) {$/;"	f
lefiPin_antennaPartialMetalSideArea	clef/xlefiMacro.cpp	/^double lefiPin_antennaPartialMetalSideArea (const ::lefiPin* obj, int  index) {$/;"	f
lefiPin_antennaPartialMetalSideAreaLayer	clef/xlefiMacro.cpp	/^const char* lefiPin_antennaPartialMetalSideAreaLayer (const ::lefiPin* obj, int  index) {$/;"	f
lefiPin_antennaSize	clef/xlefiMacro.cpp	/^double lefiPin_antennaSize (const ::lefiPin* obj, int  index) {$/;"	f
lefiPin_antennaSizeLayer	clef/xlefiMacro.cpp	/^const char* lefiPin_antennaSizeLayer (const ::lefiPin* obj, int  index) {$/;"	f
lefiPin_capacitance	clef/xlefiMacro.cpp	/^double lefiPin_capacitance (const ::lefiPin* obj) {$/;"	f
lefiPin_currentSource	clef/xlefiMacro.cpp	/^const char* lefiPin_currentSource (const ::lefiPin* obj) {$/;"	f
lefiPin_direction	clef/xlefiMacro.cpp	/^const char* lefiPin_direction (const ::lefiPin* obj) {$/;"	f
lefiPin_fallSatcur	clef/xlefiMacro.cpp	/^double lefiPin_fallSatcur (const ::lefiPin* obj) {$/;"	f
lefiPin_fallSlewLimit	clef/xlefiMacro.cpp	/^double lefiPin_fallSlewLimit (const ::lefiPin* obj) {$/;"	f
lefiPin_fallThresh	clef/xlefiMacro.cpp	/^double lefiPin_fallThresh (const ::lefiPin* obj) {$/;"	f
lefiPin_fallVoltage	clef/xlefiMacro.cpp	/^double lefiPin_fallVoltage (const ::lefiPin* obj) {$/;"	f
lefiPin_foreignName	clef/xlefiMacro.cpp	/^const char* lefiPin_foreignName (const ::lefiPin* obj, int  index) {$/;"	f
lefiPin_foreignOrient	clef/xlefiMacro.cpp	/^int lefiPin_foreignOrient (const ::lefiPin* obj, int  index) {$/;"	f
lefiPin_foreignOrientStr	clef/xlefiMacro.cpp	/^const char* lefiPin_foreignOrientStr (const ::lefiPin* obj, int  index) {$/;"	f
lefiPin_foreignX	clef/xlefiMacro.cpp	/^double lefiPin_foreignX (const ::lefiPin* obj, int  index) {$/;"	f
lefiPin_foreignY	clef/xlefiMacro.cpp	/^double lefiPin_foreignY (const ::lefiPin* obj, int  index) {$/;"	f
lefiPin_groundSensitivity	clef/xlefiMacro.cpp	/^const char* lefiPin_groundSensitivity (const ::lefiPin* obj) {$/;"	f
lefiPin_hasAntennaDiffArea	clef/xlefiMacro.cpp	/^int lefiPin_hasAntennaDiffArea (const ::lefiPin* obj) {$/;"	f
lefiPin_hasAntennaMetalArea	clef/xlefiMacro.cpp	/^int lefiPin_hasAntennaMetalArea (const ::lefiPin* obj) {$/;"	f
lefiPin_hasAntennaMetalLength	clef/xlefiMacro.cpp	/^int lefiPin_hasAntennaMetalLength (const ::lefiPin* obj) {$/;"	f
lefiPin_hasAntennaModel	clef/xlefiMacro.cpp	/^int lefiPin_hasAntennaModel (const ::lefiPin* obj) {$/;"	f
lefiPin_hasAntennaPartialCutArea	clef/xlefiMacro.cpp	/^int lefiPin_hasAntennaPartialCutArea (const ::lefiPin* obj) {$/;"	f
lefiPin_hasAntennaPartialMetalArea	clef/xlefiMacro.cpp	/^int lefiPin_hasAntennaPartialMetalArea (const ::lefiPin* obj) {$/;"	f
lefiPin_hasAntennaPartialMetalSideArea	clef/xlefiMacro.cpp	/^int lefiPin_hasAntennaPartialMetalSideArea (const ::lefiPin* obj) {$/;"	f
lefiPin_hasAntennaSize	clef/xlefiMacro.cpp	/^int lefiPin_hasAntennaSize (const ::lefiPin* obj) {$/;"	f
lefiPin_hasCapacitance	clef/xlefiMacro.cpp	/^int lefiPin_hasCapacitance (const ::lefiPin* obj) {$/;"	f
lefiPin_hasCurrentSource	clef/xlefiMacro.cpp	/^int lefiPin_hasCurrentSource (const ::lefiPin* obj) {$/;"	f
lefiPin_hasDirection	clef/xlefiMacro.cpp	/^int lefiPin_hasDirection (const ::lefiPin* obj) {$/;"	f
lefiPin_hasFallSatcur	clef/xlefiMacro.cpp	/^int lefiPin_hasFallSatcur (const ::lefiPin* obj) {$/;"	f
lefiPin_hasFallSlewLimit	clef/xlefiMacro.cpp	/^int lefiPin_hasFallSlewLimit (const ::lefiPin* obj) {$/;"	f
lefiPin_hasFallThresh	clef/xlefiMacro.cpp	/^int lefiPin_hasFallThresh (const ::lefiPin* obj) {$/;"	f
lefiPin_hasFallVoltage	clef/xlefiMacro.cpp	/^int lefiPin_hasFallVoltage (const ::lefiPin* obj) {$/;"	f
lefiPin_hasForeign	clef/xlefiMacro.cpp	/^int lefiPin_hasForeign (const ::lefiPin* obj) {$/;"	f
lefiPin_hasForeignOrient	clef/xlefiMacro.cpp	/^int lefiPin_hasForeignOrient (const ::lefiPin* obj, int  index) {$/;"	f
lefiPin_hasForeignPoint	clef/xlefiMacro.cpp	/^int lefiPin_hasForeignPoint (const ::lefiPin* obj, int  index) {$/;"	f
lefiPin_hasGroundSensitivity	clef/xlefiMacro.cpp	/^int lefiPin_hasGroundSensitivity (const ::lefiPin* obj) {$/;"	f
lefiPin_hasInMargin	clef/xlefiMacro.cpp	/^int lefiPin_hasInMargin (const ::lefiPin* obj) {$/;"	f
lefiPin_hasLEQ	clef/xlefiMacro.cpp	/^int lefiPin_hasLEQ (const ::lefiPin* obj) {$/;"	f
lefiPin_hasLeakage	clef/xlefiMacro.cpp	/^int lefiPin_hasLeakage (const ::lefiPin* obj) {$/;"	f
lefiPin_hasMaxdelay	clef/xlefiMacro.cpp	/^int lefiPin_hasMaxdelay (const ::lefiPin* obj) {$/;"	f
lefiPin_hasMaxload	clef/xlefiMacro.cpp	/^int lefiPin_hasMaxload (const ::lefiPin* obj) {$/;"	f
lefiPin_hasMustjoin	clef/xlefiMacro.cpp	/^int lefiPin_hasMustjoin (const ::lefiPin* obj) {$/;"	f
lefiPin_hasNetExpr	clef/xlefiMacro.cpp	/^int lefiPin_hasNetExpr (const ::lefiPin* obj) {$/;"	f
lefiPin_hasOutMargin	clef/xlefiMacro.cpp	/^int lefiPin_hasOutMargin (const ::lefiPin* obj) {$/;"	f
lefiPin_hasOutResistance	clef/xlefiMacro.cpp	/^int lefiPin_hasOutResistance (const ::lefiPin* obj) {$/;"	f
lefiPin_hasPower	clef/xlefiMacro.cpp	/^int lefiPin_hasPower (const ::lefiPin* obj) {$/;"	f
lefiPin_hasPulldownres	clef/xlefiMacro.cpp	/^int lefiPin_hasPulldownres (const ::lefiPin* obj) {$/;"	f
lefiPin_hasResistance	clef/xlefiMacro.cpp	/^int lefiPin_hasResistance (const ::lefiPin* obj) {$/;"	f
lefiPin_hasRiseSatcur	clef/xlefiMacro.cpp	/^int lefiPin_hasRiseSatcur (const ::lefiPin* obj) {$/;"	f
lefiPin_hasRiseSlewLimit	clef/xlefiMacro.cpp	/^int lefiPin_hasRiseSlewLimit (const ::lefiPin* obj) {$/;"	f
lefiPin_hasRiseThresh	clef/xlefiMacro.cpp	/^int lefiPin_hasRiseThresh (const ::lefiPin* obj) {$/;"	f
lefiPin_hasRiseVoltage	clef/xlefiMacro.cpp	/^int lefiPin_hasRiseVoltage (const ::lefiPin* obj) {$/;"	f
lefiPin_hasShape	clef/xlefiMacro.cpp	/^int lefiPin_hasShape (const ::lefiPin* obj) {$/;"	f
lefiPin_hasSupplySensitivity	clef/xlefiMacro.cpp	/^int lefiPin_hasSupplySensitivity (const ::lefiPin* obj) {$/;"	f
lefiPin_hasTables	clef/xlefiMacro.cpp	/^int lefiPin_hasTables (const ::lefiPin* obj) {$/;"	f
lefiPin_hasTaperRule	clef/xlefiMacro.cpp	/^int lefiPin_hasTaperRule (const ::lefiPin* obj) {$/;"	f
lefiPin_hasTieoffr	clef/xlefiMacro.cpp	/^int lefiPin_hasTieoffr (const ::lefiPin* obj) {$/;"	f
lefiPin_hasUse	clef/xlefiMacro.cpp	/^int lefiPin_hasUse (const ::lefiPin* obj) {$/;"	f
lefiPin_hasVHI	clef/xlefiMacro.cpp	/^int lefiPin_hasVHI (const ::lefiPin* obj) {$/;"	f
lefiPin_hasVLO	clef/xlefiMacro.cpp	/^int lefiPin_hasVLO (const ::lefiPin* obj) {$/;"	f
lefiPin_inMarginHigh	clef/xlefiMacro.cpp	/^double lefiPin_inMarginHigh (const ::lefiPin* obj) {$/;"	f
lefiPin_inMarginLow	clef/xlefiMacro.cpp	/^double lefiPin_inMarginLow (const ::lefiPin* obj) {$/;"	f
lefiPin_leakage	clef/xlefiMacro.cpp	/^double lefiPin_leakage (const ::lefiPin* obj) {$/;"	f
lefiPin_maxdelay	clef/xlefiMacro.cpp	/^double lefiPin_maxdelay (const ::lefiPin* obj) {$/;"	f
lefiPin_maxload	clef/xlefiMacro.cpp	/^double lefiPin_maxload (const ::lefiPin* obj) {$/;"	f
lefiPin_mustjoin	clef/xlefiMacro.cpp	/^const char* lefiPin_mustjoin (const ::lefiPin* obj) {$/;"	f
lefiPin_name	clef/xlefiMacro.cpp	/^const char* lefiPin_name (const ::lefiPin* obj) {$/;"	f
lefiPin_netExpr	clef/xlefiMacro.cpp	/^const char* lefiPin_netExpr (const ::lefiPin* obj) {$/;"	f
lefiPin_numAntennaDiffArea	clef/xlefiMacro.cpp	/^int lefiPin_numAntennaDiffArea (const ::lefiPin* obj) {$/;"	f
lefiPin_numAntennaMetalArea	clef/xlefiMacro.cpp	/^int lefiPin_numAntennaMetalArea (const ::lefiPin* obj) {$/;"	f
lefiPin_numAntennaMetalLength	clef/xlefiMacro.cpp	/^int lefiPin_numAntennaMetalLength (const ::lefiPin* obj) {$/;"	f
lefiPin_numAntennaModel	clef/xlefiMacro.cpp	/^int lefiPin_numAntennaModel (const ::lefiPin* obj) {$/;"	f
lefiPin_numAntennaPartialCutArea	clef/xlefiMacro.cpp	/^int lefiPin_numAntennaPartialCutArea (const ::lefiPin* obj) {$/;"	f
lefiPin_numAntennaPartialMetalArea	clef/xlefiMacro.cpp	/^int lefiPin_numAntennaPartialMetalArea (const ::lefiPin* obj) {$/;"	f
lefiPin_numAntennaPartialMetalSideArea	clef/xlefiMacro.cpp	/^int lefiPin_numAntennaPartialMetalSideArea (const ::lefiPin* obj) {$/;"	f
lefiPin_numAntennaSize	clef/xlefiMacro.cpp	/^int lefiPin_numAntennaSize (const ::lefiPin* obj) {$/;"	f
lefiPin_numForeigns	clef/xlefiMacro.cpp	/^int lefiPin_numForeigns (const ::lefiPin* obj) {$/;"	f
lefiPin_numPorts	clef/xlefiMacro.cpp	/^int lefiPin_numPorts (const ::lefiPin* obj) {$/;"	f
lefiPin_numProperties	clef/xlefiMacro.cpp	/^int lefiPin_numProperties (const ::lefiPin* obj) {$/;"	f
lefiPin_outMarginHigh	clef/xlefiMacro.cpp	/^double lefiPin_outMarginHigh (const ::lefiPin* obj) {$/;"	f
lefiPin_outMarginLow	clef/xlefiMacro.cpp	/^double lefiPin_outMarginLow (const ::lefiPin* obj) {$/;"	f
lefiPin_outResistanceHigh	clef/xlefiMacro.cpp	/^double lefiPin_outResistanceHigh (const ::lefiPin* obj) {$/;"	f
lefiPin_outResistanceLow	clef/xlefiMacro.cpp	/^double lefiPin_outResistanceLow (const ::lefiPin* obj) {$/;"	f
lefiPin_port	clef/xlefiMacro.cpp	/^const ::lefiGeometries* lefiPin_port (const ::lefiPin* obj, int  index) {$/;"	f
lefiPin_power	clef/xlefiMacro.cpp	/^double lefiPin_power (const ::lefiPin* obj) {$/;"	f
lefiPin_print	clef/xlefiMacro.cpp	/^void lefiPin_print (const ::lefiPin* obj, FILE*  f) {$/;"	f
lefiPin_propIsNumber	clef/xlefiMacro.cpp	/^int lefiPin_propIsNumber (const ::lefiPin* obj, int  index) {$/;"	f
lefiPin_propIsString	clef/xlefiMacro.cpp	/^int lefiPin_propIsString (const ::lefiPin* obj, int  index) {$/;"	f
lefiPin_propName	clef/xlefiMacro.cpp	/^const char* lefiPin_propName (const ::lefiPin* obj, int  index) {$/;"	f
lefiPin_propNum	clef/xlefiMacro.cpp	/^double lefiPin_propNum (const ::lefiPin* obj, int  index) {$/;"	f
lefiPin_propType	clef/xlefiMacro.cpp	/^const char lefiPin_propType (const ::lefiPin* obj, int  index) {$/;"	f
lefiPin_propValue	clef/xlefiMacro.cpp	/^const char* lefiPin_propValue (const ::lefiPin* obj, int  index) {$/;"	f
lefiPin_pulldownres	clef/xlefiMacro.cpp	/^double lefiPin_pulldownres (const ::lefiPin* obj) {$/;"	f
lefiPin_resistance	clef/xlefiMacro.cpp	/^double lefiPin_resistance (const ::lefiPin* obj) {$/;"	f
lefiPin_riseSatcur	clef/xlefiMacro.cpp	/^double lefiPin_riseSatcur (const ::lefiPin* obj) {$/;"	f
lefiPin_riseSlewLimit	clef/xlefiMacro.cpp	/^double lefiPin_riseSlewLimit (const ::lefiPin* obj) {$/;"	f
lefiPin_riseThresh	clef/xlefiMacro.cpp	/^double lefiPin_riseThresh (const ::lefiPin* obj) {$/;"	f
lefiPin_riseVoltage	clef/xlefiMacro.cpp	/^double lefiPin_riseVoltage (const ::lefiPin* obj) {$/;"	f
lefiPin_shape	clef/xlefiMacro.cpp	/^const char* lefiPin_shape (const ::lefiPin* obj) {$/;"	f
lefiPin_supplySensitivity	clef/xlefiMacro.cpp	/^const char* lefiPin_supplySensitivity (const ::lefiPin* obj) {$/;"	f
lefiPin_tableHighName	clef/xlefiMacro.cpp	/^const char* lefiPin_tableHighName (const ::lefiPin* obj) {$/;"	f
lefiPin_tableLowName	clef/xlefiMacro.cpp	/^const char* lefiPin_tableLowName (const ::lefiPin* obj) {$/;"	f
lefiPin_taperRule	clef/xlefiMacro.cpp	/^const char* lefiPin_taperRule (const ::lefiPin* obj) {$/;"	f
lefiPin_tieoffr	clef/xlefiMacro.cpp	/^double lefiPin_tieoffr (const ::lefiPin* obj) {$/;"	f
lefiPin_use	clef/xlefiMacro.cpp	/^const char* lefiPin_use (const ::lefiPin* obj) {$/;"	f
lefiPoints	clef/lefiTypedefs.h	/^struct lefiPoints {$/;"	s
lefiPoints	lef/lefiUtil.hpp	/^struct lefiPoints {$/;"	s
lefiPrivateSubObjects	lef/lefiDefs.hpp	/^  lefiPrivateSubObjects,      \/\/ deep copy + delete$/;"	e	enum:__anon5
lefiProp	clef/lefiTypedefs.h	/^typedef void *lefiProp;$/;"	t
lefiProp	lef/lefiProp.cpp	/^lefiProp::lefiProp()$/;"	f	class:lefiProp
lefiProp	lef/lefiProp.hpp	/^class lefiProp {$/;"	c
lefiPropType	clef/lefiTypedefs.h	/^typedef void *lefiPropType;$/;"	t
lefiPropType	lef/lefiPropType.cpp	/^lefiPropType::lefiPropType()$/;"	f	class:lefiPropType
lefiPropType	lef/lefiPropType.hpp	/^class lefiPropType {$/;"	c
lefiPropType_h	lef/lefiPropType.hpp	31;"	d
lefiPropType_propType	clef/xlefiPropType.cpp	/^const char lefiPropType_propType (const ::lefiPropType* obj, char*  name) {$/;"	f
lefiProp_dataType	clef/xlefiProp.cpp	/^char lefiProp_dataType (const ::lefiProp* obj) {$/;"	f
lefiProp_h	lef/lefiProp.hpp	31;"	d
lefiProp_hasNameMapString	clef/xlefiProp.cpp	/^int lefiProp_hasNameMapString (const ::lefiProp* obj) {$/;"	f
lefiProp_hasNumber	clef/xlefiProp.cpp	/^int lefiProp_hasNumber (const ::lefiProp* obj) {$/;"	f
lefiProp_hasRange	clef/xlefiProp.cpp	/^int lefiProp_hasRange (const ::lefiProp* obj) {$/;"	f
lefiProp_hasString	clef/xlefiProp.cpp	/^int lefiProp_hasString (const ::lefiProp* obj) {$/;"	f
lefiProp_left	clef/xlefiProp.cpp	/^double lefiProp_left (const ::lefiProp* obj) {$/;"	f
lefiProp_number	clef/xlefiProp.cpp	/^double lefiProp_number (const ::lefiProp* obj) {$/;"	f
lefiProp_print	clef/xlefiProp.cpp	/^void lefiProp_print (const ::lefiProp* obj, FILE*  f) {$/;"	f
lefiProp_propName	clef/xlefiProp.cpp	/^const char* lefiProp_propName (const ::lefiProp* obj) {$/;"	f
lefiProp_propType	clef/xlefiProp.cpp	/^const char* lefiProp_propType (const ::lefiProp* obj) {$/;"	f
lefiProp_right	clef/xlefiProp.cpp	/^double lefiProp_right (const ::lefiProp* obj) {$/;"	f
lefiProp_string	clef/xlefiProp.cpp	/^const char* lefiProp_string (const ::lefiProp* obj) {$/;"	f
lefiReferencedSubObjects	lef/lefiDefs.hpp	/^  lefiReferencedSubObjects,   \/\/ shallow copy, no delete$/;"	e	enum:__anon5
lefiSetDebug	clef/xlefiDebug.cpp	/^void lefiSetDebug (int  num, int  value) {$/;"	f
lefiSetDebug	lef/lefiDebug.cpp	/^lefiSetDebug(int    num,$/;"	f
lefiShift	lef/lefiDebug.cpp	/^static char lefiShift [] = {$/;"	v	file:
lefiSite	clef/lefiTypedefs.h	/^typedef void *lefiSite;$/;"	t
lefiSite	lef/lefiMisc.cpp	/^lefiSite::lefiSite()$/;"	f	class:lefiSite
lefiSite	lef/lefiMisc.hpp	/^class lefiSite {$/;"	c
lefiSitePattern	clef/lefiTypedefs.h	/^typedef void *lefiSitePattern;$/;"	t
lefiSitePattern	lef/lefiMisc.cpp	/^lefiSitePattern::lefiSitePattern()$/;"	f	class:lefiSitePattern
lefiSitePattern	lef/lefiMisc.hpp	/^class lefiSitePattern {$/;"	c
lefiSitePattern_hasStepPattern	clef/xlefiMisc.cpp	/^int lefiSitePattern_hasStepPattern (const ::lefiSitePattern* obj) {$/;"	f
lefiSitePattern_name	clef/xlefiMisc.cpp	/^const char* lefiSitePattern_name (const ::lefiSitePattern* obj) {$/;"	f
lefiSitePattern_orient	clef/xlefiMisc.cpp	/^int lefiSitePattern_orient (const ::lefiSitePattern* obj) {$/;"	f
lefiSitePattern_orientStr	clef/xlefiMisc.cpp	/^const char* lefiSitePattern_orientStr (const ::lefiSitePattern* obj) {$/;"	f
lefiSitePattern_print	clef/xlefiMisc.cpp	/^void lefiSitePattern_print (const ::lefiSitePattern* obj, FILE*  f) {$/;"	f
lefiSitePattern_x	clef/xlefiMisc.cpp	/^double lefiSitePattern_x (const ::lefiSitePattern* obj) {$/;"	f
lefiSitePattern_xStart	clef/xlefiMisc.cpp	/^double lefiSitePattern_xStart (const ::lefiSitePattern* obj) {$/;"	f
lefiSitePattern_xStep	clef/xlefiMisc.cpp	/^double lefiSitePattern_xStep (const ::lefiSitePattern* obj) {$/;"	f
lefiSitePattern_y	clef/xlefiMisc.cpp	/^double lefiSitePattern_y (const ::lefiSitePattern* obj) {$/;"	f
lefiSitePattern_yStart	clef/xlefiMisc.cpp	/^double lefiSitePattern_yStart (const ::lefiSitePattern* obj) {$/;"	f
lefiSitePattern_yStep	clef/xlefiMisc.cpp	/^double lefiSitePattern_yStep (const ::lefiSitePattern* obj) {$/;"	f
lefiSite_has90Symmetry	clef/xlefiMisc.cpp	/^int lefiSite_has90Symmetry (const ::lefiSite* obj) {$/;"	f
lefiSite_hasClass	clef/xlefiMisc.cpp	/^int lefiSite_hasClass (const ::lefiSite* obj) {$/;"	f
lefiSite_hasRowPattern	clef/xlefiMisc.cpp	/^int lefiSite_hasRowPattern (const ::lefiSite* obj) {$/;"	f
lefiSite_hasSize	clef/xlefiMisc.cpp	/^int lefiSite_hasSize (const ::lefiSite* obj) {$/;"	f
lefiSite_hasXSymmetry	clef/xlefiMisc.cpp	/^int lefiSite_hasXSymmetry (const ::lefiSite* obj) {$/;"	f
lefiSite_hasYSymmetry	clef/xlefiMisc.cpp	/^int lefiSite_hasYSymmetry (const ::lefiSite* obj) {$/;"	f
lefiSite_name	clef/xlefiMisc.cpp	/^const char* lefiSite_name (const ::lefiSite* obj) {$/;"	f
lefiSite_numSites	clef/xlefiMisc.cpp	/^int lefiSite_numSites (const ::lefiSite* obj) {$/;"	f
lefiSite_print	clef/xlefiMisc.cpp	/^void lefiSite_print (const ::lefiSite* obj, FILE*  f) {$/;"	f
lefiSite_siteClass	clef/xlefiMisc.cpp	/^const char* lefiSite_siteClass (const ::lefiSite* obj) {$/;"	f
lefiSite_siteName	clef/xlefiMisc.cpp	/^char* lefiSite_siteName (const ::lefiSite* obj, int  index) {$/;"	f
lefiSite_siteOrient	clef/xlefiMisc.cpp	/^int lefiSite_siteOrient (const ::lefiSite* obj, int  index) {$/;"	f
lefiSite_siteOrientStr	clef/xlefiMisc.cpp	/^char* lefiSite_siteOrientStr (const ::lefiSite* obj, int  index) {$/;"	f
lefiSite_sizeX	clef/xlefiMisc.cpp	/^double lefiSite_sizeX (const ::lefiSite* obj) {$/;"	f
lefiSite_sizeY	clef/xlefiMisc.cpp	/^double lefiSite_sizeY (const ::lefiSite* obj) {$/;"	f
lefiSpacing	clef/lefiTypedefs.h	/^typedef void *lefiSpacing;$/;"	t
lefiSpacing	lef/lefiMisc.cpp	/^lefiSpacing::lefiSpacing()$/;"	f	class:lefiSpacing
lefiSpacing	lef/lefiMisc.hpp	/^class lefiSpacing {$/;"	c
lefiSpacingTable	clef/lefiTypedefs.h	/^typedef void *lefiSpacingTable;$/;"	t
lefiSpacingTable	lef/lefiLayer.cpp	/^lefiSpacingTable::lefiSpacingTable()$/;"	f	class:lefiSpacingTable
lefiSpacingTable	lef/lefiLayer.hpp	/^class lefiSpacingTable {$/;"	c
lefiSpacingTable_influence	clef/xlefiLayer.cpp	/^const ::lefiInfluence* lefiSpacingTable_influence (const ::lefiSpacingTable* obj) {$/;"	f
lefiSpacingTable_isInfluence	clef/xlefiLayer.cpp	/^int lefiSpacingTable_isInfluence (const ::lefiSpacingTable* obj) {$/;"	f
lefiSpacingTable_isParallel	clef/xlefiLayer.cpp	/^int lefiSpacingTable_isParallel (const ::lefiSpacingTable* obj) {$/;"	f
lefiSpacingTable_parallel	clef/xlefiLayer.cpp	/^const ::lefiParallel* lefiSpacingTable_parallel (const ::lefiSpacingTable* obj) {$/;"	f
lefiSpacingTable_twoWidths	clef/xlefiLayer.cpp	/^const ::lefiTwoWidths* lefiSpacingTable_twoWidths (const ::lefiSpacingTable* obj) {$/;"	f
lefiSpacing_distance	clef/xlefiMisc.cpp	/^double lefiSpacing_distance (const ::lefiSpacing* obj) {$/;"	f
lefiSpacing_hasStack	clef/xlefiMisc.cpp	/^int lefiSpacing_hasStack (const ::lefiSpacing* obj) {$/;"	f
lefiSpacing_name1	clef/xlefiMisc.cpp	/^const char* lefiSpacing_name1 (const ::lefiSpacing* obj) {$/;"	f
lefiSpacing_name2	clef/xlefiMisc.cpp	/^const char* lefiSpacing_name2 (const ::lefiSpacing* obj) {$/;"	f
lefiSpacing_print	clef/xlefiMisc.cpp	/^void lefiSpacing_print (const ::lefiSpacing* obj, FILE*  f) {$/;"	f
lefiTiming	clef/lefiTypedefs.h	/^typedef void *lefiTiming;$/;"	t
lefiTiming	lef/lefiMacro.cpp	/^lefiTiming::lefiTiming()$/;"	f	class:lefiTiming
lefiTiming	lef/lefiMacro.hpp	/^class lefiTiming {$/;"	c
lefiTrackPattern	clef/lefiTypedefs.h	/^typedef void *lefiTrackPattern;$/;"	t
lefiTrackPattern	lef/lefiMisc.cpp	/^lefiTrackPattern::lefiTrackPattern()$/;"	f	class:lefiTrackPattern
lefiTrackPattern	lef/lefiMisc.hpp	/^class lefiTrackPattern {$/;"	c
lefiTrackPattern_layerName	clef/xlefiMisc.cpp	/^const char* lefiTrackPattern_layerName (const ::lefiTrackPattern* obj, int  index) {$/;"	f
lefiTrackPattern_name	clef/xlefiMisc.cpp	/^const char* lefiTrackPattern_name (const ::lefiTrackPattern* obj) {$/;"	f
lefiTrackPattern_numLayers	clef/xlefiMisc.cpp	/^int lefiTrackPattern_numLayers (const ::lefiTrackPattern* obj) {$/;"	f
lefiTrackPattern_numTracks	clef/xlefiMisc.cpp	/^int lefiTrackPattern_numTracks (const ::lefiTrackPattern* obj) {$/;"	f
lefiTrackPattern_print	clef/xlefiMisc.cpp	/^void lefiTrackPattern_print (const ::lefiTrackPattern* obj, FILE*  f) {$/;"	f
lefiTrackPattern_space	clef/xlefiMisc.cpp	/^double lefiTrackPattern_space (const ::lefiTrackPattern* obj) {$/;"	f
lefiTrackPattern_start	clef/xlefiMisc.cpp	/^double lefiTrackPattern_start (const ::lefiTrackPattern* obj) {$/;"	f
lefiTwoWidths	clef/lefiTypedefs.h	/^typedef void *lefiTwoWidths;$/;"	t
lefiTwoWidths	lef/lefiLayer.cpp	/^lefiTwoWidths::lefiTwoWidths()$/;"	f	class:lefiTwoWidths
lefiTwoWidths	lef/lefiLayer.hpp	/^class lefiTwoWidths {$/;"	c
lefiTwoWidths_hasWidthPRL	clef/xlefiLayer.cpp	/^int lefiTwoWidths_hasWidthPRL (const ::lefiTwoWidths* obj, int  iWidth) {$/;"	f
lefiTwoWidths_numWidth	clef/xlefiLayer.cpp	/^int lefiTwoWidths_numWidth (const ::lefiTwoWidths* obj) {$/;"	f
lefiTwoWidths_numWidthSpacing	clef/xlefiLayer.cpp	/^int lefiTwoWidths_numWidthSpacing (const ::lefiTwoWidths* obj, int  iWidth) {$/;"	f
lefiTwoWidths_width	clef/xlefiLayer.cpp	/^double lefiTwoWidths_width (const ::lefiTwoWidths* obj, int  iWidth) {$/;"	f
lefiTwoWidths_widthPRL	clef/xlefiLayer.cpp	/^double lefiTwoWidths_widthPRL (const ::lefiTwoWidths* obj, int  iWidth) {$/;"	f
lefiTwoWidths_widthSpacing	clef/xlefiLayer.cpp	/^double lefiTwoWidths_widthSpacing (const ::lefiTwoWidths* obj, int  iWidth, int  iWidthSpacing) {$/;"	f
lefiUnits	clef/lefiTypedefs.h	/^typedef void *lefiUnits;$/;"	t
lefiUnits	lef/lefiUnits.cpp	/^lefiUnits::lefiUnits()$/;"	f	class:lefiUnits
lefiUnits	lef/lefiUnits.hpp	/^class lefiUnits {$/;"	c
lefiUnits_capacitance	clef/xlefiUnits.cpp	/^double lefiUnits_capacitance (const ::lefiUnits* obj) {$/;"	f
lefiUnits_current	clef/xlefiUnits.cpp	/^double lefiUnits_current (const ::lefiUnits* obj) {$/;"	f
lefiUnits_databaseName	clef/xlefiUnits.cpp	/^const char* lefiUnits_databaseName (const ::lefiUnits* obj) {$/;"	f
lefiUnits_databaseNumber	clef/xlefiUnits.cpp	/^double lefiUnits_databaseNumber (const ::lefiUnits* obj) {$/;"	f
lefiUnits_frequency	clef/xlefiUnits.cpp	/^double lefiUnits_frequency (const ::lefiUnits* obj) {$/;"	f
lefiUnits_h	lef/lefiUnits.hpp	31;"	d
lefiUnits_hasCapacitance	clef/xlefiUnits.cpp	/^int lefiUnits_hasCapacitance (const ::lefiUnits* obj) {$/;"	f
lefiUnits_hasCurrent	clef/xlefiUnits.cpp	/^int lefiUnits_hasCurrent (const ::lefiUnits* obj) {$/;"	f
lefiUnits_hasDatabase	clef/xlefiUnits.cpp	/^int lefiUnits_hasDatabase (const ::lefiUnits* obj) {$/;"	f
lefiUnits_hasFrequency	clef/xlefiUnits.cpp	/^int lefiUnits_hasFrequency (const ::lefiUnits* obj) {$/;"	f
lefiUnits_hasPower	clef/xlefiUnits.cpp	/^int lefiUnits_hasPower (const ::lefiUnits* obj) {$/;"	f
lefiUnits_hasResistance	clef/xlefiUnits.cpp	/^int lefiUnits_hasResistance (const ::lefiUnits* obj) {$/;"	f
lefiUnits_hasTime	clef/xlefiUnits.cpp	/^int lefiUnits_hasTime (const ::lefiUnits* obj) {$/;"	f
lefiUnits_hasVoltage	clef/xlefiUnits.cpp	/^int lefiUnits_hasVoltage (const ::lefiUnits* obj) {$/;"	f
lefiUnits_power	clef/xlefiUnits.cpp	/^double lefiUnits_power (const ::lefiUnits* obj) {$/;"	f
lefiUnits_print	clef/xlefiUnits.cpp	/^void lefiUnits_print (const ::lefiUnits* obj, FILE*  f) {$/;"	f
lefiUnits_resistance	clef/xlefiUnits.cpp	/^double lefiUnits_resistance (const ::lefiUnits* obj) {$/;"	f
lefiUnits_time	clef/xlefiUnits.cpp	/^double lefiUnits_time (const ::lefiUnits* obj) {$/;"	f
lefiUnits_voltage	clef/xlefiUnits.cpp	/^double lefiUnits_voltage (const ::lefiUnits* obj) {$/;"	f
lefiUnknownObject	lef/lefiDefs.hpp	/^  lefiUnknownObject \/\/ void * $/;"	e	enum:__anon4
lefiUseMinSpacing	clef/lefiTypedefs.h	/^typedef void *lefiUseMinSpacing;$/;"	t
lefiUseMinSpacing	lef/lefiMisc.cpp	/^lefiUseMinSpacing::lefiUseMinSpacing()$/;"	f	class:lefiUseMinSpacing
lefiUseMinSpacing	lef/lefiMisc.hpp	/^class lefiUseMinSpacing {$/;"	c
lefiUseMinSpacing_name	clef/xlefiMisc.cpp	/^const char* lefiUseMinSpacing_name (const ::lefiUseMinSpacing* obj) {$/;"	f
lefiUseMinSpacing_print	clef/xlefiMisc.cpp	/^void lefiUseMinSpacing_print (const ::lefiUseMinSpacing* obj, FILE*  f) {$/;"	f
lefiUseMinSpacing_value	clef/xlefiMisc.cpp	/^int lefiUseMinSpacing_value (const ::lefiUseMinSpacing* obj) {$/;"	f
lefiUser	clef/lefiTBInt.c	/^lefiUser()$/;"	f
lefiUser	clef/xlefiUtil.cpp	/^char* lefiUser () {$/;"	f
lefiUser	lef/lefiTBExt.cpp	/^lefiUser()$/;"	f
lefiUserData	clef/lefiTypedefs.h	42;"	d
lefiUserData	lef/lefiDefs.hpp	169;"	d
lefiUserDataHandle	clef/lefiTypedefs.h	43;"	d
lefiUserDataHandle	lef/lefiDefs.hpp	170;"	d
lefiUtil_h	lef/lefiUtil.hpp	31;"	d
lefiValidTime	clef/lefiTBInt.c	/^lefiValidTime()$/;"	f
lefiValidTime	lef/lefiTBExt.cpp	/^lefiValidTime()$/;"	f
lefiValidUser	clef/lefiTBInt.c	/^lefiValidUser()$/;"	f
lefiValidUser	clef/xlefiUtil.cpp	/^int lefiValidUser () {$/;"	f
lefiValidUser	lef/lefiTBExt.cpp	/^lefiValidUser()$/;"	f
lefiVia	clef/lefiTypedefs.h	/^typedef void *lefiVia;$/;"	t
lefiVia	lef/lefiVia.cpp	/^lefiVia::lefiVia()$/;"	f	class:lefiVia
lefiVia	lef/lefiVia.hpp	/^class lefiVia {$/;"	c
lefiViaLayer	clef/lefiTypedefs.h	/^typedef void *lefiViaLayer;$/;"	t
lefiViaLayer	lef/lefiVia.cpp	/^lefiViaLayer::lefiViaLayer()$/;"	f	class:lefiViaLayer
lefiViaLayer	lef/lefiVia.hpp	/^class lefiViaLayer {$/;"	c
lefiViaLayer_getPolygon	clef/xlefiVia.cpp	/^struct ::lefiGeomPolygon* lefiViaLayer_getPolygon (const ::lefiViaLayer* obj, int  index) {$/;"	f
lefiViaRule	clef/lefiTypedefs.h	/^typedef void *lefiViaRule;$/;"	t
lefiViaRule	lef/lefiViaRule.cpp	/^lefiViaRule::lefiViaRule()$/;"	f	class:lefiViaRule
lefiViaRule	lef/lefiViaRule.hpp	/^class lefiViaRule {$/;"	c
lefiViaRuleLayer	clef/lefiTypedefs.h	/^typedef void *lefiViaRuleLayer;$/;"	t
lefiViaRuleLayer	lef/lefiViaRule.cpp	/^lefiViaRuleLayer::lefiViaRuleLayer()$/;"	f	class:lefiViaRuleLayer
lefiViaRuleLayer	lef/lefiViaRule.hpp	/^class lefiViaRuleLayer {$/;"	c
lefiViaRuleLayer_enclosureOverhang1	clef/xlefiViaRule.cpp	/^double lefiViaRuleLayer_enclosureOverhang1 (const ::lefiViaRuleLayer* obj) {$/;"	f
lefiViaRuleLayer_enclosureOverhang2	clef/xlefiViaRule.cpp	/^double lefiViaRuleLayer_enclosureOverhang2 (const ::lefiViaRuleLayer* obj) {$/;"	f
lefiViaRuleLayer_hasDirection	clef/xlefiViaRule.cpp	/^int lefiViaRuleLayer_hasDirection (const ::lefiViaRuleLayer* obj) {$/;"	f
lefiViaRuleLayer_hasEnclosure	clef/xlefiViaRule.cpp	/^int lefiViaRuleLayer_hasEnclosure (const ::lefiViaRuleLayer* obj) {$/;"	f
lefiViaRuleLayer_hasMetalOverhang	clef/xlefiViaRule.cpp	/^int lefiViaRuleLayer_hasMetalOverhang (const ::lefiViaRuleLayer* obj) {$/;"	f
lefiViaRuleLayer_hasOverhang	clef/xlefiViaRule.cpp	/^int lefiViaRuleLayer_hasOverhang (const ::lefiViaRuleLayer* obj) {$/;"	f
lefiViaRuleLayer_hasRect	clef/xlefiViaRule.cpp	/^int lefiViaRuleLayer_hasRect (const ::lefiViaRuleLayer* obj) {$/;"	f
lefiViaRuleLayer_hasResistance	clef/xlefiViaRule.cpp	/^int lefiViaRuleLayer_hasResistance (const ::lefiViaRuleLayer* obj) {$/;"	f
lefiViaRuleLayer_hasSpacing	clef/xlefiViaRule.cpp	/^int lefiViaRuleLayer_hasSpacing (const ::lefiViaRuleLayer* obj) {$/;"	f
lefiViaRuleLayer_hasWidth	clef/xlefiViaRule.cpp	/^int lefiViaRuleLayer_hasWidth (const ::lefiViaRuleLayer* obj) {$/;"	f
lefiViaRuleLayer_isHorizontal	clef/xlefiViaRule.cpp	/^int lefiViaRuleLayer_isHorizontal (const ::lefiViaRuleLayer* obj) {$/;"	f
lefiViaRuleLayer_isVertical	clef/xlefiViaRule.cpp	/^int lefiViaRuleLayer_isVertical (const ::lefiViaRuleLayer* obj) {$/;"	f
lefiViaRuleLayer_metalOverhang	clef/xlefiViaRule.cpp	/^double lefiViaRuleLayer_metalOverhang (const ::lefiViaRuleLayer* obj) {$/;"	f
lefiViaRuleLayer_name	clef/xlefiViaRule.cpp	/^char* lefiViaRuleLayer_name (const ::lefiViaRuleLayer* obj) {$/;"	f
lefiViaRuleLayer_overhang	clef/xlefiViaRule.cpp	/^double lefiViaRuleLayer_overhang (const ::lefiViaRuleLayer* obj) {$/;"	f
lefiViaRuleLayer_print	clef/xlefiViaRule.cpp	/^void lefiViaRuleLayer_print (const ::lefiViaRuleLayer* obj, FILE*  f) {$/;"	f
lefiViaRuleLayer_resistance	clef/xlefiViaRule.cpp	/^double lefiViaRuleLayer_resistance (const ::lefiViaRuleLayer* obj) {$/;"	f
lefiViaRuleLayer_spacingStepX	clef/xlefiViaRule.cpp	/^double lefiViaRuleLayer_spacingStepX (const ::lefiViaRuleLayer* obj) {$/;"	f
lefiViaRuleLayer_spacingStepY	clef/xlefiViaRule.cpp	/^double lefiViaRuleLayer_spacingStepY (const ::lefiViaRuleLayer* obj) {$/;"	f
lefiViaRuleLayer_widthMax	clef/xlefiViaRule.cpp	/^double lefiViaRuleLayer_widthMax (const ::lefiViaRuleLayer* obj) {$/;"	f
lefiViaRuleLayer_widthMin	clef/xlefiViaRule.cpp	/^double lefiViaRuleLayer_widthMin (const ::lefiViaRuleLayer* obj) {$/;"	f
lefiViaRuleLayer_xh	clef/xlefiViaRule.cpp	/^double lefiViaRuleLayer_xh (const ::lefiViaRuleLayer* obj) {$/;"	f
lefiViaRuleLayer_xl	clef/xlefiViaRule.cpp	/^double lefiViaRuleLayer_xl (const ::lefiViaRuleLayer* obj) {$/;"	f
lefiViaRuleLayer_yh	clef/xlefiViaRule.cpp	/^double lefiViaRuleLayer_yh (const ::lefiViaRuleLayer* obj) {$/;"	f
lefiViaRuleLayer_yl	clef/xlefiViaRule.cpp	/^double lefiViaRuleLayer_yl (const ::lefiViaRuleLayer* obj) {$/;"	f
lefiViaRule_h	lef/lefiViaRule.hpp	31;"	d
lefiViaRule_hasDefault	clef/xlefiViaRule.cpp	/^int lefiViaRule_hasDefault (const ::lefiViaRule* obj) {$/;"	f
lefiViaRule_hasGenerate	clef/xlefiViaRule.cpp	/^int lefiViaRule_hasGenerate (const ::lefiViaRule* obj) {$/;"	f
lefiViaRule_layer	clef/xlefiViaRule.cpp	/^const ::lefiViaRuleLayer* lefiViaRule_layer (const ::lefiViaRule* obj, int  index) {$/;"	f
lefiViaRule_name	clef/xlefiViaRule.cpp	/^char* lefiViaRule_name (const ::lefiViaRule* obj) {$/;"	f
lefiViaRule_numLayers	clef/xlefiViaRule.cpp	/^int lefiViaRule_numLayers (const ::lefiViaRule* obj) {$/;"	f
lefiViaRule_numProps	clef/xlefiViaRule.cpp	/^int lefiViaRule_numProps (const ::lefiViaRule* obj) {$/;"	f
lefiViaRule_numVias	clef/xlefiViaRule.cpp	/^int lefiViaRule_numVias (const ::lefiViaRule* obj) {$/;"	f
lefiViaRule_print	clef/xlefiViaRule.cpp	/^void lefiViaRule_print (const ::lefiViaRule* obj, FILE*  f) {$/;"	f
lefiViaRule_propIsNumber	clef/xlefiViaRule.cpp	/^int lefiViaRule_propIsNumber (const ::lefiViaRule* obj, int  index) {$/;"	f
lefiViaRule_propIsString	clef/xlefiViaRule.cpp	/^int lefiViaRule_propIsString (const ::lefiViaRule* obj, int  index) {$/;"	f
lefiViaRule_propName	clef/xlefiViaRule.cpp	/^const char* lefiViaRule_propName (const ::lefiViaRule* obj, int  index) {$/;"	f
lefiViaRule_propNumber	clef/xlefiViaRule.cpp	/^double lefiViaRule_propNumber (const ::lefiViaRule* obj, int  index) {$/;"	f
lefiViaRule_propType	clef/xlefiViaRule.cpp	/^const char lefiViaRule_propType (const ::lefiViaRule* obj, int  index) {$/;"	f
lefiViaRule_propValue	clef/xlefiViaRule.cpp	/^const char* lefiViaRule_propValue (const ::lefiViaRule* obj, int  index) {$/;"	f
lefiViaRule_viaName	clef/xlefiViaRule.cpp	/^char* lefiViaRule_viaName (const ::lefiViaRule* obj, int  index) {$/;"	f
lefiVia_botMetalLayer	clef/xlefiVia.cpp	/^const char* lefiVia_botMetalLayer (const ::lefiVia* obj) {$/;"	f
lefiVia_cutLayer	clef/xlefiVia.cpp	/^const char* lefiVia_cutLayer (const ::lefiVia* obj) {$/;"	f
lefiVia_cutPattern	clef/xlefiVia.cpp	/^const char* lefiVia_cutPattern (const ::lefiVia* obj) {$/;"	f
lefiVia_foreign	clef/xlefiVia.cpp	/^char* lefiVia_foreign (const ::lefiVia* obj) {$/;"	f
lefiVia_foreignOrient	clef/xlefiVia.cpp	/^int lefiVia_foreignOrient (const ::lefiVia* obj) {$/;"	f
lefiVia_foreignOrientStr	clef/xlefiVia.cpp	/^char* lefiVia_foreignOrientStr (const ::lefiVia* obj) {$/;"	f
lefiVia_foreignX	clef/xlefiVia.cpp	/^double lefiVia_foreignX (const ::lefiVia* obj) {$/;"	f
lefiVia_foreignY	clef/xlefiVia.cpp	/^double lefiVia_foreignY (const ::lefiVia* obj) {$/;"	f
lefiVia_getPolygon	clef/xlefiVia.cpp	/^::lefiGeomPolygon lefiVia_getPolygon (const ::lefiVia* obj, int  layerNum, int  polyNum) {$/;"	f
lefiVia_h	lef/lefiVia.hpp	31;"	d
lefiVia_hasCutPattern	clef/xlefiVia.cpp	/^int lefiVia_hasCutPattern (const ::lefiVia* obj) {$/;"	f
lefiVia_hasDefault	clef/xlefiVia.cpp	/^int lefiVia_hasDefault (const ::lefiVia* obj) {$/;"	f
lefiVia_hasForeign	clef/xlefiVia.cpp	/^int lefiVia_hasForeign (const ::lefiVia* obj) {$/;"	f
lefiVia_hasForeignOrient	clef/xlefiVia.cpp	/^int lefiVia_hasForeignOrient (const ::lefiVia* obj) {$/;"	f
lefiVia_hasForeignPnt	clef/xlefiVia.cpp	/^int lefiVia_hasForeignPnt (const ::lefiVia* obj) {$/;"	f
lefiVia_hasGenerated	clef/xlefiVia.cpp	/^int lefiVia_hasGenerated (const ::lefiVia* obj) {$/;"	f
lefiVia_hasOffset	clef/xlefiVia.cpp	/^int lefiVia_hasOffset (const ::lefiVia* obj) {$/;"	f
lefiVia_hasOrigin	clef/xlefiVia.cpp	/^int lefiVia_hasOrigin (const ::lefiVia* obj) {$/;"	f
lefiVia_hasProperties	clef/xlefiVia.cpp	/^int lefiVia_hasProperties (const ::lefiVia* obj) {$/;"	f
lefiVia_hasResistance	clef/xlefiVia.cpp	/^int lefiVia_hasResistance (const ::lefiVia* obj) {$/;"	f
lefiVia_hasRowCol	clef/xlefiVia.cpp	/^int lefiVia_hasRowCol (const ::lefiVia* obj) {$/;"	f
lefiVia_hasTopOfStack	clef/xlefiVia.cpp	/^int lefiVia_hasTopOfStack (const ::lefiVia* obj) {$/;"	f
lefiVia_hasViaRule	clef/xlefiVia.cpp	/^int lefiVia_hasViaRule (const ::lefiVia* obj) {$/;"	f
lefiVia_layerName	clef/xlefiVia.cpp	/^char* lefiVia_layerName (const ::lefiVia* obj, int  layerNum) {$/;"	f
lefiVia_name	clef/xlefiVia.cpp	/^char* lefiVia_name (const ::lefiVia* obj) {$/;"	f
lefiVia_numCutCols	clef/xlefiVia.cpp	/^int lefiVia_numCutCols (const ::lefiVia* obj) {$/;"	f
lefiVia_numCutRows	clef/xlefiVia.cpp	/^int lefiVia_numCutRows (const ::lefiVia* obj) {$/;"	f
lefiVia_numLayers	clef/xlefiVia.cpp	/^int lefiVia_numLayers (const ::lefiVia* obj) {$/;"	f
lefiVia_numPolygons	clef/xlefiVia.cpp	/^int lefiVia_numPolygons (const ::lefiVia* obj, int  layerNum) {$/;"	f
lefiVia_numProperties	clef/xlefiVia.cpp	/^int lefiVia_numProperties (const ::lefiVia* obj) {$/;"	f
lefiVia_numRects	clef/xlefiVia.cpp	/^int lefiVia_numRects (const ::lefiVia* obj, int  layerNum) {$/;"	f
lefiVia_polyColorMask	clef/xlefiVia.cpp	/^int lefiVia_polyColorMask (const ::lefiVia* obj, int  layerNum, int  polyNum) {$/;"	f
lefiVia_print	clef/xlefiVia.cpp	/^void lefiVia_print (const ::lefiVia* obj, FILE*  f) {$/;"	f
lefiVia_propIsNumber	clef/xlefiVia.cpp	/^int lefiVia_propIsNumber (const ::lefiVia* obj, int  index) {$/;"	f
lefiVia_propIsString	clef/xlefiVia.cpp	/^int lefiVia_propIsString (const ::lefiVia* obj, int  index) {$/;"	f
lefiVia_propName	clef/xlefiVia.cpp	/^char* lefiVia_propName (const ::lefiVia* obj, int  index) {$/;"	f
lefiVia_propNumber	clef/xlefiVia.cpp	/^double lefiVia_propNumber (const ::lefiVia* obj, int  index) {$/;"	f
lefiVia_propType	clef/xlefiVia.cpp	/^char lefiVia_propType (const ::lefiVia* obj, int  index) {$/;"	f
lefiVia_propValue	clef/xlefiVia.cpp	/^char* lefiVia_propValue (const ::lefiVia* obj, int  index) {$/;"	f
lefiVia_rectColorMask	clef/xlefiVia.cpp	/^int lefiVia_rectColorMask (const ::lefiVia* obj, int  layerNum, int  rectNum) {$/;"	f
lefiVia_resistance	clef/xlefiVia.cpp	/^double lefiVia_resistance (const ::lefiVia* obj) {$/;"	f
lefiVia_topMetalLayer	clef/xlefiVia.cpp	/^const char* lefiVia_topMetalLayer (const ::lefiVia* obj) {$/;"	f
lefiVia_viaRuleName	clef/xlefiVia.cpp	/^const char* lefiVia_viaRuleName (const ::lefiVia* obj) {$/;"	f
lefiVia_xBotEnc	clef/xlefiVia.cpp	/^double lefiVia_xBotEnc (const ::lefiVia* obj) {$/;"	f
lefiVia_xBotOffset	clef/xlefiVia.cpp	/^double lefiVia_xBotOffset (const ::lefiVia* obj) {$/;"	f
lefiVia_xCutSize	clef/xlefiVia.cpp	/^double lefiVia_xCutSize (const ::lefiVia* obj) {$/;"	f
lefiVia_xCutSpacing	clef/xlefiVia.cpp	/^double lefiVia_xCutSpacing (const ::lefiVia* obj) {$/;"	f
lefiVia_xOffset	clef/xlefiVia.cpp	/^double lefiVia_xOffset (const ::lefiVia* obj) {$/;"	f
lefiVia_xTopEnc	clef/xlefiVia.cpp	/^double lefiVia_xTopEnc (const ::lefiVia* obj) {$/;"	f
lefiVia_xTopOffset	clef/xlefiVia.cpp	/^double lefiVia_xTopOffset (const ::lefiVia* obj) {$/;"	f
lefiVia_xh	clef/xlefiVia.cpp	/^double lefiVia_xh (const ::lefiVia* obj, int  layerNum, int  rectNum) {$/;"	f
lefiVia_xl	clef/xlefiVia.cpp	/^double lefiVia_xl (const ::lefiVia* obj, int  layerNum, int  rectNum) {$/;"	f
lefiVia_yBotEnc	clef/xlefiVia.cpp	/^double lefiVia_yBotEnc (const ::lefiVia* obj) {$/;"	f
lefiVia_yBotOffset	clef/xlefiVia.cpp	/^double lefiVia_yBotOffset (const ::lefiVia* obj) {$/;"	f
lefiVia_yCutSize	clef/xlefiVia.cpp	/^double lefiVia_yCutSize (const ::lefiVia* obj) {$/;"	f
lefiVia_yCutSpacing	clef/xlefiVia.cpp	/^double lefiVia_yCutSpacing (const ::lefiVia* obj) {$/;"	f
lefiVia_yOffset	clef/xlefiVia.cpp	/^double lefiVia_yOffset (const ::lefiVia* obj) {$/;"	f
lefiVia_yTopEnc	clef/xlefiVia.cpp	/^double lefiVia_yTopEnc (const ::lefiVia* obj) {$/;"	f
lefiVia_yTopOffset	clef/xlefiVia.cpp	/^double lefiVia_yTopOffset (const ::lefiVia* obj) {$/;"	f
lefiVia_yh	clef/xlefiVia.cpp	/^double lefiVia_yh (const ::lefiVia* obj, int  layerNum, int  rectNum) {$/;"	f
lefiVia_yl	clef/xlefiVia.cpp	/^double lefiVia_yl (const ::lefiVia* obj, int  layerNum, int  rectNum) {$/;"	f
leflVal	lef/lefrData.hpp	/^    double  leflVal; $/;"	m	class:lefrData
lefrAntennaInoutCbkType	clef/lefrReader.h	/^  lefrAntennaInoutCbkType = 41,$/;"	e	enum:__anon2
lefrAntennaInoutCbkType	lef/lefrReader.hpp	/^  lefrAntennaInoutCbkType,$/;"	e	enum:__anon6
lefrAntennaInputCbkType	clef/lefrReader.h	/^  lefrAntennaInputCbkType = 40,$/;"	e	enum:__anon2
lefrAntennaInputCbkType	lef/lefrReader.hpp	/^  lefrAntennaInputCbkType,$/;"	e	enum:__anon6
lefrAntennaOutputCbkType	clef/lefrReader.h	/^  lefrAntennaOutputCbkType = 42,$/;"	e	enum:__anon2
lefrAntennaOutputCbkType	lef/lefrReader.hpp	/^  lefrAntennaOutputCbkType,$/;"	e	enum:__anon6
lefrAntennaPWLPtr	lef/lefrData.hpp	/^    lefiAntennaPWL*  lefrAntennaPWLPtr; $/;"	m	class:lefrData
lefrArray	lef/lefrData.hpp	/^    lefiArray  lefrArray; $/;"	m	class:lefrData
lefrArrayBeginCbkType	clef/lefrReader.h	/^  lefrArrayBeginCbkType = 27,$/;"	e	enum:__anon2
lefrArrayBeginCbkType	lef/lefrReader.hpp	/^  lefrArrayBeginCbkType,$/;"	e	enum:__anon6
lefrArrayCbkFnType	clef/lefrReader.h	/^typedef int (*lefrArrayCbkFnType) (lefrCallbackType_e, lefiArray* l, lefiUserData);$/;"	t
lefrArrayCbkFnType	lef/lefrReader.hpp	/^typedef int (*lefrArrayCbkFnType) (lefrCallbackType_e, $/;"	t
lefrArrayCbkType	clef/lefrReader.h	/^  lefrArrayCbkType = 24,$/;"	e	enum:__anon2
lefrArrayCbkType	lef/lefrReader.hpp	/^  lefrArrayCbkType,$/;"	e	enum:__anon6
lefrArrayEndCbkType	clef/lefrReader.h	/^  lefrArrayEndCbkType = 28,$/;"	e	enum:__anon2
lefrArrayEndCbkType	lef/lefrReader.hpp	/^  lefrArrayEndCbkType,$/;"	e	enum:__anon6
lefrBusBitCharsCbkType	clef/lefrReader.h	/^  lefrBusBitCharsCbkType = 4,$/;"	e	enum:__anon2
lefrBusBitCharsCbkType	lef/lefrReader.hpp	/^  lefrBusBitCharsCbkType,$/;"	e	enum:__anon6
lefrCallbackType_e	clef/lefrReader.h	/^} lefrCallbackType_e;$/;"	t	typeref:enum:__anon2
lefrCallbackType_e	lef/lefrReader.hpp	/^} lefrCallbackType_e;$/;"	t	typeref:enum:__anon6
lefrCallbacks	lef/lefrCallBacks.hpp	/^class lefrCallbacks {$/;"	c
lefrCallbacks	lef/lefrCallbacks.cpp	/^lefrCallbacks::lefrCallbacks()$/;"	f	class:lefrCallbacks
lefrCallbacks_h	lef/lefrCallBacks.hpp	31;"	d
lefrCaseSensitiveCbkType	clef/lefrReader.h	/^  lefrCaseSensitiveCbkType = 6,$/;"	e	enum:__anon2
lefrCaseSensitiveCbkType	lef/lefrReader.hpp	/^  lefrCaseSensitiveCbkType,$/;"	e	enum:__anon6
lefrClear	clef/xlefrReader.cpp	/^int lefrClear () {$/;"	f
lefrClear	lef/lefrReader.cpp	/^lefrClear()$/;"	f
lefrClearanceMeasureCbkType	clef/lefrReader.h	/^  lefrClearanceMeasureCbkType = 45,$/;"	e	enum:__anon2
lefrClearanceMeasureCbkType	lef/lefrReader.hpp	/^  lefrClearanceMeasureCbkType,$/;"	e	enum:__anon6
lefrCompProp	lef/lefrSettings.hpp	/^    lefiPropType  lefrCompProp; $/;"	m	class:lefrProps
lefrCorrectionTable	lef/lefrData.hpp	/^    lefiCorrectionTable  lefrCorrectionTable; $/;"	m	class:lefrData
lefrCorrectionTableCbkFnType	clef/lefrReader.h	/^typedef int (*lefrCorrectionTableCbkFnType) (lefrCallbackType_e, lefiCorrectionTable* p, lefiUserData);$/;"	t
lefrCorrectionTableCbkFnType	lef/lefrReader.hpp	/^typedef int (*lefrCorrectionTableCbkFnType) (lefrCallbackType_e, $/;"	t
lefrCorrectionTableCbkType	clef/lefrReader.h	/^  lefrCorrectionTableCbkType = 36,$/;"	e	enum:__anon2
lefrCorrectionTableCbkType	lef/lefrReader.hpp	/^  lefrCorrectionTableCbkType,$/;"	e	enum:__anon6
lefrCountFunc	lef/lefrReader.cpp	/^lefrCountFunc(lefrCallbackType_e    e,$/;"	f
lefrData	lef/lefrData.cpp	/^lefrData::lefrData()$/;"	f	class:lefrData
lefrData	lef/lefrData.hpp	/^class lefrData {$/;"	c
lefrData_h	lef/lefrData.hpp	31;"	d
lefrDensity	lef/lefrData.hpp	/^    lefiDensity  lefrDensity; $/;"	m	class:lefrData
lefrDensityCbkFnType	clef/lefrReader.h	/^typedef int (*lefrDensityCbkFnType) (lefrCallbackType_e, lefiDensity* l, lefiUserData);$/;"	t
lefrDensityCbkFnType	lef/lefrReader.hpp	/^typedef int (*lefrDensityCbkFnType) (lefrCallbackType_e, $/;"	t
lefrDensityCbkType	clef/lefrReader.h	/^  lefrDensityCbkType = 54,$/;"	e	enum:__anon2
lefrDensityCbkType	lef/lefrReader.hpp	/^  lefrDensityCbkType,$/;"	e	enum:__anon6
lefrDielectricCbkType	clef/lefrReader.h	/^  lefrDielectricCbkType = 16,$/;"	e	enum:__anon2
lefrDielectricCbkType	lef/lefrReader.hpp	/^  lefrDielectricCbkType,$/;"	e	enum:__anon6
lefrDisableAllMsgs	clef/xlefrReader.cpp	/^void lefrDisableAllMsgs () {$/;"	f
lefrDisableAllMsgs	lef/lefrReader.cpp	/^lefrDisableAllMsgs()$/;"	f
lefrDisableParserMsgs	clef/xlefrReader.cpp	/^void lefrDisableParserMsgs (int  nMsg, int*  msgs) {$/;"	f
lefrDisableParserMsgs	lef/lefrReader.cpp	/^lefrDisableParserMsgs(int   nMsg,$/;"	f
lefrDisablePropStrProcess	clef/xlefrReader.cpp	/^void lefrDisablePropStrProcess () {$/;"	f
lefrDisablePropStrProcess	lef/lefrReader.cpp	/^lefrDisablePropStrProcess()$/;"	f
lefrDividerCharCbkType	clef/lefrReader.h	/^  lefrDividerCharCbkType = 3,$/;"	e	enum:__anon2
lefrDividerCharCbkType	lef/lefrReader.hpp	/^  lefrDividerCharCbkType,$/;"	e	enum:__anon6
lefrDoGcell	lef/lefrData.hpp	/^    int  lefrDoGcell; $/;"	m	class:lefrData
lefrDoGeometries	lef/lefrData.hpp	/^    int  lefrDoGeometries; $/;"	m	class:lefrData
lefrDoSite	lef/lefrData.hpp	/^    int  lefrDoSite; $/;"	m	class:lefrData
lefrDoTrack	lef/lefrData.hpp	/^    int  lefrDoTrack;$/;"	m	class:lefrData
lefrDoubleCbkFnType	clef/lefrReader.h	/^typedef int (*lefrDoubleCbkFnType) (lefrCallbackType_e, double number, lefiUserData);$/;"	t
lefrDoubleCbkFnType	lef/lefrReader.hpp	/^typedef int (*lefrDoubleCbkFnType) (lefrCallbackType_e, $/;"	t
lefrEdgeRateScaleFactorCbkType	clef/lefrReader.h	/^  lefrEdgeRateScaleFactorCbkType = 34,$/;"	e	enum:__anon2
lefrEdgeRateScaleFactorCbkType	lef/lefrReader.hpp	/^  lefrEdgeRateScaleFactorCbkType,$/;"	e	enum:__anon6
lefrEdgeRateThreshold1CbkType	clef/lefrReader.h	/^  lefrEdgeRateThreshold1CbkType = 32,$/;"	e	enum:__anon2
lefrEdgeRateThreshold1CbkType	lef/lefrReader.hpp	/^  lefrEdgeRateThreshold1CbkType,$/;"	e	enum:__anon6
lefrEdgeRateThreshold2CbkType	clef/lefrReader.h	/^  lefrEdgeRateThreshold2CbkType = 33,$/;"	e	enum:__anon2
lefrEdgeRateThreshold2CbkType	lef/lefrReader.hpp	/^  lefrEdgeRateThreshold2CbkType,$/;"	e	enum:__anon6
lefrEnableAllMsgs	clef/xlefrReader.cpp	/^void lefrEnableAllMsgs () {$/;"	f
lefrEnableAllMsgs	lef/lefrReader.cpp	/^lefrEnableAllMsgs()$/;"	f
lefrEnableParserMsgs	clef/xlefrReader.cpp	/^void lefrEnableParserMsgs (int  nMsg, int*  msgs) {$/;"	f
lefrEnableParserMsgs	lef/lefrReader.cpp	/^lefrEnableParserMsgs(int    nMsg,$/;"	f
lefrEnableReadEncrypted	clef/xlefiEncryptInt.cpp	/^void lefrEnableReadEncrypted () {$/;"	f
lefrEnableReadEncrypted	lef/lefiEncryptInt.cpp	/^lefrEnableReadEncrypted()$/;"	f
lefrErrMsg	lef/lefrData.hpp	/^    char       lefrErrMsg[1024];$/;"	m	class:lefrData
lefrExtensionCbkType	clef/lefrReader.h	/^  lefrExtensionCbkType = 53,$/;"	e	enum:__anon2
lefrExtensionCbkType	lef/lefrReader.hpp	/^  lefrExtensionCbkType,$/;"	e	enum:__anon6
lefrFName	clef/xlefrReader.cpp	/^const char * lefrFName () {$/;"	f
lefrFName	lef/lefrReader.cpp	/^lefrFName()$/;"	f
lefrFile	lef/lefrData.hpp	/^    FILE*  lefrFile; $/;"	m	class:lefrData
lefrFileName	lef/lefrData.hpp	/^    char*  lefrFileName; $/;"	m	class:lefrData
lefrFixedMaskCbkType	clef/lefrReader.h	/^  lefrFixedMaskCbkType = 55,$/;"	e	enum:__anon2
lefrFixedMaskCbkType	lef/lefrReader.hpp	/^  lefrFixedMaskCbkType,$/;"	e	enum:__anon6
lefrGcellPatternPtr	lef/lefrData.hpp	/^    lefiGcellPattern*  lefrGcellPatternPtr; $/;"	m	class:lefrData
lefrGeometriesPtr	lef/lefrData.hpp	/^    lefiGeometries*  lefrGeometriesPtr; $/;"	m	class:lefrData
lefrGetUserData	clef/xlefrReader.cpp	/^lefiUserData lefrGetUserData () {$/;"	f
lefrGetUserData	lef/lefrReader.cpp	/^lefrGetUserData()$/;"	f
lefrHasLayer	lef/lefrData.hpp	/^    int  lefrHasLayer; \/\/ 5.5 this & lefrHasMaxVS is to keep track that$/;"	m	class:lefrData
lefrHasMaxVS	lef/lefrData.hpp	/^    int  lefrHasMaxVS; \/\/ MAXVIASTACK has to be after all layers$/;"	m	class:lefrData
lefrHasSpacing	lef/lefrData.hpp	/^    int  lefrHasSpacing; \/\/ keep track of spacing in a layer$/;"	m	class:lefrData
lefrHasSpacingTbl	lef/lefrData.hpp	/^    int  lefrHasSpacingTbl; \/\/ keep track of spacing table in a layer$/;"	m	class:lefrData
lefrIRDrop	lef/lefrData.hpp	/^    lefiIRDrop  lefrIRDrop; $/;"	m	class:lefrData
lefrIRDropBeginCbkType	clef/lefrReader.h	/^  lefrIRDropBeginCbkType = 29,$/;"	e	enum:__anon2
lefrIRDropBeginCbkType	lef/lefrReader.hpp	/^  lefrIRDropBeginCbkType,$/;"	e	enum:__anon6
lefrIRDropCbkFnType	clef/lefrReader.h	/^typedef int (*lefrIRDropCbkFnType) (lefrCallbackType_e, lefiIRDrop* l, lefiUserData);$/;"	t
lefrIRDropCbkFnType	lef/lefrReader.hpp	/^typedef int (*lefrIRDropCbkFnType) (lefrCallbackType_e, $/;"	t
lefrIRDropCbkType	clef/lefrReader.h	/^  lefrIRDropCbkType = 15,$/;"	e	enum:__anon2
lefrIRDropCbkType	lef/lefrReader.hpp	/^  lefrIRDropCbkType,$/;"	e	enum:__anon6
lefrIRDropEndCbkType	clef/lefrReader.h	/^  lefrIRDropEndCbkType = 30,$/;"	e	enum:__anon2
lefrIRDropEndCbkType	lef/lefrReader.hpp	/^  lefrIRDropEndCbkType,$/;"	e	enum:__anon6
lefrInit	clef/xlefrReader.cpp	/^int lefrInit () {$/;"	f
lefrInit	lef/lefrReader.cpp	/^lefrInit()$/;"	f
lefrInitSession	clef/xlefrReader.cpp	/^int lefrInitSession (int  startSession) {$/;"	f
lefrInitSession	lef/lefrReader.cpp	/^lefrInitSession(int startSession)$/;"	f
lefrInoutAntennaCbkType	clef/lefrReader.h	/^  lefrInoutAntennaCbkType = 39,$/;"	e	enum:__anon2
lefrInoutAntennaCbkType	lef/lefrReader.hpp	/^  lefrInoutAntennaCbkType,$/;"	e	enum:__anon6
lefrInputAntennaCbkType	clef/lefrReader.h	/^  lefrInputAntennaCbkType = 37,$/;"	e	enum:__anon2
lefrInputAntennaCbkType	lef/lefrReader.hpp	/^  lefrInputAntennaCbkType,$/;"	e	enum:__anon6
lefrIntegerCbkFnType	clef/lefrReader.h	/^typedef int (*lefrIntegerCbkFnType) (lefrCallbackType_e, int number, lefiUserData);$/;"	t
lefrIntegerCbkFnType	lef/lefrReader.hpp	/^typedef int (*lefrIntegerCbkFnType) (lefrCallbackType_e, $/;"	t
lefrLayer	lef/lefrData.hpp	/^    lefiLayer  lefrLayer; $/;"	m	class:lefrData
lefrLayerCbkFnType	clef/lefrReader.h	/^typedef int (*lefrLayerCbkFnType) (lefrCallbackType_e, lefiLayer* l, lefiUserData);$/;"	t
lefrLayerCbkFnType	lef/lefrReader.hpp	/^typedef int (*lefrLayerCbkFnType) (lefrCallbackType_e, $/;"	t
lefrLayerCbkType	clef/lefrReader.h	/^  lefrLayerCbkType = 11,$/;"	e	enum:__anon2
lefrLayerCbkType	lef/lefrReader.hpp	/^  lefrLayerCbkType,$/;"	e	enum:__anon6
lefrLayerProp	lef/lefrSettings.hpp	/^    lefiPropType  lefrLayerProp; $/;"	m	class:lefrProps
lefrLibProp	lef/lefrSettings.hpp	/^    lefiPropType  lefrLibProp; $/;"	m	class:lefrProps
lefrLibraryEndCbkType	clef/lefrReader.h	/^  lefrLibraryEndCbkType = 58$/;"	e	enum:__anon2
lefrLibraryEndCbkType	lef/lefrReader.hpp	/^  lefrLibraryEndCbkType$/;"	e	enum:__anon6
lefrLineNumber	clef/xlefrReader.cpp	/^int lefrLineNumber () {$/;"	f
lefrLineNumber	lef/lefrReader.cpp	/^lefrLineNumber()$/;"	f
lefrLog	lef/lefrData.hpp	/^    FILE*  lefrLog; $/;"	m	class:lefrData
lefrMacro	lef/lefrData.hpp	/^    lefiMacro  lefrMacro; $/;"	m	class:lefrData
lefrMacroBeginCbkType	clef/lefrReader.h	/^  lefrMacroBeginCbkType = 20,$/;"	e	enum:__anon2
lefrMacroBeginCbkType	lef/lefrReader.hpp	/^  lefrMacroBeginCbkType,$/;"	e	enum:__anon6
lefrMacroCbkFnType	clef/lefrReader.h	/^typedef int (*lefrMacroCbkFnType) (lefrCallbackType_e, lefiMacro* l, lefiUserData);$/;"	t
lefrMacroCbkFnType	lef/lefrReader.hpp	/^typedef int (*lefrMacroCbkFnType) (lefrCallbackType_e, $/;"	t
lefrMacroCbkType	clef/lefrReader.h	/^  lefrMacroCbkType = 22,$/;"	e	enum:__anon2
lefrMacroCbkType	lef/lefrReader.hpp	/^  lefrMacroCbkType,$/;"	e	enum:__anon6
lefrMacroClassTypeCbkType	clef/lefrReader.h	/^  lefrMacroClassTypeCbkType = 47,$/;"	e	enum:__anon2
lefrMacroClassTypeCbkType	lef/lefrReader.hpp	/^  lefrMacroClassTypeCbkType,$/;"	e	enum:__anon6
lefrMacroEndCbkType	clef/lefrReader.h	/^  lefrMacroEndCbkType = 51,$/;"	e	enum:__anon2
lefrMacroEndCbkType	lef/lefrReader.hpp	/^  lefrMacroEndCbkType,$/;"	e	enum:__anon6
lefrMacroFixedMaskCbkType	clef/lefrReader.h	/^  lefrMacroFixedMaskCbkType = 50,$/;"	e	enum:__anon2
lefrMacroFixedMaskCbkType	lef/lefrReader.hpp	/^  lefrMacroFixedMaskCbkType,$/;"	e	enum:__anon6
lefrMacroForeignCbkFnType	lef/lefrReader.hpp	/^typedef int (*lefrMacroForeignCbkFnType) (lefrCallbackType_e, $/;"	t
lefrMacroForeignCbkType	clef/lefrReader.h	/^  lefrMacroForeignCbkType = 57,$/;"	e	enum:__anon2
lefrMacroForeignCbkType	lef/lefrReader.hpp	/^  lefrMacroForeignCbkType,$/;"	e	enum:__anon6
lefrMacroNumCbkFnType	clef/lefrReader.h	/^typedef int (*lefrMacroNumCbkFnType) (lefrCallbackType_e, lefiNum l, lefiUserData);$/;"	t
lefrMacroNumCbkFnType	lef/lefrReader.hpp	/^typedef int (*lefrMacroNumCbkFnType) (lefrCallbackType_e, $/;"	t
lefrMacroOriginCbkType	clef/lefrReader.h	/^  lefrMacroOriginCbkType = 48,$/;"	e	enum:__anon2
lefrMacroOriginCbkType	lef/lefrReader.hpp	/^  lefrMacroOriginCbkType,$/;"	e	enum:__anon6
lefrMacroProp	lef/lefrSettings.hpp	/^    lefiPropType  lefrMacroProp; $/;"	m	class:lefrProps
lefrMacroSiteCbkFnType	lef/lefrReader.hpp	/^typedef int (*lefrMacroSiteCbkFnType) (lefrCallbackType_e, $/;"	t
lefrMacroSiteCbkType	clef/lefrReader.h	/^  lefrMacroSiteCbkType = 56,$/;"	e	enum:__anon2
lefrMacroSiteCbkType	lef/lefrReader.hpp	/^  lefrMacroSiteCbkType,$/;"	e	enum:__anon6
lefrMacroSizeCbkType	clef/lefrReader.h	/^  lefrMacroSizeCbkType = 49,$/;"	e	enum:__anon2
lefrMacroSizeCbkType	lef/lefrReader.hpp	/^  lefrMacroSizeCbkType,$/;"	e	enum:__anon6
lefrManufacturingCbkType	clef/lefrReader.h	/^  lefrManufacturingCbkType = 43,$/;"	e	enum:__anon2
lefrManufacturingCbkType	lef/lefrReader.hpp	/^  lefrManufacturingCbkType,$/;"	e	enum:__anon6
lefrMaxStackVia	lef/lefrData.hpp	/^    lefiMaxStackVia  lefrMaxStackVia; \/\/ 5.5$/;"	m	class:lefrData
lefrMaxStackViaCbkFnType	clef/lefrReader.h	/^typedef int (*lefrMaxStackViaCbkFnType) (lefrCallbackType_e, lefiMaxStackVia* l, lefiUserData);$/;"	t
lefrMaxStackViaCbkFnType	lef/lefrReader.hpp	/^typedef int (*lefrMaxStackViaCbkFnType) (lefrCallbackType_e, $/;"	t
lefrMaxStackViaCbkType	clef/lefrReader.h	/^  lefrMaxStackViaCbkType = 52,$/;"	e	enum:__anon2
lefrMaxStackViaCbkType	lef/lefrReader.hpp	/^  lefrMaxStackViaCbkType,$/;"	e	enum:__anon6
lefrMinFeature	lef/lefrData.hpp	/^    lefiMinFeature  lefrMinFeature; $/;"	m	class:lefrData
lefrMinFeatureCbkFnType	clef/lefrReader.h	/^typedef int (*lefrMinFeatureCbkFnType) (lefrCallbackType_e, lefiMinFeature* l, lefiUserData);$/;"	t
lefrMinFeatureCbkFnType	lef/lefrReader.hpp	/^typedef int (*lefrMinFeatureCbkFnType) (lefrCallbackType_e, $/;"	t
lefrMinFeatureCbkType	clef/lefrReader.h	/^  lefrMinFeatureCbkType = 17,$/;"	e	enum:__anon2
lefrMinFeatureCbkType	lef/lefrReader.hpp	/^  lefrMinFeatureCbkType,$/;"	e	enum:__anon6
lefrNoWireExtensionCbkType	clef/lefrReader.h	/^  lefrNoWireExtensionCbkType = 7,$/;"	e	enum:__anon2
lefrNoWireExtensionCbkType	lef/lefrReader.hpp	/^  lefrNoWireExtensionCbkType,$/;"	e	enum:__anon6
lefrNoiseMargin	lef/lefrData.hpp	/^    lefiNoiseMargin  lefrNoiseMargin; $/;"	m	class:lefrData
lefrNoiseMarginCbkFnType	clef/lefrReader.h	/^typedef int (*lefrNoiseMarginCbkFnType) (lefrCallbackType_e, struct lefiNoiseMargin* p, lefiUserData);$/;"	t
lefrNoiseMarginCbkFnType	lef/lefrReader.hpp	/^typedef int (*lefrNoiseMarginCbkFnType) (lefrCallbackType_e, $/;"	t
lefrNoiseMarginCbkType	clef/lefrReader.h	/^  lefrNoiseMarginCbkType = 31,$/;"	e	enum:__anon2
lefrNoiseMarginCbkType	lef/lefrReader.hpp	/^  lefrNoiseMarginCbkType,$/;"	e	enum:__anon6
lefrNoiseTable	lef/lefrData.hpp	/^    lefiNoiseTable  lefrNoiseTable; $/;"	m	class:lefrData
lefrNoiseTableCbkFnType	clef/lefrReader.h	/^typedef int (*lefrNoiseTableCbkFnType) (lefrCallbackType_e, lefiNoiseTable* p, lefiUserData);$/;"	t
lefrNoiseTableCbkFnType	lef/lefrReader.hpp	/^typedef int (*lefrNoiseTableCbkFnType) (lefrCallbackType_e, $/;"	t
lefrNoiseTableCbkType	clef/lefrReader.h	/^  lefrNoiseTableCbkType = 35,$/;"	e	enum:__anon2
lefrNoiseTableCbkType	lef/lefrReader.hpp	/^  lefrNoiseTableCbkType,$/;"	e	enum:__anon6
lefrNonDefault	lef/lefrData.hpp	/^    lefiNonDefault  lefrNonDefault; $/;"	m	class:lefrData
lefrNonDefaultCbkFnType	clef/lefrReader.h	/^typedef int (*lefrNonDefaultCbkFnType) (lefrCallbackType_e, lefiNonDefault* l, lefiUserData);$/;"	t
lefrNonDefaultCbkFnType	lef/lefrReader.hpp	/^typedef int (*lefrNonDefaultCbkFnType) (lefrCallbackType_e, $/;"	t
lefrNonDefaultCbkType	clef/lefrReader.h	/^  lefrNonDefaultCbkType = 18,$/;"	e	enum:__anon2
lefrNonDefaultCbkType	lef/lefrReader.hpp	/^  lefrNonDefaultCbkType,$/;"	e	enum:__anon6
lefrNondefProp	lef/lefrSettings.hpp	/^    lefiPropType  lefrNondefProp; $/;"	m	class:lefrProps
lefrObstruction	lef/lefrData.hpp	/^    lefiObstruction  lefrObstruction; $/;"	m	class:lefrData
lefrObstructionCbkFnType	clef/lefrReader.h	/^typedef int (*lefrObstructionCbkFnType) (lefrCallbackType_e, lefiObstruction* l, lefiUserData);$/;"	t
lefrObstructionCbkFnType	lef/lefrReader.hpp	/^typedef int (*lefrObstructionCbkFnType) (lefrCallbackType_e, $/;"	t
lefrObstructionCbkType	clef/lefrReader.h	/^  lefrObstructionCbkType = 23,$/;"	e	enum:__anon2
lefrObstructionCbkType	lef/lefrReader.hpp	/^  lefrObstructionCbkType,$/;"	e	enum:__anon6
lefrOutputAntennaCbkType	clef/lefrReader.h	/^  lefrOutputAntennaCbkType = 38,$/;"	e	enum:__anon2
lefrOutputAntennaCbkType	lef/lefrReader.hpp	/^  lefrOutputAntennaCbkType,$/;"	e	enum:__anon6
lefrPin	lef/lefrData.hpp	/^    lefiPin  lefrPin; $/;"	m	class:lefrData
lefrPinCbkFnType	clef/lefrReader.h	/^typedef int (*lefrPinCbkFnType) (lefrCallbackType_e, lefiPin* l, lefiUserData);$/;"	t
lefrPinCbkFnType	lef/lefrReader.hpp	/^typedef int (*lefrPinCbkFnType) (lefrCallbackType_e, $/;"	t
lefrPinCbkType	clef/lefrReader.h	/^  lefrPinCbkType = 21,$/;"	e	enum:__anon2
lefrPinCbkType	lef/lefrReader.hpp	/^  lefrPinCbkType,$/;"	e	enum:__anon6
lefrPinProp	lef/lefrSettings.hpp	/^    lefiPropType  lefrPinProp; $/;"	m	class:lefrProps
lefrPrintUnusedCallbacks	clef/xlefrReader.cpp	/^void lefrPrintUnusedCallbacks (FILE*  f) {$/;"	f
lefrPrintUnusedCallbacks	lef/lefrReader.cpp	/^lefrPrintUnusedCallbacks(FILE *f)$/;"	f
lefrProp	lef/lefrData.hpp	/^    lefiProp  lefrProp; $/;"	m	class:lefrData
lefrPropBeginCbkType	clef/lefrReader.h	/^  lefrPropBeginCbkType = 8,$/;"	e	enum:__anon2
lefrPropBeginCbkType	lef/lefrReader.hpp	/^  lefrPropBeginCbkType,$/;"	e	enum:__anon6
lefrPropCbkFnType	clef/lefrReader.h	/^typedef int (*lefrPropCbkFnType) (lefrCallbackType_e, lefiProp* p, lefiUserData);$/;"	t
lefrPropCbkFnType	lef/lefrReader.hpp	/^typedef int (*lefrPropCbkFnType) (lefrCallbackType_e, $/;"	t
lefrPropCbkType	clef/lefrReader.h	/^  lefrPropCbkType = 9,$/;"	e	enum:__anon2
lefrPropCbkType	lef/lefrReader.hpp	/^  lefrPropCbkType,$/;"	e	enum:__anon6
lefrPropEndCbkType	clef/lefrReader.h	/^  lefrPropEndCbkType = 10,$/;"	e	enum:__anon2
lefrPropEndCbkType	lef/lefrReader.hpp	/^  lefrPropEndCbkType,$/;"	e	enum:__anon6
lefrProps	lef/lefrSettings.hpp	/^class lefrProps {$/;"	c
lefrRead	clef/xlefrReader.cpp	/^int lefrRead (FILE * file, const char * fileName, lefiUserData  userData) {$/;"	f
lefrRead	lef/lefrReader.cpp	/^lefrRead(FILE           *f,$/;"	f
lefrReadEncrypted	clef/lefiEncryptExt.c	/^ *\/ int lefrReadEncrypted = 0;$/;"	v
lefrReadGZip	clefzlib/clefzlib.c	/^int lefrReadGZip(lefGZFile file, const char* gzipFile, lefiUserData uData) {$/;"	f
lefrReadGZip	lefzlib/lefzlib.cpp	/^int lefrReadGZip(lefGZFile file, const char* gzipFile, lefiUserData uData) {$/;"	f
lefrRegisterLef58Type	lef/lefrReader.cpp	/^lefrRegisterLef58Type(const char *lef58Type,$/;"	f
lefrReleaseNResetMemory	clef/xlefrReader.cpp	/^int lefrReleaseNResetMemory () {$/;"	f
lefrReleaseNResetMemory	lef/lefrReader.cpp	/^lefrReleaseNResetMemory()$/;"	f
lefrReset	clef/xlefrReader.cpp	/^int lefrReset () {$/;"	f
lefrReset	lef/lefrReader.cpp	/^lefrReset()$/;"	f
lefrSetAntennaInoutCbk	clef/xlefrReader.cpp	/^void lefrSetAntennaInoutCbk (::lefrDoubleCbkFnType p0) {$/;"	f
lefrSetAntennaInoutCbk	lef/lefrReader.cpp	/^lefrSetAntennaInoutCbk(lefrDoubleCbkFnType f)$/;"	f
lefrSetAntennaInoutWarnings	clef/xlefrReader.cpp	/^void lefrSetAntennaInoutWarnings (int  warn) {$/;"	f
lefrSetAntennaInoutWarnings	lef/lefrReader.cpp	/^lefrSetAntennaInoutWarnings(int warn)$/;"	f
lefrSetAntennaInputCbk	clef/xlefrReader.cpp	/^void lefrSetAntennaInputCbk (::lefrDoubleCbkFnType p0) {$/;"	f
lefrSetAntennaInputCbk	lef/lefrReader.cpp	/^lefrSetAntennaInputCbk(lefrDoubleCbkFnType f)$/;"	f
lefrSetAntennaInputWarnings	clef/xlefrReader.cpp	/^void lefrSetAntennaInputWarnings (int  warn) {$/;"	f
lefrSetAntennaInputWarnings	lef/lefrReader.cpp	/^lefrSetAntennaInputWarnings(int warn)$/;"	f
lefrSetAntennaOutputCbk	clef/xlefrReader.cpp	/^void lefrSetAntennaOutputCbk (::lefrDoubleCbkFnType p0) {$/;"	f
lefrSetAntennaOutputCbk	lef/lefrReader.cpp	/^lefrSetAntennaOutputCbk(lefrDoubleCbkFnType f)$/;"	f
lefrSetAntennaOutputWarnings	clef/xlefrReader.cpp	/^void lefrSetAntennaOutputWarnings (int  warn) {$/;"	f
lefrSetAntennaOutputWarnings	lef/lefrReader.cpp	/^lefrSetAntennaOutputWarnings(int warn)$/;"	f
lefrSetArrayBeginCbk	clef/xlefrReader.cpp	/^void lefrSetArrayBeginCbk (::lefrStringCbkFnType p0) {$/;"	f
lefrSetArrayBeginCbk	lef/lefrReader.cpp	/^lefrSetArrayBeginCbk(lefrStringCbkFnType f)$/;"	f
lefrSetArrayCbk	clef/xlefrReader.cpp	/^void lefrSetArrayCbk (::lefrArrayCbkFnType p0) {$/;"	f
lefrSetArrayCbk	lef/lefrReader.cpp	/^lefrSetArrayCbk(lefrArrayCbkFnType f)$/;"	f
lefrSetArrayEndCbk	clef/xlefrReader.cpp	/^void lefrSetArrayEndCbk (::lefrStringCbkFnType p0) {$/;"	f
lefrSetArrayEndCbk	lef/lefrReader.cpp	/^lefrSetArrayEndCbk(lefrStringCbkFnType f)$/;"	f
lefrSetArrayWarnings	clef/xlefrReader.cpp	/^void lefrSetArrayWarnings (int  warn) {$/;"	f
lefrSetArrayWarnings	lef/lefrReader.cpp	/^lefrSetArrayWarnings(int warn)$/;"	f
lefrSetBusBitCharsCbk	clef/xlefrReader.cpp	/^void lefrSetBusBitCharsCbk (::lefrStringCbkFnType p0) {$/;"	f
lefrSetBusBitCharsCbk	lef/lefrReader.cpp	/^lefrSetBusBitCharsCbk(lefrStringCbkFnType f)$/;"	f
lefrSetCaseSensitiveCbk	clef/xlefrReader.cpp	/^void lefrSetCaseSensitiveCbk (::lefrIntegerCbkFnType p0) {$/;"	f
lefrSetCaseSensitiveCbk	lef/lefrReader.cpp	/^lefrSetCaseSensitiveCbk(lefrIntegerCbkFnType f)$/;"	f
lefrSetCaseSensitiveWarnings	clef/xlefrReader.cpp	/^void lefrSetCaseSensitiveWarnings (int  warn) {$/;"	f
lefrSetCaseSensitiveWarnings	lef/lefrReader.cpp	/^lefrSetCaseSensitiveWarnings(int warn)$/;"	f
lefrSetCaseSensitivity	clef/xlefrReader.cpp	/^void lefrSetCaseSensitivity (int  caseSense) {$/;"	f
lefrSetCaseSensitivity	lef/lefrReader.cpp	/^lefrSetCaseSensitivity(int caseSense)$/;"	f
lefrSetClearanceMeasureCbk	clef/xlefrReader.cpp	/^void lefrSetClearanceMeasureCbk (::lefrStringCbkFnType p0) {$/;"	f
lefrSetClearanceMeasureCbk	lef/lefrReader.cpp	/^lefrSetClearanceMeasureCbk(lefrStringCbkFnType f)$/;"	f
lefrSetCommentChar	clef/xlefrReader.cpp	/^void lefrSetCommentChar (char  c) {$/;"	f
lefrSetCommentChar	lef/lefrReader.cpp	/^lefrSetCommentChar(char c)$/;"	f
lefrSetCorrectionTableCbk	clef/xlefrReader.cpp	/^void lefrSetCorrectionTableCbk (::lefrCorrectionTableCbkFnType p0) {$/;"	f
lefrSetCorrectionTableCbk	lef/lefrReader.cpp	/^lefrSetCorrectionTableCbk(lefrCorrectionTableCbkFnType f)$/;"	f
lefrSetCorrectionTableWarnings	clef/xlefrReader.cpp	/^void lefrSetCorrectionTableWarnings (int  warn) {$/;"	f
lefrSetCorrectionTableWarnings	lef/lefrReader.cpp	/^lefrSetCorrectionTableWarnings(int warn)$/;"	f
lefrSetDeltaNumberLines	clef/xlefrReader.cpp	/^void lefrSetDeltaNumberLines (int p0) {$/;"	f
lefrSetDeltaNumberLines	lef/lefrReader.cpp	/^lefrSetDeltaNumberLines(int numLines)$/;"	f
lefrSetDensityCbk	clef/xlefrReader.cpp	/^void lefrSetDensityCbk (::lefrDensityCbkFnType p0) {$/;"	f
lefrSetDensityCbk	lef/lefrReader.cpp	/^lefrSetDensityCbk(lefrDensityCbkFnType f)$/;"	f
lefrSetDielectricCbk	clef/xlefrReader.cpp	/^void lefrSetDielectricCbk (::lefrDoubleCbkFnType p0) {$/;"	f
lefrSetDielectricCbk	lef/lefrReader.cpp	/^lefrSetDielectricCbk(lefrDoubleCbkFnType f)$/;"	f
lefrSetDielectricWarnings	clef/xlefrReader.cpp	/^void lefrSetDielectricWarnings (int  warn) {$/;"	f
lefrSetDielectricWarnings	lef/lefrReader.cpp	/^lefrSetDielectricWarnings(int warn)$/;"	f
lefrSetDividerCharCbk	clef/xlefrReader.cpp	/^void lefrSetDividerCharCbk (::lefrStringCbkFnType p0) {$/;"	f
lefrSetDividerCharCbk	lef/lefrReader.cpp	/^lefrSetDividerCharCbk(lefrStringCbkFnType f)$/;"	f
lefrSetEdgeRateScaleFactorCbk	clef/xlefrReader.cpp	/^void lefrSetEdgeRateScaleFactorCbk (::lefrDoubleCbkFnType p0) {$/;"	f
lefrSetEdgeRateScaleFactorCbk	lef/lefrReader.cpp	/^lefrSetEdgeRateScaleFactorCbk(lefrDoubleCbkFnType f)$/;"	f
lefrSetEdgeRateScaleFactorWarnings	clef/xlefrReader.cpp	/^void lefrSetEdgeRateScaleFactorWarnings (int  warn) {$/;"	f
lefrSetEdgeRateScaleFactorWarnings	lef/lefrReader.cpp	/^lefrSetEdgeRateScaleFactorWarnings(int warn)$/;"	f
lefrSetEdgeRateThreshold1Cbk	clef/xlefrReader.cpp	/^void lefrSetEdgeRateThreshold1Cbk (::lefrDoubleCbkFnType p0) {$/;"	f
lefrSetEdgeRateThreshold1Cbk	lef/lefrReader.cpp	/^lefrSetEdgeRateThreshold1Cbk(lefrDoubleCbkFnType f)$/;"	f
lefrSetEdgeRateThreshold1Warnings	clef/xlefrReader.cpp	/^void lefrSetEdgeRateThreshold1Warnings (int  warn) {$/;"	f
lefrSetEdgeRateThreshold1Warnings	lef/lefrReader.cpp	/^lefrSetEdgeRateThreshold1Warnings(int warn)$/;"	f
lefrSetEdgeRateThreshold2Cbk	clef/xlefrReader.cpp	/^void lefrSetEdgeRateThreshold2Cbk (::lefrDoubleCbkFnType p0) {$/;"	f
lefrSetEdgeRateThreshold2Cbk	lef/lefrReader.cpp	/^lefrSetEdgeRateThreshold2Cbk(lefrDoubleCbkFnType f)$/;"	f
lefrSetEdgeRateThreshold2Warnings	clef/xlefrReader.cpp	/^void lefrSetEdgeRateThreshold2Warnings (int  warn) {$/;"	f
lefrSetEdgeRateThreshold2Warnings	lef/lefrReader.cpp	/^lefrSetEdgeRateThreshold2Warnings(int warn)$/;"	f
lefrSetExtensionCbk	clef/xlefrReader.cpp	/^void lefrSetExtensionCbk (::lefrStringCbkFnType p0) {$/;"	f
lefrSetExtensionCbk	lef/lefrReader.cpp	/^lefrSetExtensionCbk(lefrStringCbkFnType f)$/;"	f
lefrSetFixedMaskCbk	clef/xlefrReader.cpp	/^void lefrSetFixedMaskCbk (::lefrIntegerCbkFnType p0) {$/;"	f
lefrSetFixedMaskCbk	lef/lefrReader.cpp	/^lefrSetFixedMaskCbk(lefrIntegerCbkFnType f)$/;"	f
lefrSetFreeFunction	clef/xlefrReader.cpp	/^void lefrSetFreeFunction (::LEFI_FREE_FUNCTION p0) {$/;"	f
lefrSetFreeFunction	lef/lefrReader.cpp	/^lefrSetFreeFunction(LEFI_FREE_FUNCTION f)$/;"	f
lefrSetIRDropBeginCbk	clef/xlefrReader.cpp	/^void lefrSetIRDropBeginCbk (::lefrVoidCbkFnType p0) {$/;"	f
lefrSetIRDropBeginCbk	lef/lefrReader.cpp	/^lefrSetIRDropBeginCbk(lefrVoidCbkFnType f)$/;"	f
lefrSetIRDropCbk	clef/xlefrReader.cpp	/^void lefrSetIRDropCbk (::lefrIRDropCbkFnType p0) {$/;"	f
lefrSetIRDropCbk	lef/lefrReader.cpp	/^lefrSetIRDropCbk(lefrIRDropCbkFnType f)$/;"	f
lefrSetIRDropEndCbk	clef/xlefrReader.cpp	/^void lefrSetIRDropEndCbk (::lefrVoidCbkFnType p0) {$/;"	f
lefrSetIRDropEndCbk	lef/lefrReader.cpp	/^lefrSetIRDropEndCbk(lefrVoidCbkFnType f)$/;"	f
lefrSetIRDropWarnings	clef/xlefrReader.cpp	/^void lefrSetIRDropWarnings (int  warn) {$/;"	f
lefrSetIRDropWarnings	lef/lefrReader.cpp	/^lefrSetIRDropWarnings(int warn)$/;"	f
lefrSetInoutAntennaCbk	clef/xlefrReader.cpp	/^void lefrSetInoutAntennaCbk (::lefrDoubleCbkFnType p0) {$/;"	f
lefrSetInoutAntennaCbk	lef/lefrReader.cpp	/^lefrSetInoutAntennaCbk(lefrDoubleCbkFnType f)$/;"	f
lefrSetInoutAntennaWarnings	clef/xlefrReader.cpp	/^void lefrSetInoutAntennaWarnings (int  warn) {$/;"	f
lefrSetInoutAntennaWarnings	lef/lefrReader.cpp	/^lefrSetInoutAntennaWarnings(int warn)$/;"	f
lefrSetInputAntennaCbk	clef/xlefrReader.cpp	/^void lefrSetInputAntennaCbk (::lefrDoubleCbkFnType p0) {$/;"	f
lefrSetInputAntennaCbk	lef/lefrReader.cpp	/^lefrSetInputAntennaCbk(lefrDoubleCbkFnType f)$/;"	f
lefrSetInputAntennaWarnings	clef/xlefrReader.cpp	/^void lefrSetInputAntennaWarnings (int  warn) {$/;"	f
lefrSetInputAntennaWarnings	lef/lefrReader.cpp	/^lefrSetInputAntennaWarnings(int warn)$/;"	f
lefrSetLayerCbk	clef/xlefrReader.cpp	/^void lefrSetLayerCbk (::lefrLayerCbkFnType p0) {$/;"	f
lefrSetLayerCbk	lef/lefrReader.cpp	/^lefrSetLayerCbk(lefrLayerCbkFnType f)$/;"	f
lefrSetLayerWarnings	clef/xlefrReader.cpp	/^void lefrSetLayerWarnings (int  warn) {$/;"	f
lefrSetLayerWarnings	lef/lefrReader.cpp	/^lefrSetLayerWarnings(int warn)$/;"	f
lefrSetLibraryEndCbk	clef/xlefrReader.cpp	/^void lefrSetLibraryEndCbk (::lefrVoidCbkFnType p0) {$/;"	f
lefrSetLibraryEndCbk	lef/lefrReader.cpp	/^lefrSetLibraryEndCbk(lefrVoidCbkFnType f)$/;"	f
lefrSetLimitPerMsg	clef/xlefrReader.cpp	/^void lefrSetLimitPerMsg (int  msgId, int  numMsg) {$/;"	f
lefrSetLimitPerMsg	lef/lefrReader.cpp	/^lefrSetLimitPerMsg(int  msgId,$/;"	f
lefrSetLineNumberFunction	clef/xlefrReader.cpp	/^void lefrSetLineNumberFunction (::LEFI_LINE_NUMBER_FUNCTION p0) {$/;"	f
lefrSetLineNumberFunction	lef/lefrReader.cpp	/^lefrSetLineNumberFunction(LEFI_LINE_NUMBER_FUNCTION f)$/;"	f
lefrSetLogFunction	clef/xlefrReader.cpp	/^void lefrSetLogFunction (::LEFI_LOG_FUNCTION p0) {$/;"	f
lefrSetLogFunction	lef/lefrReader.cpp	/^lefrSetLogFunction(LEFI_LOG_FUNCTION f)$/;"	f
lefrSetMacroBeginCbk	clef/xlefrReader.cpp	/^void lefrSetMacroBeginCbk (::lefrStringCbkFnType p0) {$/;"	f
lefrSetMacroBeginCbk	lef/lefrReader.cpp	/^lefrSetMacroBeginCbk(lefrStringCbkFnType f)$/;"	f
lefrSetMacroCbk	clef/xlefrReader.cpp	/^void lefrSetMacroCbk (::lefrMacroCbkFnType p0) {$/;"	f
lefrSetMacroCbk	lef/lefrReader.cpp	/^lefrSetMacroCbk(lefrMacroCbkFnType f)$/;"	f
lefrSetMacroClassTypeCbk	clef/xlefrReader.cpp	/^void lefrSetMacroClassTypeCbk (::lefrStringCbkFnType p0) {$/;"	f
lefrSetMacroClassTypeCbk	lef/lefrReader.cpp	/^lefrSetMacroClassTypeCbk(lefrStringCbkFnType f)$/;"	f
lefrSetMacroEndCbk	clef/xlefrReader.cpp	/^void lefrSetMacroEndCbk (::lefrStringCbkFnType p0) {$/;"	f
lefrSetMacroEndCbk	lef/lefrReader.cpp	/^lefrSetMacroEndCbk(lefrStringCbkFnType f)$/;"	f
lefrSetMacroFixedMaskCbk	clef/xlefrReader.cpp	/^void lefrSetMacroFixedMaskCbk (::lefrIntegerCbkFnType p0) {$/;"	f
lefrSetMacroFixedMaskCbk	lef/lefrReader.cpp	/^lefrSetMacroFixedMaskCbk(lefrIntegerCbkFnType f)$/;"	f
lefrSetMacroForeignCbk	lef/lefrReader.cpp	/^lefrSetMacroForeignCbk(lefrMacroForeignCbkFnType f)$/;"	f
lefrSetMacroOriginCbk	clef/xlefrReader.cpp	/^void lefrSetMacroOriginCbk (::lefrMacroNumCbkFnType p0) {$/;"	f
lefrSetMacroOriginCbk	lef/lefrReader.cpp	/^lefrSetMacroOriginCbk(lefrMacroNumCbkFnType f)$/;"	f
lefrSetMacroSiteCbk	lef/lefrReader.cpp	/^lefrSetMacroSiteCbk(lefrMacroSiteCbkFnType f)$/;"	f
lefrSetMacroSizeCbk	clef/xlefrReader.cpp	/^void lefrSetMacroSizeCbk (::lefrMacroNumCbkFnType p0) {$/;"	f
lefrSetMacroSizeCbk	lef/lefrReader.cpp	/^lefrSetMacroSizeCbk(lefrMacroNumCbkFnType f)$/;"	f
lefrSetMacroWarnings	clef/xlefrReader.cpp	/^void lefrSetMacroWarnings (int  warn) {$/;"	f
lefrSetMacroWarnings	lef/lefrReader.cpp	/^lefrSetMacroWarnings(int warn)$/;"	f
lefrSetMallocFunction	clef/xlefrReader.cpp	/^void lefrSetMallocFunction (::LEFI_MALLOC_FUNCTION p0) {$/;"	f
lefrSetMallocFunction	lef/lefrReader.cpp	/^lefrSetMallocFunction(LEFI_MALLOC_FUNCTION f)$/;"	f
lefrSetManufacturingCbk	clef/xlefrReader.cpp	/^void lefrSetManufacturingCbk (::lefrDoubleCbkFnType p0) {$/;"	f
lefrSetManufacturingCbk	lef/lefrReader.cpp	/^lefrSetManufacturingCbk(lefrDoubleCbkFnType f)$/;"	f
lefrSetMaxStackViaCbk	clef/xlefrReader.cpp	/^void lefrSetMaxStackViaCbk (::lefrMaxStackViaCbkFnType p0) {$/;"	f
lefrSetMaxStackViaCbk	lef/lefrReader.cpp	/^lefrSetMaxStackViaCbk(lefrMaxStackViaCbkFnType f)$/;"	f
lefrSetMaxStackViaWarnings	clef/xlefrReader.cpp	/^void lefrSetMaxStackViaWarnings (int  warn) {$/;"	f
lefrSetMaxStackViaWarnings	lef/lefrReader.cpp	/^lefrSetMaxStackViaWarnings(int warn)$/;"	f
lefrSetMinFeatureCbk	clef/xlefrReader.cpp	/^void lefrSetMinFeatureCbk (::lefrMinFeatureCbkFnType p0) {$/;"	f
lefrSetMinFeatureCbk	lef/lefrReader.cpp	/^lefrSetMinFeatureCbk(lefrMinFeatureCbkFnType f)$/;"	f
lefrSetMinFeatureWarnings	clef/xlefrReader.cpp	/^void lefrSetMinFeatureWarnings (int  warn) {$/;"	f
lefrSetMinFeatureWarnings	lef/lefrReader.cpp	/^lefrSetMinFeatureWarnings(int warn)$/;"	f
lefrSetNoWireExtensionCbk	clef/xlefrReader.cpp	/^void lefrSetNoWireExtensionCbk (::lefrStringCbkFnType p0) {$/;"	f
lefrSetNoWireExtensionCbk	lef/lefrReader.cpp	/^lefrSetNoWireExtensionCbk(lefrStringCbkFnType f)$/;"	f
lefrSetNoWireExtensionWarnings	clef/xlefrReader.cpp	/^void lefrSetNoWireExtensionWarnings (int  warn) {$/;"	f
lefrSetNoWireExtensionWarnings	lef/lefrReader.cpp	/^lefrSetNoWireExtensionWarnings(int warn)$/;"	f
lefrSetNoiseMarginCbk	clef/xlefrReader.cpp	/^void lefrSetNoiseMarginCbk (::lefrNoiseMarginCbkFnType p0) {$/;"	f
lefrSetNoiseMarginCbk	lef/lefrReader.cpp	/^lefrSetNoiseMarginCbk(lefrNoiseMarginCbkFnType f)$/;"	f
lefrSetNoiseMarginWarnings	clef/xlefrReader.cpp	/^void lefrSetNoiseMarginWarnings (int  warn) {$/;"	f
lefrSetNoiseMarginWarnings	lef/lefrReader.cpp	/^lefrSetNoiseMarginWarnings(int warn)$/;"	f
lefrSetNoiseTableCbk	clef/xlefrReader.cpp	/^void lefrSetNoiseTableCbk (::lefrNoiseTableCbkFnType p0) {$/;"	f
lefrSetNoiseTableCbk	lef/lefrReader.cpp	/^lefrSetNoiseTableCbk(lefrNoiseTableCbkFnType f)$/;"	f
lefrSetNoiseTableWarnings	clef/xlefrReader.cpp	/^void lefrSetNoiseTableWarnings (int  warn) {$/;"	f
lefrSetNoiseTableWarnings	lef/lefrReader.cpp	/^lefrSetNoiseTableWarnings(int warn)$/;"	f
lefrSetNonDefaultCbk	clef/xlefrReader.cpp	/^void lefrSetNonDefaultCbk (::lefrNonDefaultCbkFnType p0) {$/;"	f
lefrSetNonDefaultCbk	lef/lefrReader.cpp	/^lefrSetNonDefaultCbk(lefrNonDefaultCbkFnType f)$/;"	f
lefrSetNonDefaultWarnings	clef/xlefrReader.cpp	/^void lefrSetNonDefaultWarnings (int  warn) {$/;"	f
lefrSetNonDefaultWarnings	lef/lefrReader.cpp	/^lefrSetNonDefaultWarnings(int warn)$/;"	f
lefrSetObstructionCbk	clef/xlefrReader.cpp	/^void lefrSetObstructionCbk (::lefrObstructionCbkFnType p0) {$/;"	f
lefrSetObstructionCbk	lef/lefrReader.cpp	/^lefrSetObstructionCbk(lefrObstructionCbkFnType f)$/;"	f
lefrSetOpenLogFileAppend	clef/xlefrReader.cpp	/^void lefrSetOpenLogFileAppend () {$/;"	f
lefrSetOpenLogFileAppend	lef/lefrReader.cpp	/^lefrSetOpenLogFileAppend()$/;"	f
lefrSetOutputAntennaCbk	clef/xlefrReader.cpp	/^void lefrSetOutputAntennaCbk (::lefrDoubleCbkFnType p0) {$/;"	f
lefrSetOutputAntennaCbk	lef/lefrReader.cpp	/^lefrSetOutputAntennaCbk(lefrDoubleCbkFnType f)$/;"	f
lefrSetOutputAntennaWarnings	clef/xlefrReader.cpp	/^void lefrSetOutputAntennaWarnings (int  warn) {$/;"	f
lefrSetOutputAntennaWarnings	lef/lefrReader.cpp	/^lefrSetOutputAntennaWarnings(int warn)$/;"	f
lefrSetPinCbk	clef/xlefrReader.cpp	/^void lefrSetPinCbk (::lefrPinCbkFnType p0) {$/;"	f
lefrSetPinCbk	lef/lefrReader.cpp	/^lefrSetPinCbk(lefrPinCbkFnType f)$/;"	f
lefrSetPinWarnings	clef/xlefrReader.cpp	/^void lefrSetPinWarnings (int  warn) {$/;"	f
lefrSetPinWarnings	lef/lefrReader.cpp	/^lefrSetPinWarnings(int warn)$/;"	f
lefrSetPropBeginCbk	clef/xlefrReader.cpp	/^void lefrSetPropBeginCbk (::lefrVoidCbkFnType p0) {$/;"	f
lefrSetPropBeginCbk	lef/lefrReader.cpp	/^lefrSetPropBeginCbk(lefrVoidCbkFnType f)$/;"	f
lefrSetPropCbk	clef/xlefrReader.cpp	/^void lefrSetPropCbk (::lefrPropCbkFnType p0) {$/;"	f
lefrSetPropCbk	lef/lefrReader.cpp	/^lefrSetPropCbk(lefrPropCbkFnType f)$/;"	f
lefrSetPropEndCbk	clef/xlefrReader.cpp	/^void lefrSetPropEndCbk (::lefrVoidCbkFnType p0) {$/;"	f
lefrSetPropEndCbk	lef/lefrReader.cpp	/^lefrSetPropEndCbk(lefrVoidCbkFnType f)$/;"	f
lefrSetReadFunction	clef/xlefrReader.cpp	/^void lefrSetReadFunction (::LEFI_READ_FUNCTION p0) {$/;"	f
lefrSetReadFunction	lef/lefrReader.cpp	/^lefrSetReadFunction(LEFI_READ_FUNCTION f)$/;"	f
lefrSetReallocFunction	clef/xlefrReader.cpp	/^void lefrSetReallocFunction (::LEFI_REALLOC_FUNCTION p0) {$/;"	f
lefrSetReallocFunction	lef/lefrReader.cpp	/^lefrSetReallocFunction(LEFI_REALLOC_FUNCTION f)$/;"	f
lefrSetRegisterUnusedCallbacks	clef/xlefrReader.cpp	/^void lefrSetRegisterUnusedCallbacks () {$/;"	f
lefrSetRegisterUnusedCallbacks	lef/lefrReader.cpp	/^lefrSetRegisterUnusedCallbacks()$/;"	f
lefrSetRelaxMode	clef/xlefrReader.cpp	/^void lefrSetRelaxMode () {$/;"	f
lefrSetRelaxMode	lef/lefrReader.cpp	/^lefrSetRelaxMode()$/;"	f
lefrSetShiftCase	clef/xlefrReader.cpp	/^void lefrSetShiftCase () {$/;"	f
lefrSetShiftCase	lef/lefrReader.cpp	/^lefrSetShiftCase()$/;"	f
lefrSetSiteCbk	clef/xlefrReader.cpp	/^void lefrSetSiteCbk (::lefrSiteCbkFnType p0) {$/;"	f
lefrSetSiteCbk	lef/lefrReader.cpp	/^lefrSetSiteCbk(lefrSiteCbkFnType f)$/;"	f
lefrSetSiteWarnings	clef/xlefrReader.cpp	/^void lefrSetSiteWarnings (int  warn) {$/;"	f
lefrSetSiteWarnings	lef/lefrReader.cpp	/^lefrSetSiteWarnings(int warn)$/;"	f
lefrSetSpacingBeginCbk	clef/xlefrReader.cpp	/^void lefrSetSpacingBeginCbk (::lefrVoidCbkFnType p0) {$/;"	f
lefrSetSpacingBeginCbk	lef/lefrReader.cpp	/^lefrSetSpacingBeginCbk(lefrVoidCbkFnType f)$/;"	f
lefrSetSpacingCbk	clef/xlefrReader.cpp	/^void lefrSetSpacingCbk (::lefrSpacingCbkFnType p0) {$/;"	f
lefrSetSpacingCbk	lef/lefrReader.cpp	/^lefrSetSpacingCbk(lefrSpacingCbkFnType f)$/;"	f
lefrSetSpacingEndCbk	clef/xlefrReader.cpp	/^void lefrSetSpacingEndCbk (::lefrVoidCbkFnType p0) {$/;"	f
lefrSetSpacingEndCbk	lef/lefrReader.cpp	/^lefrSetSpacingEndCbk(lefrVoidCbkFnType f)$/;"	f
lefrSetSpacingWarnings	clef/xlefrReader.cpp	/^void lefrSetSpacingWarnings (int  warn) {$/;"	f
lefrSetSpacingWarnings	lef/lefrReader.cpp	/^lefrSetSpacingWarnings(int warn)$/;"	f
lefrSetTimingCbk	clef/xlefrReader.cpp	/^void lefrSetTimingCbk (::lefrTimingCbkFnType p0) {$/;"	f
lefrSetTimingCbk	lef/lefrReader.cpp	/^lefrSetTimingCbk(lefrTimingCbkFnType f)$/;"	f
lefrSetTimingWarnings	clef/xlefrReader.cpp	/^void lefrSetTimingWarnings (int  warn) {$/;"	f
lefrSetTimingWarnings	lef/lefrReader.cpp	/^lefrSetTimingWarnings(int warn)$/;"	f
lefrSetTotalMsgLimit	clef/xlefrReader.cpp	/^void lefrSetTotalMsgLimit (int  totNumMsgs) {$/;"	f
lefrSetTotalMsgLimit	lef/lefrReader.cpp	/^lefrSetTotalMsgLimit(int totNumMsgs)$/;"	f
lefrSetUnitsCbk	clef/xlefrReader.cpp	/^void lefrSetUnitsCbk (::lefrUnitsCbkFnType p0) {$/;"	f
lefrSetUnitsCbk	lef/lefrReader.cpp	/^lefrSetUnitsCbk(lefrUnitsCbkFnType f)$/;"	f
lefrSetUnitsWarnings	clef/xlefrReader.cpp	/^void lefrSetUnitsWarnings (int  warn) {$/;"	f
lefrSetUnitsWarnings	lef/lefrReader.cpp	/^lefrSetUnitsWarnings(int warn)$/;"	f
lefrSetUnusedCallbacks	clef/xlefrReader.cpp	/^void lefrSetUnusedCallbacks (::lefrVoidCbkFnType  func) {$/;"	f
lefrSetUnusedCallbacks	lef/lefrReader.cpp	/^lefrSetUnusedCallbacks(lefrVoidCbkFnType func)$/;"	f
lefrSetUseMinSpacingCbk	clef/xlefrReader.cpp	/^void lefrSetUseMinSpacingCbk (::lefrUseMinSpacingCbkFnType p0) {$/;"	f
lefrSetUseMinSpacingCbk	lef/lefrReader.cpp	/^lefrSetUseMinSpacingCbk(lefrUseMinSpacingCbkFnType f)$/;"	f
lefrSetUseMinSpacingWarnings	clef/xlefrReader.cpp	/^void lefrSetUseMinSpacingWarnings (int  warn) {$/;"	f
lefrSetUseMinSpacingWarnings	lef/lefrReader.cpp	/^lefrSetUseMinSpacingWarnings(int warn)$/;"	f
lefrSetUserData	clef/xlefrReader.cpp	/^void lefrSetUserData (lefiUserData p0) {$/;"	f
lefrSetUserData	lef/lefrReader.cpp	/^lefrSetUserData(lefiUserData d)$/;"	f
lefrSetVersionCbk	clef/xlefrReader.cpp	/^void lefrSetVersionCbk (::lefrDoubleCbkFnType p0) {$/;"	f
lefrSetVersionCbk	lef/lefrReader.cpp	/^lefrSetVersionCbk(lefrDoubleCbkFnType f)$/;"	f
lefrSetVersionStrCbk	clef/xlefrReader.cpp	/^void lefrSetVersionStrCbk (::lefrStringCbkFnType p0) {$/;"	f
lefrSetVersionStrCbk	lef/lefrReader.cpp	/^lefrSetVersionStrCbk(lefrStringCbkFnType f)$/;"	f
lefrSetVersionValue	clef/xlefrReader.cpp	/^void lefrSetVersionValue (const  char*   version) {$/;"	f
lefrSetVersionValue	lef/lefrReader.cpp	/^lefrSetVersionValue(const char *version)$/;"	f
lefrSetViaCbk	clef/xlefrReader.cpp	/^void lefrSetViaCbk (::lefrViaCbkFnType p0) {$/;"	f
lefrSetViaCbk	lef/lefrReader.cpp	/^lefrSetViaCbk(lefrViaCbkFnType f)$/;"	f
lefrSetViaRuleCbk	clef/xlefrReader.cpp	/^void lefrSetViaRuleCbk (::lefrViaRuleCbkFnType p0) {$/;"	f
lefrSetViaRuleCbk	lef/lefrReader.cpp	/^lefrSetViaRuleCbk(lefrViaRuleCbkFnType f)$/;"	f
lefrSetViaRuleWarnings	clef/xlefrReader.cpp	/^void lefrSetViaRuleWarnings (int  warn) {$/;"	f
lefrSetViaRuleWarnings	lef/lefrReader.cpp	/^lefrSetViaRuleWarnings(int warn)$/;"	f
lefrSetViaWarnings	clef/xlefrReader.cpp	/^void lefrSetViaWarnings (int  warn) {$/;"	f
lefrSetViaWarnings	lef/lefrReader.cpp	/^lefrSetViaWarnings(int warn)$/;"	f
lefrSetWarningLogFunction	clef/xlefrReader.cpp	/^void lefrSetWarningLogFunction (::LEFI_WARNING_LOG_FUNCTION p0) {$/;"	f
lefrSetWarningLogFunction	lef/lefrReader.cpp	/^lefrSetWarningLogFunction(LEFI_WARNING_LOG_FUNCTION f)$/;"	f
lefrSettings	lef/lefrSettings.cpp	/^lefrSettings::lefrSettings()$/;"	f	class:lefrSettings
lefrSettings	lef/lefrSettings.hpp	/^class lefrSettings {$/;"	c
lefrSettings_h	lef/lefrSettings.hpp	31;"	d
lefrSite	lef/lefrData.hpp	/^    lefiSite  lefrSite; $/;"	m	class:lefrData
lefrSiteCbkFnType	clef/lefrReader.h	/^typedef int (*lefrSiteCbkFnType) (lefrCallbackType_e, lefiSite* l, lefiUserData);$/;"	t
lefrSiteCbkFnType	lef/lefrReader.hpp	/^typedef int (*lefrSiteCbkFnType) (lefrCallbackType_e, $/;"	t
lefrSiteCbkType	clef/lefrReader.h	/^  lefrSiteCbkType = 19,$/;"	e	enum:__anon2
lefrSiteCbkType	lef/lefrReader.hpp	/^  lefrSiteCbkType,$/;"	e	enum:__anon6
lefrSitePatternPtr	lef/lefrData.hpp	/^    lefiSitePattern*  lefrSitePatternPtr; $/;"	m	class:lefrData
lefrSpacing	lef/lefrData.hpp	/^    lefiSpacing  lefrSpacing; $/;"	m	class:lefrData
lefrSpacingBeginCbkType	clef/lefrReader.h	/^  lefrSpacingBeginCbkType = 25,$/;"	e	enum:__anon2
lefrSpacingBeginCbkType	lef/lefrReader.hpp	/^  lefrSpacingBeginCbkType,$/;"	e	enum:__anon6
lefrSpacingCbkFnType	clef/lefrReader.h	/^typedef int (*lefrSpacingCbkFnType) (lefrCallbackType_e, lefiSpacing* l, lefiUserData);$/;"	t
lefrSpacingCbkFnType	lef/lefrReader.hpp	/^typedef int (*lefrSpacingCbkFnType) (lefrCallbackType_e, $/;"	t
lefrSpacingCbkType	clef/lefrReader.h	/^  lefrSpacingCbkType = 14,$/;"	e	enum:__anon2
lefrSpacingCbkType	lef/lefrReader.hpp	/^  lefrSpacingCbkType,$/;"	e	enum:__anon6
lefrSpacingEndCbkType	clef/lefrReader.h	/^  lefrSpacingEndCbkType = 26,$/;"	e	enum:__anon2
lefrSpacingEndCbkType	lef/lefrReader.hpp	/^  lefrSpacingEndCbkType,$/;"	e	enum:__anon6
lefrStringCbkFnType	clef/lefrReader.h	/^typedef int (*lefrStringCbkFnType) (lefrCallbackType_e, const char *string, lefiUserData);$/;"	t
lefrStringCbkFnType	lef/lefrReader.hpp	/^typedef int (*lefrStringCbkFnType) (lefrCallbackType_e, $/;"	t
lefrTiming	lef/lefrData.hpp	/^    lefiTiming  lefrTiming; $/;"	m	class:lefrData
lefrTimingCbkFnType	clef/lefrReader.h	/^typedef int (*lefrTimingCbkFnType) (lefrCallbackType_e, lefiTiming* p, lefiUserData);$/;"	t
lefrTimingCbkFnType	lef/lefrReader.hpp	/^typedef int (*lefrTimingCbkFnType) (lefrCallbackType_e, $/;"	t
lefrTimingCbkType	clef/lefrReader.h	/^  lefrTimingCbkType = 46,$/;"	e	enum:__anon2
lefrTimingCbkType	lef/lefrReader.hpp	/^  lefrTimingCbkType,$/;"	e	enum:__anon6
lefrTrackPatternPtr	lef/lefrData.hpp	/^    lefiTrackPattern*  lefrTrackPatternPtr; $/;"	m	class:lefrData
lefrUnits	lef/lefrData.hpp	/^    lefiUnits  lefrUnits; $/;"	m	class:lefrData
lefrUnitsCbkFnType	clef/lefrReader.h	/^typedef int (*lefrUnitsCbkFnType) (lefrCallbackType_e, lefiUnits* units, lefiUserData);$/;"	t
lefrUnitsCbkFnType	lef/lefrReader.hpp	/^typedef int (*lefrUnitsCbkFnType) (lefrCallbackType_e, $/;"	t
lefrUnitsCbkType	clef/lefrReader.h	/^  lefrUnitsCbkType = 5,$/;"	e	enum:__anon2
lefrUnitsCbkType	lef/lefrReader.hpp	/^  lefrUnitsCbkType,$/;"	e	enum:__anon6
lefrUnsetAntennaInoutCbk	clef/xlefrReader.cpp	/^void lefrUnsetAntennaInoutCbk () {$/;"	f
lefrUnsetAntennaInoutCbk	lef/lefrReader.cpp	/^lefrUnsetAntennaInoutCbk()$/;"	f
lefrUnsetAntennaInputCbk	clef/xlefrReader.cpp	/^void lefrUnsetAntennaInputCbk () {$/;"	f
lefrUnsetAntennaInputCbk	lef/lefrReader.cpp	/^lefrUnsetAntennaInputCbk()$/;"	f
lefrUnsetAntennaOutputCbk	clef/xlefrReader.cpp	/^void lefrUnsetAntennaOutputCbk () {$/;"	f
lefrUnsetAntennaOutputCbk	lef/lefrReader.cpp	/^lefrUnsetAntennaOutputCbk()$/;"	f
lefrUnsetArrayBeginCbk	clef/xlefrReader.cpp	/^void lefrUnsetArrayBeginCbk () {$/;"	f
lefrUnsetArrayBeginCbk	lef/lefrReader.cpp	/^lefrUnsetArrayBeginCbk()$/;"	f
lefrUnsetArrayCbk	clef/xlefrReader.cpp	/^void lefrUnsetArrayCbk () {$/;"	f
lefrUnsetArrayCbk	lef/lefrReader.cpp	/^lefrUnsetArrayCbk()$/;"	f
lefrUnsetArrayEndCbk	clef/xlefrReader.cpp	/^void lefrUnsetArrayEndCbk () {$/;"	f
lefrUnsetArrayEndCbk	lef/lefrReader.cpp	/^lefrUnsetArrayEndCbk()$/;"	f
lefrUnsetBusBitCharsCbk	clef/xlefrReader.cpp	/^void lefrUnsetBusBitCharsCbk () {$/;"	f
lefrUnsetBusBitCharsCbk	lef/lefrReader.cpp	/^lefrUnsetBusBitCharsCbk()$/;"	f
lefrUnsetCallbacks	clef/xlefrReader.cpp	/^void lefrUnsetCallbacks () {$/;"	f
lefrUnsetCallbacks	lef/lefrReader.cpp	/^lefrUnsetCallbacks()$/;"	f
lefrUnsetCaseSensitiveCbk	clef/xlefrReader.cpp	/^void lefrUnsetCaseSensitiveCbk () {$/;"	f
lefrUnsetCaseSensitiveCbk	lef/lefrReader.cpp	/^lefrUnsetCaseSensitiveCbk()$/;"	f
lefrUnsetClearanceMeasureCbk	clef/xlefrReader.cpp	/^void lefrUnsetClearanceMeasureCbk () {$/;"	f
lefrUnsetClearanceMeasureCbk	lef/lefrReader.cpp	/^lefrUnsetClearanceMeasureCbk()$/;"	f
lefrUnsetCorrectionTableCbk	clef/xlefrReader.cpp	/^void lefrUnsetCorrectionTableCbk () {$/;"	f
lefrUnsetCorrectionTableCbk	lef/lefrReader.cpp	/^lefrUnsetCorrectionTableCbk()$/;"	f
lefrUnsetDensityCbk	clef/xlefrReader.cpp	/^void lefrUnsetDensityCbk () {$/;"	f
lefrUnsetDensityCbk	lef/lefrReader.cpp	/^lefrUnsetDensityCbk()$/;"	f
lefrUnsetDielectricCbk	clef/xlefrReader.cpp	/^void lefrUnsetDielectricCbk () {$/;"	f
lefrUnsetDielectricCbk	lef/lefrReader.cpp	/^lefrUnsetDielectricCbk()$/;"	f
lefrUnsetDividerCharCbk	clef/xlefrReader.cpp	/^void lefrUnsetDividerCharCbk () {$/;"	f
lefrUnsetDividerCharCbk	lef/lefrReader.cpp	/^lefrUnsetDividerCharCbk()$/;"	f
lefrUnsetEdgeRateScaleFactorCbk	clef/xlefrReader.cpp	/^void lefrUnsetEdgeRateScaleFactorCbk () {$/;"	f
lefrUnsetEdgeRateScaleFactorCbk	lef/lefrReader.cpp	/^lefrUnsetEdgeRateScaleFactorCbk()$/;"	f
lefrUnsetEdgeRateThreshold1Cbk	clef/xlefrReader.cpp	/^void lefrUnsetEdgeRateThreshold1Cbk () {$/;"	f
lefrUnsetEdgeRateThreshold1Cbk	lef/lefrReader.cpp	/^lefrUnsetEdgeRateThreshold1Cbk()$/;"	f
lefrUnsetEdgeRateThreshold2Cbk	clef/xlefrReader.cpp	/^void lefrUnsetEdgeRateThreshold2Cbk () {$/;"	f
lefrUnsetEdgeRateThreshold2Cbk	lef/lefrReader.cpp	/^lefrUnsetEdgeRateThreshold2Cbk()$/;"	f
lefrUnsetExtensionCbk	clef/xlefrReader.cpp	/^void lefrUnsetExtensionCbk () {$/;"	f
lefrUnsetExtensionCbk	lef/lefrReader.cpp	/^lefrUnsetExtensionCbk()$/;"	f
lefrUnsetFixedMaskCbk	lef/lefrReader.cpp	/^lefrUnsetFixedMaskCbk()$/;"	f
lefrUnsetIRDropBeginCbk	clef/xlefrReader.cpp	/^void lefrUnsetIRDropBeginCbk () {$/;"	f
lefrUnsetIRDropBeginCbk	lef/lefrReader.cpp	/^lefrUnsetIRDropBeginCbk()$/;"	f
lefrUnsetIRDropCbk	clef/xlefrReader.cpp	/^void lefrUnsetIRDropCbk () {$/;"	f
lefrUnsetIRDropCbk	lef/lefrReader.cpp	/^lefrUnsetIRDropCbk()$/;"	f
lefrUnsetIRDropEndCbk	clef/xlefrReader.cpp	/^void lefrUnsetIRDropEndCbk () {$/;"	f
lefrUnsetIRDropEndCbk	lef/lefrReader.cpp	/^lefrUnsetIRDropEndCbk()$/;"	f
lefrUnsetInoutAntennaCbk	clef/xlefrReader.cpp	/^void lefrUnsetInoutAntennaCbk () {$/;"	f
lefrUnsetInoutAntennaCbk	lef/lefrReader.cpp	/^lefrUnsetInoutAntennaCbk()$/;"	f
lefrUnsetInputAntennaCbk	clef/xlefrReader.cpp	/^void lefrUnsetInputAntennaCbk () {$/;"	f
lefrUnsetInputAntennaCbk	lef/lefrReader.cpp	/^lefrUnsetInputAntennaCbk()$/;"	f
lefrUnsetLayerCbk	clef/xlefrReader.cpp	/^void lefrUnsetLayerCbk () {$/;"	f
lefrUnsetLayerCbk	lef/lefrReader.cpp	/^lefrUnsetLayerCbk()$/;"	f
lefrUnsetLibraryEndCbk	clef/xlefrReader.cpp	/^void lefrUnsetLibraryEndCbk () {$/;"	f
lefrUnsetLibraryEndCbk	lef/lefrReader.cpp	/^lefrUnsetLibraryEndCbk()$/;"	f
lefrUnsetMacroBeginCbk	clef/xlefrReader.cpp	/^void lefrUnsetMacroBeginCbk () {$/;"	f
lefrUnsetMacroBeginCbk	lef/lefrReader.cpp	/^lefrUnsetMacroBeginCbk()$/;"	f
lefrUnsetMacroCbk	clef/xlefrReader.cpp	/^void lefrUnsetMacroCbk () {$/;"	f
lefrUnsetMacroCbk	lef/lefrReader.cpp	/^lefrUnsetMacroCbk()$/;"	f
lefrUnsetMacroClassTypeCbk	clef/xlefrReader.cpp	/^void lefrUnsetMacroClassTypeCbk () {$/;"	f
lefrUnsetMacroClassTypeCbk	lef/lefrReader.cpp	/^lefrUnsetMacroClassTypeCbk()$/;"	f
lefrUnsetMacroEndCbk	clef/xlefrReader.cpp	/^void lefrUnsetMacroEndCbk () {$/;"	f
lefrUnsetMacroEndCbk	lef/lefrReader.cpp	/^lefrUnsetMacroEndCbk()$/;"	f
lefrUnsetMacroFixedMaskCbk	lef/lefrReader.cpp	/^lefrUnsetMacroFixedMaskCbk()$/;"	f
lefrUnsetMacroForeignCbk	lef/lefrReader.cpp	/^lefrUnsetMacroForeignCbk()$/;"	f
lefrUnsetMacroOriginCbk	clef/xlefrReader.cpp	/^void lefrUnsetMacroOriginCbk () {$/;"	f
lefrUnsetMacroOriginCbk	lef/lefrReader.cpp	/^lefrUnsetMacroOriginCbk()$/;"	f
lefrUnsetMacroSiteCbk	lef/lefrReader.cpp	/^lefrUnsetMacroSiteCbk()$/;"	f
lefrUnsetMacroSizeCbk	clef/xlefrReader.cpp	/^void lefrUnsetMacroSizeCbk () {$/;"	f
lefrUnsetMacroSizeCbk	lef/lefrReader.cpp	/^lefrUnsetMacroSizeCbk()$/;"	f
lefrUnsetManufacturingCbk	clef/xlefrReader.cpp	/^void lefrUnsetManufacturingCbk () {$/;"	f
lefrUnsetManufacturingCbk	lef/lefrReader.cpp	/^lefrUnsetManufacturingCbk()$/;"	f
lefrUnsetMaxStackViaCbk	clef/xlefrReader.cpp	/^void lefrUnsetMaxStackViaCbk () {$/;"	f
lefrUnsetMaxStackViaCbk	lef/lefrReader.cpp	/^lefrUnsetMaxStackViaCbk()$/;"	f
lefrUnsetMinFeatureCbk	clef/xlefrReader.cpp	/^void lefrUnsetMinFeatureCbk () {$/;"	f
lefrUnsetMinFeatureCbk	lef/lefrReader.cpp	/^lefrUnsetMinFeatureCbk()$/;"	f
lefrUnsetNoWireExtensionCbk	clef/xlefrReader.cpp	/^void lefrUnsetNoWireExtensionCbk () {$/;"	f
lefrUnsetNoWireExtensionCbk	lef/lefrReader.cpp	/^lefrUnsetNoWireExtensionCbk()$/;"	f
lefrUnsetNoiseMarginCbk	clef/xlefrReader.cpp	/^void lefrUnsetNoiseMarginCbk () {$/;"	f
lefrUnsetNoiseMarginCbk	lef/lefrReader.cpp	/^lefrUnsetNoiseMarginCbk()$/;"	f
lefrUnsetNoiseTableCbk	clef/xlefrReader.cpp	/^void lefrUnsetNoiseTableCbk () {$/;"	f
lefrUnsetNoiseTableCbk	lef/lefrReader.cpp	/^lefrUnsetNoiseTableCbk()$/;"	f
lefrUnsetNonDefaultCbk	clef/xlefrReader.cpp	/^void lefrUnsetNonDefaultCbk () {$/;"	f
lefrUnsetNonDefaultCbk	lef/lefrReader.cpp	/^lefrUnsetNonDefaultCbk()$/;"	f
lefrUnsetObstructionCbk	clef/xlefrReader.cpp	/^void lefrUnsetObstructionCbk () {$/;"	f
lefrUnsetObstructionCbk	lef/lefrReader.cpp	/^lefrUnsetObstructionCbk()$/;"	f
lefrUnsetOpenLogFileAppend	clef/xlefrReader.cpp	/^void lefrUnsetOpenLogFileAppend () {$/;"	f
lefrUnsetOpenLogFileAppend	lef/lefrReader.cpp	/^lefrUnsetOpenLogFileAppend()$/;"	f
lefrUnsetOutputAntennaCbk	clef/xlefrReader.cpp	/^void lefrUnsetOutputAntennaCbk () {$/;"	f
lefrUnsetOutputAntennaCbk	lef/lefrReader.cpp	/^lefrUnsetOutputAntennaCbk()$/;"	f
lefrUnsetPinCbk	clef/xlefrReader.cpp	/^void lefrUnsetPinCbk () {$/;"	f
lefrUnsetPinCbk	lef/lefrReader.cpp	/^lefrUnsetPinCbk()$/;"	f
lefrUnsetPropBeginCbk	clef/xlefrReader.cpp	/^void lefrUnsetPropBeginCbk () {$/;"	f
lefrUnsetPropBeginCbk	lef/lefrReader.cpp	/^lefrUnsetPropBeginCbk()$/;"	f
lefrUnsetPropCbk	clef/xlefrReader.cpp	/^void lefrUnsetPropCbk () {$/;"	f
lefrUnsetPropCbk	lef/lefrReader.cpp	/^lefrUnsetPropCbk()$/;"	f
lefrUnsetPropEndCbk	clef/xlefrReader.cpp	/^void lefrUnsetPropEndCbk () {$/;"	f
lefrUnsetPropEndCbk	lef/lefrReader.cpp	/^lefrUnsetPropEndCbk()$/;"	f
lefrUnsetReadFunction	clef/xlefrReader.cpp	/^void lefrUnsetReadFunction () {$/;"	f
lefrUnsetReadFunction	lef/lefrReader.cpp	/^lefrUnsetReadFunction()$/;"	f
lefrUnsetRelaxMode	clef/xlefrReader.cpp	/^void lefrUnsetRelaxMode () {$/;"	f
lefrUnsetRelaxMode	lef/lefrReader.cpp	/^lefrUnsetRelaxMode()$/;"	f
lefrUnsetSiteCbk	clef/xlefrReader.cpp	/^void lefrUnsetSiteCbk () {$/;"	f
lefrUnsetSiteCbk	lef/lefrReader.cpp	/^lefrUnsetSiteCbk()$/;"	f
lefrUnsetSpacingBeginCbk	clef/xlefrReader.cpp	/^void lefrUnsetSpacingBeginCbk () {$/;"	f
lefrUnsetSpacingBeginCbk	lef/lefrReader.cpp	/^lefrUnsetSpacingBeginCbk()$/;"	f
lefrUnsetSpacingCbk	clef/xlefrReader.cpp	/^void lefrUnsetSpacingCbk () {$/;"	f
lefrUnsetSpacingCbk	lef/lefrReader.cpp	/^lefrUnsetSpacingCbk()$/;"	f
lefrUnsetSpacingEndCbk	clef/xlefrReader.cpp	/^void lefrUnsetSpacingEndCbk () {$/;"	f
lefrUnsetSpacingEndCbk	lef/lefrReader.cpp	/^lefrUnsetSpacingEndCbk()$/;"	f
lefrUnsetTimingCbk	clef/xlefrReader.cpp	/^void lefrUnsetTimingCbk () {$/;"	f
lefrUnsetTimingCbk	lef/lefrReader.cpp	/^lefrUnsetTimingCbk()$/;"	f
lefrUnsetUnitsCbk	clef/xlefrReader.cpp	/^void lefrUnsetUnitsCbk () {$/;"	f
lefrUnsetUnitsCbk	lef/lefrReader.cpp	/^lefrUnsetUnitsCbk()$/;"	f
lefrUnsetUseMinSpacingCbk	clef/xlefrReader.cpp	/^void lefrUnsetUseMinSpacingCbk () {$/;"	f
lefrUnsetUseMinSpacingCbk	lef/lefrReader.cpp	/^lefrUnsetUseMinSpacingCbk()$/;"	f
lefrUnsetVersionCbk	clef/xlefrReader.cpp	/^void lefrUnsetVersionCbk () {$/;"	f
lefrUnsetVersionCbk	lef/lefrReader.cpp	/^lefrUnsetVersionCbk()$/;"	f
lefrUnsetVersionStrCbk	clef/xlefrReader.cpp	/^void lefrUnsetVersionStrCbk () {$/;"	f
lefrUnsetVersionStrCbk	lef/lefrReader.cpp	/^lefrUnsetVersionStrCbk()$/;"	f
lefrUnsetViaCbk	clef/xlefrReader.cpp	/^void lefrUnsetViaCbk () {$/;"	f
lefrUnsetViaCbk	lef/lefrReader.cpp	/^lefrUnsetViaCbk()$/;"	f
lefrUnsetViaRuleCbk	clef/xlefrReader.cpp	/^void lefrUnsetViaRuleCbk () {$/;"	f
lefrUnsetViaRuleCbk	lef/lefrReader.cpp	/^lefrUnsetViaRuleCbk()$/;"	f
lefrUnspecifiedCbkType	clef/lefrReader.h	/^  lefrUnspecifiedCbkType = 0,$/;"	e	enum:__anon2
lefrUnspecifiedCbkType	lef/lefrReader.hpp	/^  lefrUnspecifiedCbkType = 0,$/;"	e	enum:__anon6
lefrUnusedCount	lef/lefrReader.cpp	/^static int lefrUnusedCount[NOCBK];$/;"	v	file:
lefrUseMinSpacing	lef/lefrData.hpp	/^    lefiUseMinSpacing  lefrUseMinSpacing; $/;"	m	class:lefrData
lefrUseMinSpacingCbkFnType	clef/lefrReader.h	/^typedef int (*lefrUseMinSpacingCbkFnType) (lefrCallbackType_e, lefiUseMinSpacing* l, lefiUserData);$/;"	t
lefrUseMinSpacingCbkFnType	lef/lefrReader.hpp	/^typedef int (*lefrUseMinSpacingCbkFnType) (lefrCallbackType_e, $/;"	t
lefrUseMinSpacingCbkType	clef/lefrReader.h	/^  lefrUseMinSpacingCbkType = 44,$/;"	e	enum:__anon2
lefrUseMinSpacingCbkType	lef/lefrReader.hpp	/^  lefrUseMinSpacingCbkType,$/;"	e	enum:__anon6
lefrVal	lef/lefrData.hpp	/^    double  lefrVal; $/;"	m	class:lefrData
lefrVersionCbkType	clef/lefrReader.h	/^  lefrVersionCbkType = 1,$/;"	e	enum:__anon2
lefrVersionCbkType	lef/lefrReader.hpp	/^  lefrVersionCbkType,$/;"	e	enum:__anon6
lefrVersionStrCbkType	clef/lefrReader.h	/^  lefrVersionStrCbkType = 2,$/;"	e	enum:__anon2
lefrVersionStrCbkType	lef/lefrReader.hpp	/^  lefrVersionStrCbkType,$/;"	e	enum:__anon6
lefrVia	lef/lefrData.hpp	/^    lefiVia  lefrVia; $/;"	m	class:lefrData
lefrViaCbkFnType	clef/lefrReader.h	/^typedef int (*lefrViaCbkFnType) (lefrCallbackType_e, lefiVia* l, lefiUserData);$/;"	t
lefrViaCbkFnType	lef/lefrReader.hpp	/^typedef int (*lefrViaCbkFnType) (lefrCallbackType_e, $/;"	t
lefrViaCbkType	clef/lefrReader.h	/^  lefrViaCbkType = 12,$/;"	e	enum:__anon2
lefrViaCbkType	lef/lefrReader.hpp	/^  lefrViaCbkType,$/;"	e	enum:__anon6
lefrViaProp	lef/lefrSettings.hpp	/^    lefiPropType  lefrViaProp; $/;"	m	class:lefrProps
lefrViaRule	lef/lefrData.hpp	/^    lefiViaRule  lefrViaRule; $/;"	m	class:lefrData
lefrViaRuleCbkFnType	clef/lefrReader.h	/^typedef int (*lefrViaRuleCbkFnType) (lefrCallbackType_e, lefiViaRule* l, lefiUserData);$/;"	t
lefrViaRuleCbkFnType	lef/lefrReader.hpp	/^typedef int (*lefrViaRuleCbkFnType) (lefrCallbackType_e, $/;"	t
lefrViaRuleCbkType	clef/lefrReader.h	/^  lefrViaRuleCbkType = 13,$/;"	e	enum:__anon2
lefrViaRuleCbkType	lef/lefrReader.hpp	/^  lefrViaRuleCbkType,$/;"	e	enum:__anon6
lefrViaRuleProp	lef/lefrSettings.hpp	/^    lefiPropType  lefrViaRuleProp; $/;"	m	class:lefrProps
lefrVoidCbkFnType	clef/lefrReader.h	/^typedef int (*lefrVoidCbkFnType) (lefrCallbackType_e, void* num, lefiUserData);$/;"	t
lefrVoidCbkFnType	lef/lefrReader.hpp	/^typedef int (*lefrVoidCbkFnType) (lefrCallbackType_e, $/;"	t
lefsublex	lef/lef_keywords.cpp	/^lefsublex()$/;"	f
left	lef/lefiProp.cpp	/^lefiProp::left() const$/;"	f	class:lefiProp
left_	lef/lefiProp.hpp	/^  double left_;$/;"	m	class:lefiProp
lefuc_array	lef/lef_keywords.cpp	/^lefuc_array(char    *source,$/;"	f
lefw54Num	lef/lefwWriter.cpp	/^static int lefw54Num = -1; \/\/ keep track the 5.4 syntax for error$/;"	v	file:
lefwAMaxAreaCar	lef/lefwWriter.cpp	/^static int lefwAMaxAreaCar = 0;  \/\/ only allow to define once per pin$/;"	v	file:
lefwAMaxCutCar	lef/lefwWriter.cpp	/^static int lefwAMaxCutCar = 0; \/\/ only allow to define once per pin$/;"	v	file:
lefwAMaxSideAreaCar	lef/lefwWriter.cpp	/^static int lefwAMaxSideAreaCar = 0; \/\/ only allow to define once per pin$/;"	v	file:
lefwAddComment	clef/xlefwWriter.cpp	/^void lefwAddComment (const char*  comment) {$/;"	f
lefwAddComment	lef/lefwWriter.cpp	/^lefwAddComment(const char *comment)$/;"	f
lefwAddIndent	clef/xlefwWriter.cpp	/^void lefwAddIndent () {$/;"	f
lefwAddIndent	lef/lefwWriter.cpp	/^lefwAddIndent()$/;"	f
lefwAddr	lef/lefwWriter.cpp	/^lefwAddr(const char *x)$/;"	f
lefwAntenna	clef/xlefwWriter.cpp	/^int lefwAntenna (const char*  type, double  value) {$/;"	f
lefwAntenna	lef/lefwWriter.cpp	/^lefwAntenna(const char  *type,$/;"	f
lefwAntenna53	lef/lefwWriter.cpp	/^static int lefwAntenna53 = 0;  \/\/ to keep track 5.3 antenna is used$/;"	v	file:
lefwAntenna54	lef/lefwWriter.cpp	/^static int lefwAntenna54 = 0;  \/\/ to keep track 5.4 antenna is used$/;"	v	file:
lefwAntennaCbk	lef/lefwWriterCalls.cpp	75;"	d	file:
lefwAntennaCbkType	clef/lefwWriterCalls.h	/^  lefwAntennaCbkType = 28,$/;"	e	enum:__anon1
lefwAntennaCbkType	lef/lefwWriterCalls.hpp	/^  lefwAntennaCbkType,$/;"	e	enum:__anon3
lefwAntennaInOutDiffArea	clef/xlefwWriter.cpp	/^int lefwAntennaInOutDiffArea (double  inOutDiffArea) {$/;"	f
lefwAntennaInOutDiffArea	lef/lefwWriter.cpp	/^lefwAntennaInOutDiffArea(double inOutDiffArea)$/;"	f
lefwAntennaInOutDiffAreaCbk	clef/xlefwWriterCalls.cpp	/^void lefwAntennaInOutDiffAreaCbk (::lefwVoidCbkFnType p0) {$/;"	f
lefwAntennaInOutDiffAreaCbk	lef/lefwWriterCalls.cpp	58;"	d	file:
lefwAntennaInOutDiffAreaCbkType	clef/lefwWriterCalls.h	/^  lefwAntennaInOutDiffAreaCbkType = 11,$/;"	e	enum:__anon1
lefwAntennaInOutDiffAreaCbkType	lef/lefwWriterCalls.hpp	/^  lefwAntennaInOutDiffAreaCbkType,$/;"	e	enum:__anon3
lefwAntennaInputGateArea	clef/xlefwWriter.cpp	/^int lefwAntennaInputGateArea (double  inputGateArea) {$/;"	f
lefwAntennaInputGateArea	lef/lefwWriter.cpp	/^lefwAntennaInputGateArea(double inputGateArea)$/;"	f
lefwAntennaInputGateAreaCbk	clef/xlefwWriterCalls.cpp	/^void lefwAntennaInputGateAreaCbk (::lefwVoidCbkFnType p0) {$/;"	f
lefwAntennaInputGateAreaCbk	lef/lefwWriterCalls.cpp	57;"	d	file:
lefwAntennaInputGateAreaCbkType	clef/lefwWriterCalls.h	/^  lefwAntennaInputGateAreaCbkType = 10,$/;"	e	enum:__anon1
lefwAntennaInputGateAreaCbkType	lef/lefwWriterCalls.hpp	/^  lefwAntennaInputGateAreaCbkType,$/;"	e	enum:__anon3
lefwAntennaOutputDiffArea	clef/xlefwWriter.cpp	/^int lefwAntennaOutputDiffArea (double  outputDiffArea) {$/;"	f
lefwAntennaOutputDiffArea	lef/lefwWriter.cpp	/^lefwAntennaOutputDiffArea(double outputDiffArea)$/;"	f
lefwAntennaOutputDiffAreaCbk	clef/xlefwWriterCalls.cpp	/^void lefwAntennaOutputDiffAreaCbk (::lefwVoidCbkFnType p0) {$/;"	f
lefwAntennaOutputDiffAreaCbk	lef/lefwWriterCalls.cpp	59;"	d	file:
lefwAntennaOutputDiffAreaCbkType	clef/lefwWriterCalls.h	/^  lefwAntennaOutputDiffAreaCbkType = 12,$/;"	e	enum:__anon1
lefwAntennaOutputDiffAreaCbkType	lef/lefwWriterCalls.hpp	/^  lefwAntennaOutputDiffAreaCbkType,$/;"	e	enum:__anon3
lefwArrayCannotoccupy	clef/xlefwWriter.cpp	/^int lefwArrayCannotoccupy (const char*  name, double  origX, double  origY, int  orient, double  numX, double  numY, double  spaceX, double  spaceY) {$/;"	f
lefwArrayCannotoccupy	lef/lefwWriter.cpp	/^lefwArrayCannotoccupy(const char    *name,$/;"	f
lefwArrayCannotoccupyStr	clef/xlefwWriter.cpp	/^int lefwArrayCannotoccupyStr (const char*  name, double  origX, double  origY, const char * orient, double  numX, double  numY, double  spaceX, double  spaceY) {$/;"	f
lefwArrayCannotoccupyStr	lef/lefwWriter.cpp	/^lefwArrayCannotoccupyStr(const char *name,$/;"	f
lefwArrayCanplace	clef/xlefwWriter.cpp	/^int lefwArrayCanplace (const char*  name, double  origX, double  origY, int  orient, double  numX, double  numY, double  spaceX, double  spaceY) {$/;"	f
lefwArrayCanplace	lef/lefwWriter.cpp	/^lefwArrayCanplace(const char    *name,$/;"	f
lefwArrayCanplaceStr	clef/xlefwWriter.cpp	/^int lefwArrayCanplaceStr (const char*  name, double  origX, double  origY, const char * orient, double  numX, double  numY, double  spaceX, double  spaceY) {$/;"	f
lefwArrayCanplaceStr	lef/lefwWriter.cpp	/^lefwArrayCanplaceStr(const char *name,$/;"	f
lefwArrayCbk	lef/lefwWriterCalls.cpp	73;"	d	file:
lefwArrayCbkType	clef/lefwWriterCalls.h	/^  lefwArrayCbkType = 26,$/;"	e	enum:__anon1
lefwArrayCbkType	lef/lefwWriterCalls.hpp	/^  lefwArrayCbkType,$/;"	e	enum:__anon3
lefwArrayDefaultCap	clef/xlefwWriter.cpp	/^int lefwArrayDefaultCap (double  numPins, double  cap) {$/;"	f
lefwArrayDefaultCap	lef/lefwWriter.cpp	/^lefwArrayDefaultCap(double  numPins,$/;"	f
lefwArrayFloorplan	clef/xlefwWriter.cpp	/^int lefwArrayFloorplan (const char*  site, const char*  name, double  origX, double  origY, int  orient, int  numX, int  numY, double  spaceX, double  spaceY) {$/;"	f
lefwArrayFloorplan	lef/lefwWriter.cpp	/^lefwArrayFloorplan(const char   *site,$/;"	f
lefwArrayFloorplanStr	clef/xlefwWriter.cpp	/^int lefwArrayFloorplanStr (const char*  site, const char*  name, double  origX, double  origY, const char * orient, int  numX, int  numY, double  spaceX, double  spaceY) {$/;"	f
lefwArrayFloorplanStr	lef/lefwWriter.cpp	/^lefwArrayFloorplanStr(const char    *site,$/;"	f
lefwArrayGcellgrid	clef/xlefwWriter.cpp	/^int lefwArrayGcellgrid (const char*  xy, double  startXY, int  colRows, double  spaceXY) {$/;"	f
lefwArrayGcellgrid	lef/lefwWriter.cpp	/^lefwArrayGcellgrid(const char   *xy,$/;"	f
lefwArraySite	clef/xlefwWriter.cpp	/^int lefwArraySite (const char*  name, double  origX, double  origY, int  orient, double  numX, double  numY, double  spaceX, double  spaceY) {$/;"	f
lefwArraySite	lef/lefwWriter.cpp	/^lefwArraySite(const char    *name,$/;"	f
lefwArraySiteStr	clef/xlefwWriter.cpp	/^int lefwArraySiteStr (const char*  name, double  origX, double  origY, const char * orient, double  numX, double  numY, double  spaceX, double  spaceY) {$/;"	f
lefwArraySiteStr	lef/lefwWriter.cpp	/^lefwArraySiteStr(const char *name,$/;"	f
lefwArrayTracks	clef/xlefwWriter.cpp	/^int lefwArrayTracks (const char*  xy, double  start, int  numTracks, double  space, const char*  layers) {$/;"	f
lefwArrayTracks	lef/lefwWriter.cpp	/^lefwArrayTracks(const char  *xy,$/;"	f
lefwBeginextCreator	clef/xlefwWriter.cpp	/^int lefwBeginextCreator (const char*  creatorName) {$/;"	f
lefwBeginextCreator	lef/lefwWriter.cpp	/^lefwBeginextCreator(const char *creatorName)$/;"	f
lefwBeginextDate	clef/xlefwWriter.cpp	/^int lefwBeginextDate () {$/;"	f
lefwBeginextDate	lef/lefwWriter.cpp	/^lefwBeginextDate()$/;"	f
lefwBeginextRevision	clef/xlefwWriter.cpp	/^int lefwBeginextRevision (int  vers1, int  vers2) {$/;"	f
lefwBeginextRevision	lef/lefwWriter.cpp	/^lefwBeginextRevision(int    vers1,$/;"	f
lefwBeginextSyntax	clef/xlefwWriter.cpp	/^int lefwBeginextSyntax (const char*  title, const char*  string) {$/;"	f
lefwBeginextSyntax	lef/lefwWriter.cpp	/^lefwBeginextSyntax(const char   *title,$/;"	f
lefwBusBitChars	clef/xlefwWriter.cpp	/^int lefwBusBitChars (const char*  busBitChars) {$/;"	f
lefwBusBitChars	lef/lefwWriter.cpp	/^lefwBusBitChars(const char *busBitChars)$/;"	f
lefwBusBitCharsCbk	lef/lefwWriterCalls.cpp	51;"	d	file:
lefwBusBitCharsCbkType	clef/lefwWriterCalls.h	/^  lefwBusBitCharsCbkType = 4,$/;"	e	enum:__anon1
lefwBusBitCharsCbkType	lef/lefwWriterCalls.hpp	/^  lefwBusBitCharsCbkType,$/;"	e	enum:__anon3
lefwCallbackType_e	clef/lefwWriterCalls.h	/^} lefwCallbackType_e;$/;"	t	typeref:enum:__anon1
lefwCallbackType_e	lef/lefwWriterCalls.hpp	/^} lefwCallbackType_e;$/;"	t	typeref:enum:__anon3
lefwCallbacksReq	lef/lefwWriterCalls.cpp	/^int lefwCallbacksReq[MAXCBS] = {$/;"	v
lefwCallbacksSeq	lef/lefwWriterCalls.cpp	/^lefwVoidCbkFnType lefwCallbacksSeq[MAXCBS] = {$/;"	v
lefwCallbacksType	lef/lefwWriterCalls.cpp	/^lefwCallbackType_e lefwCallbacksType[MAXCBS] = {$/;"	v
lefwCaseSensitive	clef/xlefwWriter.cpp	/^int lefwCaseSensitive (const char*  caseSensitive) {$/;"	f
lefwCaseSensitive	lef/lefwWriter.cpp	/^lefwCaseSensitive(const char *caseSensitive)$/;"	f
lefwCaseSensitiveCbk	lef/lefwWriterCalls.cpp	49;"	d	file:
lefwCaseSensitiveCbkType	clef/lefwWriterCalls.h	/^  lefwCaseSensitiveCbkType = 2,$/;"	e	enum:__anon1
lefwCaseSensitiveCbkType	lef/lefwWriterCalls.hpp	/^  lefwCaseSensitiveCbkType,$/;"	e	enum:__anon3
lefwClearanceMeasure	clef/xlefwWriter.cpp	/^int lefwClearanceMeasure (const char*  type) {$/;"	f
lefwClearanceMeasure	lef/lefwWriter.cpp	/^lefwClearanceMeasure(const char *type)$/;"	f
lefwClearanceMeasureCbk	lef/lefwWriterCalls.cpp	55;"	d	file:
lefwClearanceMeasureCbkType	clef/lefwWriterCalls.h	/^  lefwClearanceMeasureCbkType = 8,$/;"	e	enum:__anon1
lefwClearanceMeasureCbkType	lef/lefwWriterCalls.hpp	/^  lefwClearanceMeasureCbkType,$/;"	e	enum:__anon3
lefwCloseEncrypt	clef/xlefwWriter.cpp	/^int lefwCloseEncrypt () {$/;"	f
lefwCloseEncrypt	lef/lefwWriter.cpp	/^lefwCloseEncrypt()$/;"	f
lefwCorrectionTableCbk	lef/lefwWriterCalls.cpp	67;"	d	file:
lefwCorrectionTableCbkType	clef/lefwWriterCalls.h	/^  lefwCorrectionTableCbkType = 20,$/;"	e	enum:__anon1
lefwCorrectionTableCbkType	lef/lefwWriterCalls.hpp	/^  lefwCorrectionTableCbkType,$/;"	e	enum:__anon3
lefwCountFunc	lef/lefwWriterCalls.cpp	/^lefwCountFunc(lefwCallbackType_e    e,$/;"	f
lefwCounter	lef/lefwWriter.cpp	/^int lefwCounter = 0;  \/\/ number of nets, components in section$/;"	v
lefwCrossTalkCbk	lef/lefwWriterCalls.cpp	65;"	d	file:
lefwCrossTalkCbkType	clef/lefwWriterCalls.h	/^  lefwCrossTalkCbkType = 18,$/;"	e	enum:__anon1
lefwCrossTalkCbkType	lef/lefwWriterCalls.hpp	/^  lefwCrossTalkCbkType,$/;"	e	enum:__anon3
lefwCurrentLineNumber	clef/xlefwWriter.cpp	/^int lefwCurrentLineNumber () {$/;"	f
lefwCurrentLineNumber	lef/lefwWriter.cpp	/^lefwCurrentLineNumber()$/;"	f
lefwDensityCheckStep	clef/xlefwWriter.cpp	/^int lefwDensityCheckStep (double  checkStepValue) {$/;"	f
lefwDensityCheckStep	lef/lefwWriter.cpp	/^lefwDensityCheckStep(double checkStepValue)$/;"	f
lefwDensityCheckWindow	clef/xlefwWriter.cpp	/^int lefwDensityCheckWindow (double  checkWindowLength, double  checkWindowWidth) {$/;"	f
lefwDensityCheckWindow	lef/lefwWriter.cpp	/^lefwDensityCheckWindow(double   checkWindowLength,$/;"	f
lefwDidInit	lef/lefwWriter.cpp	/^int lefwDidInit = 0; \/\/ required section$/;"	v
lefwDidLayer	lef/lefwWriter.cpp	/^int lefwDidLayer = 0; \/\/ required section$/;"	v
lefwDidVia	lef/lefwWriter.cpp	/^int lefwDidVia = 0; \/\/ required section$/;"	v
lefwDidViaMacro	lef/lefwWriter.cpp	/^int lefwDidViaMacro = 0; \/\/ required section$/;"	v
lefwDidViaRule	lef/lefwWriter.cpp	/^int lefwDidViaRule = 0; \/\/ required section$/;"	v
lefwDidViaSite	lef/lefwWriter.cpp	/^int lefwDidViaSite = 0; \/\/ required section$/;"	v
lefwDielectric	clef/xlefwWriter.cpp	/^int lefwDielectric (double  dielectric) {$/;"	f
lefwDielectric	lef/lefwWriter.cpp	/^lefwDielectric(double dielectric)$/;"	f
lefwDielectricCbk	lef/lefwWriterCalls.cpp	70;"	d	file:
lefwDielectricCbkType	clef/lefwWriterCalls.h	/^  lefwDielectricCbkType = 23,$/;"	e	enum:__anon1
lefwDielectricCbkType	lef/lefwWriterCalls.hpp	/^  lefwDielectricCbkType,$/;"	e	enum:__anon3
lefwDividerChar	clef/xlefwWriter.cpp	/^int lefwDividerChar (const char*  dividerChar) {$/;"	f
lefwDividerChar	lef/lefwWriter.cpp	/^lefwDividerChar(const char *dividerChar)$/;"	f
lefwDividerCharCbk	lef/lefwWriterCalls.cpp	52;"	d	file:
lefwDividerCharCbkType	clef/lefwWriterCalls.h	/^  lefwDividerCharCbkType = 5,$/;"	e	enum:__anon1
lefwDividerCharCbkType	lef/lefwWriterCalls.hpp	/^  lefwDividerCharCbkType,$/;"	e	enum:__anon3
lefwEdgeRate	clef/xlefwWriter.cpp	/^int lefwEdgeRate (double  num) {$/;"	f
lefwEdgeRate	lef/lefwWriter.cpp	/^lefwEdgeRate(double num)$/;"	f
lefwEdgeRateScaleFactor	clef/xlefwWriter.cpp	/^int lefwEdgeRateScaleFactor (double  num) {$/;"	f
lefwEdgeRateScaleFactor	lef/lefwWriter.cpp	/^lefwEdgeRateScaleFactor(double num)$/;"	f
lefwEdgeRateThreshold1	clef/xlefwWriter.cpp	/^int lefwEdgeRateThreshold1 (double  num) {$/;"	f
lefwEdgeRateThreshold1	lef/lefwWriter.cpp	/^lefwEdgeRateThreshold1(double num)$/;"	f
lefwEdgeRateThreshold2	clef/xlefwWriter.cpp	/^int lefwEdgeRateThreshold2 (double  num) {$/;"	f
lefwEdgeRateThreshold2	lef/lefwWriter.cpp	/^lefwEdgeRateThreshold2(double num)$/;"	f
lefwEncrypt	clef/xlefwWriter.cpp	/^int lefwEncrypt () {$/;"	f
lefwEncrypt	lef/lefwWriter.cpp	/^lefwEncrypt()$/;"	f
lefwEnd	clef/xlefwWriter.cpp	/^int lefwEnd () {$/;"	f
lefwEnd	lef/lefwWriter.cpp	/^lefwEnd()$/;"	f
lefwEndArray	clef/xlefwWriter.cpp	/^int lefwEndArray (const char*  arrayName) {$/;"	f
lefwEndArray	lef/lefwWriter.cpp	/^lefwEndArray(const char *arrayName)$/;"	f
lefwEndArrayDefaultCap	clef/xlefwWriter.cpp	/^int lefwEndArrayDefaultCap () {$/;"	f
lefwEndArrayDefaultCap	lef/lefwWriter.cpp	/^lefwEndArrayDefaultCap()$/;"	f
lefwEndArrayFloorplan	clef/xlefwWriter.cpp	/^int lefwEndArrayFloorplan (const char*  name) {$/;"	f
lefwEndArrayFloorplan	lef/lefwWriter.cpp	/^lefwEndArrayFloorplan(const char *name)$/;"	f
lefwEndBeginext	clef/xlefwWriter.cpp	/^int lefwEndBeginext () {$/;"	f
lefwEndBeginext	lef/lefwWriter.cpp	/^lefwEndBeginext()$/;"	f
lefwEndCorrectTable	clef/xlefwWriter.cpp	/^int lefwEndCorrectTable () {$/;"	f
lefwEndCorrectTable	lef/lefwWriter.cpp	/^lefwEndCorrectTable()$/;"	f
lefwEndIrdrop	clef/xlefwWriter.cpp	/^int lefwEndIrdrop () {$/;"	f
lefwEndIrdrop	lef/lefwWriter.cpp	/^lefwEndIrdrop()$/;"	f
lefwEndLayer	clef/xlefwWriter.cpp	/^int lefwEndLayer (const char*  layerName) {$/;"	f
lefwEndLayer	lef/lefwWriter.cpp	/^lefwEndLayer(const char *layerName)$/;"	f
lefwEndLayerRouting	clef/xlefwWriter.cpp	/^int lefwEndLayerRouting (const char*  layerName) {$/;"	f
lefwEndLayerRouting	lef/lefwWriter.cpp	/^lefwEndLayerRouting(const char *layerName)$/;"	f
lefwEndLibCbk	lef/lefwWriterCalls.cpp	77;"	d	file:
lefwEndLibCbkType	clef/lefwWriterCalls.h	/^  lefwEndLibCbkType = 30$/;"	e	enum:__anon1
lefwEndLibCbkType	lef/lefwWriterCalls.hpp	/^  lefwEndLibCbkType$/;"	e	enum:__anon3
lefwEndMacro	clef/xlefwWriter.cpp	/^int lefwEndMacro (const char*  macroName) {$/;"	f
lefwEndMacro	lef/lefwWriter.cpp	/^lefwEndMacro(const char *macroName)$/;"	f
lefwEndMacroDensity	clef/xlefwWriter.cpp	/^int lefwEndMacroDensity () {$/;"	f
lefwEndMacroDensity	lef/lefwWriter.cpp	/^lefwEndMacroDensity()$/;"	f
lefwEndMacroObs	clef/xlefwWriter.cpp	/^int lefwEndMacroObs () {$/;"	f
lefwEndMacroObs	lef/lefwWriter.cpp	/^lefwEndMacroObs()$/;"	f
lefwEndMacroPin	clef/xlefwWriter.cpp	/^int lefwEndMacroPin (const char*  pinName) {$/;"	f
lefwEndMacroPin	lef/lefwWriter.cpp	/^lefwEndMacroPin(const char *pinName)$/;"	f
lefwEndMacroPinPort	clef/xlefwWriter.cpp	/^int lefwEndMacroPinPort () {$/;"	f
lefwEndMacroPinPort	lef/lefwWriter.cpp	/^lefwEndMacroPinPort()$/;"	f
lefwEndMacroTiming	clef/xlefwWriter.cpp	/^int lefwEndMacroTiming () {$/;"	f
lefwEndMacroTiming	lef/lefwWriter.cpp	/^lefwEndMacroTiming()$/;"	f
lefwEndNoiseTable	clef/xlefwWriter.cpp	/^int lefwEndNoiseTable () {$/;"	f
lefwEndNoiseTable	lef/lefwWriter.cpp	/^lefwEndNoiseTable()$/;"	f
lefwEndNonDefaultRule	clef/xlefwWriter.cpp	/^int lefwEndNonDefaultRule (const char*  ruleName) {$/;"	f
lefwEndNonDefaultRule	lef/lefwWriter.cpp	/^lefwEndNonDefaultRule(const char *ruleName)$/;"	f
lefwEndPropDef	clef/xlefwWriter.cpp	/^int lefwEndPropDef () {$/;"	f
lefwEndPropDef	lef/lefwWriter.cpp	/^lefwEndPropDef()$/;"	f
lefwEndSite	clef/xlefwWriter.cpp	/^int lefwEndSite (const char*  siteName) {$/;"	f
lefwEndSite	lef/lefwWriter.cpp	/^lefwEndSite(const char *siteName)$/;"	f
lefwEndSpacing	clef/xlefwWriter.cpp	/^int lefwEndSpacing () {$/;"	f
lefwEndSpacing	lef/lefwWriter.cpp	/^lefwEndSpacing()$/;"	f
lefwEndUnits	clef/xlefwWriter.cpp	/^int lefwEndUnits () {$/;"	f
lefwEndUnits	lef/lefwWriter.cpp	/^lefwEndUnits()$/;"	f
lefwEndVia	clef/xlefwWriter.cpp	/^int lefwEndVia (const char*  viaName) {$/;"	f
lefwEndVia	lef/lefwWriter.cpp	/^lefwEndVia(const char *viaName)$/;"	f
lefwEndViaRule	clef/xlefwWriter.cpp	/^int lefwEndViaRule (const char*  viaRuleName) {$/;"	f
lefwEndViaRule	lef/lefwWriter.cpp	/^lefwEndViaRule(const char *viaRuleName)$/;"	f
lefwEndViaRuleGen	clef/xlefwWriter.cpp	/^int lefwEndViaRuleGen (const char*  viaRuleName) {$/;"	f
lefwEndViaRuleGen	lef/lefwWriter.cpp	/^lefwEndViaRuleGen(const char *viaRuleName)$/;"	f
lefwErrorLogFunction	lef/lefwWriter.cpp	/^LEFI_LOG_FUNCTION lefwErrorLogFunction;$/;"	v
lefwExtCbk	lef/lefwWriterCalls.cpp	76;"	d	file:
lefwExtCbkType	clef/lefwWriterCalls.h	/^  lefwExtCbkType = 29,$/;"	e	enum:__anon1
lefwExtCbkType	lef/lefwWriterCalls.hpp	/^  lefwExtCbkType,$/;"	e	enum:__anon3
lefwFName	lef/lefwWriterCalls.cpp	/^lefwFName()$/;"	f
lefwFile	lef/lefwWriter.cpp	/^FILE *lefwFile = 0;   \/\/ File to write to.$/;"	v
lefwFileName	lef/lefwWriterCalls.cpp	/^static char *lefwFileName = 0;$/;"	v	file:
lefwFillActiveSpacing	clef/xlefwWriter.cpp	/^int lefwFillActiveSpacing (double  fillToActiveSpacing) {$/;"	f
lefwFillActiveSpacing	lef/lefwWriter.cpp	/^lefwFillActiveSpacing(double fillToActiveSpacing)$/;"	f
lefwFixedMask	clef/xlefwWriter.cpp	/^int lefwFixedMask () {$/;"	f
lefwFixedMask	lef/lefwWriter.cpp	/^lefwFixedMask()$/;"	f
lefwGetUserData	clef/xlefwWriterCalls.cpp	/^lefiUserData lefwGetUserData () {$/;"	f
lefwGetUserData	lef/lefwWriterCalls.cpp	/^lefwGetUserData()$/;"	f
lefwHasArrayReq	lef/lefwWriter.cpp	/^int lefwHasArrayReq = 0; \/\/ array required data$/;"	v
lefwHasInit	lef/lefwWriter.cpp	/^int lefwHasInit = 0;    \/\/ for lefwInit has called$/;"	v
lefwHasInitCbk	lef/lefwWriter.cpp	/^int lefwHasInitCbk = 0; \/\/ for lefwInitCbk has called$/;"	v
lefwHasLayerRoutingEol	lef/lefwWriter.cpp	/^static int lefwHasLayerRoutingEol = 0;  \/\/ mark if layer routing is endofline$/;"	v	file:
lefwHasLayerRoutingRange	lef/lefwWriter.cpp	/^static int lefwHasLayerRoutingRange = 0;  \/\/ mark if layer routing has range$/;"	v	file:
lefwHasLayerRoutingSpacing	lef/lefwWriter.cpp	/^static int lefwHasLayerRoutingSpacing = 0;  \/\/ layer routing is lengththreshold$/;"	v	file:
lefwIRDropCbk	lef/lefwWriterCalls.cpp	71;"	d	file:
lefwIRDropCbkType	clef/lefwWriterCalls.h	/^  lefwIRDropCbkType = 24,$/;"	e	enum:__anon1
lefwIRDropCbkType	lef/lefwWriterCalls.hpp	/^  lefwIRDropCbkType,$/;"	e	enum:__anon3
lefwInit	clef/xlefwWriter.cpp	/^int lefwInit (FILE*  f) {$/;"	f
lefwInit	lef/lefwWriter.cpp	/^lefwInit(FILE *f)$/;"	f
lefwInitCbk	clef/xlefwWriter.cpp	/^int lefwInitCbk (FILE*  f) {$/;"	f
lefwInitCbk	lef/lefwWriter.cpp	/^lefwInitCbk(FILE *f)$/;"	f
lefwIntPropDef	clef/xlefwWriter.cpp	/^int lefwIntPropDef (const char*  objType, const char*  propName, double  leftRange, double  rightRange, int     propValue) {$/;"	f
lefwIntPropDef	lef/lefwWriter.cpp	/^lefwIntPropDef(const char   *objType,$/;"	f
lefwIntProperty	clef/xlefwWriter.cpp	/^int lefwIntProperty (const char*  propName, int  propValue) {$/;"	f
lefwIntProperty	lef/lefwWriter.cpp	/^lefwIntProperty(const char  *propName,$/;"	f
lefwIrdropTable	clef/xlefwWriter.cpp	/^int lefwIrdropTable (const char*  tableName, const char*  currentsNvolts) {$/;"	f
lefwIrdropTable	lef/lefwWriter.cpp	/^lefwIrdropTable(const char  *tableName,$/;"	f
lefwIsArrayDef	lef/lefwWriter.cpp	/^int lefwIsArrayDef = 0; \/\/ array default cap flag$/;"	v
lefwIsArrayFloorp	lef/lefwWriter.cpp	/^int lefwIsArrayFloorp = 0; \/\/ array floorplan flag$/;"	v
lefwIsCorrectTable	lef/lefwWriter.cpp	/^int lefwIsCorrectTable = 0; \/\/ correctiontable flag$/;"	v
lefwIsCut	lef/lefwWriter.cpp	/^int lefwIsCut = 0; \/\/ cut layer$/;"	v
lefwIsEdgerate	lef/lefwWriter.cpp	/^int lefwIsEdgerate = 0; \/\/ edgerate within noisetable$/;"	v
lefwIsFloorp	lef/lefwWriter.cpp	/^int lefwIsFloorp = 0; \/\/ floorplan within array$/;"	v
lefwIsImplant	lef/lefwWriter.cpp	/^int lefwIsImplant = 0; \/\/ implant layer$/;"	v
lefwIsLayerCutSpacing	lef/lefwWriter.cpp	/^static int lefwIsLayerCutSpacing = 0;  \/\/ mark if layer cut spacing$/;"	v	file:
lefwIsMacroDensity	lef/lefwWriter.cpp	/^int lefwIsMacroDensity = 0; \/\/ macro density flag$/;"	v
lefwIsMacroObs	lef/lefwWriter.cpp	/^int lefwIsMacroObs = 0; \/\/ macro obs flag$/;"	v
lefwIsMacroObsLayer	lef/lefwWriter.cpp	/^int lefwIsMacroObsLayer = 0; \/\/ macro obs layer within macro obs$/;"	v
lefwIsMacroPin	lef/lefwWriter.cpp	/^int lefwIsMacroPin = 0; \/\/ macro pin flag$/;"	v
lefwIsMacroPinPort	lef/lefwWriter.cpp	/^int lefwIsMacroPinPort = 0; \/\/ macro pin port within macro pin$/;"	v
lefwIsMacroPinPortLayer	lef/lefwWriter.cpp	/^int lefwIsMacroPinPortLayer = 0; \/\/ macro pin port layer within macro pin port$/;"	v
lefwIsMacroTiming	lef/lefwWriter.cpp	/^int lefwIsMacroTiming = 0; \/\/ macro timing flag$/;"	v
lefwIsMacroTimingModel	lef/lefwWriter.cpp	/^int lefwIsMacroTimingModel = 0; \/\/ macro timing model flag$/;"	v
lefwIsMaxviastack	lef/lefwWriter.cpp	/^int lefwIsMaxviastack = 0; \/\/ maximum stacked-via$/;"	v
lefwIsNoiseTable	lef/lefwWriter.cpp	/^int lefwIsNoiseTable = 0; \/\/ noisetable flag$/;"	v
lefwIsNonDefaultRule	lef/lefwWriter.cpp	/^int lefwIsNonDefaultRule = 0; \/\/ nondefaultrule flag$/;"	v
lefwIsOutResist	lef/lefwWriter.cpp	/^int lefwIsOutResist = 0; \/\/ outputResistance within edgerate$/;"	v
lefwIsRouting	lef/lefwWriter.cpp	/^int lefwIsRouting = 0; \/\/ routing$/;"	v
lefwIsRoutingMinCut	lef/lefwWriter.cpp	/^int lefwIsRoutingMinCut = 0; \/\/ routing Minimumcut$/;"	v
lefwIsRoutingMinCutDist	lef/lefwWriter.cpp	/^int lefwIsRoutingMinCutDist = 0; \/\/ routing Minimumcut distance$/;"	v
lefwIsRoutingMinCutLen	lef/lefwWriter.cpp	/^int lefwIsRoutingMinCutLen = 0; \/\/ routing Minimumcut length within$/;"	v
lefwIsRoutingReqData	lef/lefwWriter.cpp	/^int lefwIsRoutingReqData = 0; \/\/ layer routing required data are provided$/;"	v
lefwLayerACCurrentDensity	clef/xlefwWriter.cpp	/^int lefwLayerACCurrentDensity (const char*  type, double  value) {$/;"	f
lefwLayerACCurrentDensity	lef/lefwWriter.cpp	/^lefwLayerACCurrentDensity(const char    *type,$/;"	f
lefwLayerACCutarea	clef/xlefwWriter.cpp	/^int lefwLayerACCutarea (int  numCutareas, double*  cutareas) {$/;"	f
lefwLayerACCutarea	lef/lefwWriter.cpp	/^lefwLayerACCutarea(int      numCutareas,$/;"	f
lefwLayerACFrequency	clef/xlefwWriter.cpp	/^int lefwLayerACFrequency (int  numFrequency, double*  frequency) {$/;"	f
lefwLayerACFrequency	lef/lefwWriter.cpp	/^lefwLayerACFrequency(int    numFrequency,$/;"	f
lefwLayerACTableEntries	clef/xlefwWriter.cpp	/^int lefwLayerACTableEntries (int  numEntries, double*  entries) {$/;"	f
lefwLayerACTableEntries	lef/lefwWriter.cpp	/^lefwLayerACTableEntries(int     numEntries,$/;"	f
lefwLayerACWidth	clef/xlefwWriter.cpp	/^int lefwLayerACWidth (int  numWidths, double*  widths) {$/;"	f
lefwLayerACWidth	lef/lefwWriter.cpp	/^lefwLayerACWidth(int    numWidths,$/;"	f
lefwLayerAntennaAreaDiffReducePwl	clef/xlefwWriter.cpp	/^int lefwLayerAntennaAreaDiffReducePwl (int  numPwls, double*  diffAreas, double*  metalDiffFactors) {$/;"	f
lefwLayerAntennaAreaDiffReducePwl	lef/lefwWriter.cpp	/^lefwLayerAntennaAreaDiffReducePwl(int       numPwls,$/;"	f
lefwLayerAntennaAreaFactor	clef/xlefwWriter.cpp	/^int lefwLayerAntennaAreaFactor (double  value, const char*  diffUseOnly) {$/;"	f
lefwLayerAntennaAreaFactor	lef/lefwWriter.cpp	/^lefwLayerAntennaAreaFactor(double       value,$/;"	f
lefwLayerAntennaAreaMinusDiff	clef/xlefwWriter.cpp	/^int lefwLayerAntennaAreaMinusDiff (double  minusDiffFactor) {$/;"	f
lefwLayerAntennaAreaMinusDiff	lef/lefwWriter.cpp	/^lefwLayerAntennaAreaMinusDiff(double minusDiffFactor)$/;"	f
lefwLayerAntennaAreaRatio	clef/xlefwWriter.cpp	/^int lefwLayerAntennaAreaRatio (double  value) {$/;"	f
lefwLayerAntennaAreaRatio	lef/lefwWriter.cpp	/^lefwLayerAntennaAreaRatio(double value)$/;"	f
lefwLayerAntennaCumAreaRatio	clef/xlefwWriter.cpp	/^int lefwLayerAntennaCumAreaRatio (double  value) {$/;"	f
lefwLayerAntennaCumAreaRatio	lef/lefwWriter.cpp	/^lefwLayerAntennaCumAreaRatio(double value)$/;"	f
lefwLayerAntennaCumDiffAreaRatio	clef/xlefwWriter.cpp	/^int lefwLayerAntennaCumDiffAreaRatio (double  value) {$/;"	f
lefwLayerAntennaCumDiffAreaRatio	lef/lefwWriter.cpp	/^lefwLayerAntennaCumDiffAreaRatio(double value)$/;"	f
lefwLayerAntennaCumDiffAreaRatioPwl	clef/xlefwWriter.cpp	/^int lefwLayerAntennaCumDiffAreaRatioPwl (int  numPwls, double*  diffusions, double*  ratios) {$/;"	f
lefwLayerAntennaCumDiffAreaRatioPwl	lef/lefwWriter.cpp	/^lefwLayerAntennaCumDiffAreaRatioPwl(int     numPwls,$/;"	f
lefwLayerAntennaCumDiffSideAreaRatio	clef/xlefwWriter.cpp	/^int lefwLayerAntennaCumDiffSideAreaRatio (double  value) {$/;"	f
lefwLayerAntennaCumDiffSideAreaRatio	lef/lefwWriter.cpp	/^lefwLayerAntennaCumDiffSideAreaRatio(double value)$/;"	f
lefwLayerAntennaCumDiffSideAreaRatioPwl	clef/xlefwWriter.cpp	/^int lefwLayerAntennaCumDiffSideAreaRatioPwl (int  numPwls, double*  diffusions, double*  ratios) {$/;"	f
lefwLayerAntennaCumDiffSideAreaRatioPwl	lef/lefwWriter.cpp	/^lefwLayerAntennaCumDiffSideAreaRatioPwl(int     numPwls,$/;"	f
lefwLayerAntennaCumRoutingPlusCut	clef/xlefwWriter.cpp	/^int lefwLayerAntennaCumRoutingPlusCut () {$/;"	f
lefwLayerAntennaCumRoutingPlusCut	lef/lefwWriter.cpp	/^lefwLayerAntennaCumRoutingPlusCut()$/;"	f
lefwLayerAntennaCumSideAreaRatio	clef/xlefwWriter.cpp	/^int lefwLayerAntennaCumSideAreaRatio (double  value) {$/;"	f
lefwLayerAntennaCumSideAreaRatio	lef/lefwWriter.cpp	/^lefwLayerAntennaCumSideAreaRatio(double value)$/;"	f
lefwLayerAntennaDiffAreaRatio	clef/xlefwWriter.cpp	/^int lefwLayerAntennaDiffAreaRatio (double  value) {$/;"	f
lefwLayerAntennaDiffAreaRatio	lef/lefwWriter.cpp	/^lefwLayerAntennaDiffAreaRatio(double value)$/;"	f
lefwLayerAntennaDiffAreaRatioPwl	clef/xlefwWriter.cpp	/^int lefwLayerAntennaDiffAreaRatioPwl (int  numPwls, double*  diffusions, double*  ratios) {$/;"	f
lefwLayerAntennaDiffAreaRatioPwl	lef/lefwWriter.cpp	/^lefwLayerAntennaDiffAreaRatioPwl(int    numPwls,$/;"	f
lefwLayerAntennaDiffSideAreaRatio	clef/xlefwWriter.cpp	/^int lefwLayerAntennaDiffSideAreaRatio (double  value) {$/;"	f
lefwLayerAntennaDiffSideAreaRatio	lef/lefwWriter.cpp	/^lefwLayerAntennaDiffSideAreaRatio(double value)$/;"	f
lefwLayerAntennaDiffSideAreaRatioPwl	clef/xlefwWriter.cpp	/^int lefwLayerAntennaDiffSideAreaRatioPwl (int  numPwls, double*  diffusions, double*  ratios) {$/;"	f
lefwLayerAntennaDiffSideAreaRatioPwl	lef/lefwWriter.cpp	/^lefwLayerAntennaDiffSideAreaRatioPwl(int    numPwls,$/;"	f
lefwLayerAntennaGatePlusDiff	clef/xlefwWriter.cpp	/^int lefwLayerAntennaGatePlusDiff (double  plusDiffFactor) {$/;"	f
lefwLayerAntennaGatePlusDiff	lef/lefwWriter.cpp	/^lefwLayerAntennaGatePlusDiff(double plusDiffFactor)$/;"	f
lefwLayerAntennaModel	clef/xlefwWriter.cpp	/^int lefwLayerAntennaModel (const char*  oxide) {$/;"	f
lefwLayerAntennaModel	lef/lefwWriter.cpp	/^lefwLayerAntennaModel(const char *oxide)$/;"	f
lefwLayerAntennaSideAreaFactor	clef/xlefwWriter.cpp	/^int lefwLayerAntennaSideAreaFactor (double  value, const char*  diffUseOnly) {$/;"	f
lefwLayerAntennaSideAreaFactor	lef/lefwWriter.cpp	/^lefwLayerAntennaSideAreaFactor(double       value,$/;"	f
lefwLayerAntennaSideAreaRatio	clef/xlefwWriter.cpp	/^int lefwLayerAntennaSideAreaRatio (double  value) {$/;"	f
lefwLayerAntennaSideAreaRatio	lef/lefwWriter.cpp	/^lefwLayerAntennaSideAreaRatio(double value)$/;"	f
lefwLayerArraySpacing	clef/xlefwWriter.cpp	/^int lefwLayerArraySpacing (int  longArray, double  viaWidth, double  cutSpacing, int  numArrayCut, int*  arrayCuts, double*  arraySpacings) {$/;"	f
lefwLayerArraySpacing	lef/lefwWriter.cpp	/^lefwLayerArraySpacing(int       longArray,$/;"	f
lefwLayerCbk	lef/lefwWriterCalls.cpp	61;"	d	file:
lefwLayerCbkType	clef/lefwWriterCalls.h	/^  lefwLayerCbkType = 14,$/;"	e	enum:__anon1
lefwLayerCbkType	lef/lefwWriterCalls.hpp	/^  lefwLayerCbkType,$/;"	e	enum:__anon3
lefwLayerCutSpacing	clef/xlefwWriter.cpp	/^int lefwLayerCutSpacing (double  spacing) {$/;"	f
lefwLayerCutSpacing	lef/lefwWriter.cpp	/^lefwLayerCutSpacing(double spacing)$/;"	f
lefwLayerCutSpacingAdjacent	clef/xlefwWriter.cpp	/^int lefwLayerCutSpacingAdjacent (int  viaCuts, double  distance, int  stack) {$/;"	f
lefwLayerCutSpacingAdjacent	lef/lefwWriter.cpp	/^lefwLayerCutSpacingAdjacent(int     viaCuts,    \/\/ either 2, 3 or 4, optional $/;"	f
lefwLayerCutSpacingArea	clef/xlefwWriter.cpp	/^int lefwLayerCutSpacingArea (double  cutArea) {$/;"	f
lefwLayerCutSpacingArea	lef/lefwWriter.cpp	/^lefwLayerCutSpacingArea(double cutArea)$/;"	f
lefwLayerCutSpacingCenterToCenter	clef/xlefwWriter.cpp	/^int lefwLayerCutSpacingCenterToCenter () {$/;"	f
lefwLayerCutSpacingCenterToCenter	lef/lefwWriter.cpp	/^lefwLayerCutSpacingCenterToCenter()$/;"	f
lefwLayerCutSpacingEnd	clef/xlefwWriter.cpp	/^int lefwLayerCutSpacingEnd () {$/;"	f
lefwLayerCutSpacingEnd	lef/lefwWriter.cpp	/^lefwLayerCutSpacingEnd()$/;"	f
lefwLayerCutSpacingLayer	clef/xlefwWriter.cpp	/^int lefwLayerCutSpacingLayer (const char*  name2, int  stack) {$/;"	f
lefwLayerCutSpacingLayer	lef/lefwWriter.cpp	/^lefwLayerCutSpacingLayer(const char *name2,$/;"	f
lefwLayerCutSpacingParallel	clef/xlefwWriter.cpp	/^int lefwLayerCutSpacingParallel () {$/;"	f
lefwLayerCutSpacingParallel	lef/lefwWriter.cpp	/^lefwLayerCutSpacingParallel()$/;"	f
lefwLayerCutSpacingSameNet	clef/xlefwWriter.cpp	/^int lefwLayerCutSpacingSameNet () {$/;"	f
lefwLayerCutSpacingSameNet	lef/lefwWriter.cpp	/^lefwLayerCutSpacingSameNet()$/;"	f
lefwLayerCutSpacingTableOrtho	clef/xlefwWriter.cpp	/^int lefwLayerCutSpacingTableOrtho (int  numSpacing, double*  cutWithins, double*  orthoSpacings) {$/;"	f
lefwLayerCutSpacingTableOrtho	lef/lefwWriter.cpp	/^lefwLayerCutSpacingTableOrtho(int       numSpacing,$/;"	f
lefwLayerDCCurrentDensity	clef/xlefwWriter.cpp	/^int lefwLayerDCCurrentDensity (const char*  type, double  value) {$/;"	f
lefwLayerDCCurrentDensity	lef/lefwWriter.cpp	/^lefwLayerDCCurrentDensity(const char    *type,$/;"	f
lefwLayerDCCutarea	clef/xlefwWriter.cpp	/^int lefwLayerDCCutarea (int  numCutareas, double*  cutareas) {$/;"	f
lefwLayerDCCutarea	lef/lefwWriter.cpp	/^lefwLayerDCCutarea(int      numCutareas,$/;"	f
lefwLayerDCTableEntries	clef/xlefwWriter.cpp	/^int lefwLayerDCTableEntries (int  numEntries, double*  entries) {$/;"	f
lefwLayerDCTableEntries	lef/lefwWriter.cpp	/^lefwLayerDCTableEntries(int     numEntries,$/;"	f
lefwLayerDCWidth	clef/xlefwWriter.cpp	/^int lefwLayerDCWidth (int  numWidths, double*  widths) {$/;"	f
lefwLayerDCWidth	lef/lefwWriter.cpp	/^lefwLayerDCWidth(int    numWidths,$/;"	f
lefwLayerEnclosure	clef/xlefwWriter.cpp	/^int lefwLayerEnclosure (const char*  location, double  overhang1, double  overhang2, double  width) {$/;"	f
lefwLayerEnclosure	lef/lefwWriter.cpp	/^lefwLayerEnclosure(const char   *location,$/;"	f
lefwLayerEnclosureLength	clef/xlefwWriter.cpp	/^int lefwLayerEnclosureLength (const char*  location, double  overhang1, double  overhang2, double  minLength) {$/;"	f
lefwLayerEnclosureLength	lef/lefwWriter.cpp	/^lefwLayerEnclosureLength(const char *location,$/;"	f
lefwLayerEnclosureWidth	clef/xlefwWriter.cpp	/^int lefwLayerEnclosureWidth (const char*  location, double  overhang1, double  overhang2, double  width, double  cutWithin) {$/;"	f
lefwLayerEnclosureWidth	lef/lefwWriter.cpp	/^lefwLayerEnclosureWidth(const char  *location,$/;"	f
lefwLayerMask	clef/xlefwWriter.cpp	/^int lefwLayerMask (int  maskColor) {$/;"	f
lefwLayerMask	lef/lefwWriter.cpp	/^lefwLayerMask(int colorMask)$/;"	f
lefwLayerPreferEnclosure	clef/xlefwWriter.cpp	/^int lefwLayerPreferEnclosure (const char*  location, double  overhang1, double  overhang2, double  width) {$/;"	f
lefwLayerPreferEnclosure	lef/lefwWriter.cpp	/^lefwLayerPreferEnclosure(const char *location,$/;"	f
lefwLayerResistancePerCut	clef/xlefwWriter.cpp	/^int lefwLayerResistancePerCut (double  resistance) {$/;"	f
lefwLayerResistancePerCut	lef/lefwWriter.cpp	/^lefwLayerResistancePerCut(double resistance)$/;"	f
lefwLayerRoutineEndSpacingtable	clef/xlefwWriter.cpp	/^int lefwLayerRoutineEndSpacingtable () {$/;"	f
lefwLayerRoutineEndSpacingtable	lef/lefwWriter.cpp	/^lefwLayerRoutineEndSpacingtable()$/;"	f
lefwLayerRouting	clef/xlefwWriter.cpp	/^int lefwLayerRouting (const char*  direction, double  width) {$/;"	f
lefwLayerRouting	lef/lefwWriter.cpp	/^lefwLayerRouting(const char *direction,$/;"	f
lefwLayerRoutingAntennaArea	clef/xlefwWriter.cpp	/^int lefwLayerRoutingAntennaArea (double  antennaArea) {$/;"	f
lefwLayerRoutingAntennaArea	lef/lefwWriter.cpp	/^lefwLayerRoutingAntennaArea(double antennaArea)$/;"	f
lefwLayerRoutingAntennaLength	clef/xlefwWriter.cpp	/^int lefwLayerRoutingAntennaLength (double  antennaLength) {$/;"	f
lefwLayerRoutingAntennaLength	lef/lefwWriter.cpp	/^lefwLayerRoutingAntennaLength(double antennaLength)$/;"	f
lefwLayerRoutingArea	clef/xlefwWriter.cpp	/^int lefwLayerRoutingArea (double  area) {$/;"	f
lefwLayerRoutingArea	lef/lefwWriter.cpp	/^lefwLayerRoutingArea(double area)$/;"	f
lefwLayerRoutingCapMultiplier	clef/xlefwWriter.cpp	/^int lefwLayerRoutingCapMultiplier (double  capMultiplier) {$/;"	f
lefwLayerRoutingCapMultiplier	lef/lefwWriter.cpp	/^lefwLayerRoutingCapMultiplier(double capMultiplier)$/;"	f
lefwLayerRoutingCapacitance	clef/xlefwWriter.cpp	/^int lefwLayerRoutingCapacitance (const char*  capacitance) {$/;"	f
lefwLayerRoutingCapacitance	lef/lefwWriter.cpp	/^lefwLayerRoutingCapacitance(const char *capacitance)$/;"	f
lefwLayerRoutingDiagMinEdgeLength	clef/xlefwWriter.cpp	/^int lefwLayerRoutingDiagMinEdgeLength (double  diagLength) {$/;"	f
lefwLayerRoutingDiagMinEdgeLength	lef/lefwWriter.cpp	/^lefwLayerRoutingDiagMinEdgeLength(double diagLength)$/;"	f
lefwLayerRoutingDiagPitch	clef/xlefwWriter.cpp	/^int lefwLayerRoutingDiagPitch (double  distance) {$/;"	f
lefwLayerRoutingDiagPitch	lef/lefwWriter.cpp	/^lefwLayerRoutingDiagPitch(double distance)$/;"	f
lefwLayerRoutingDiagPitchXYDistance	clef/xlefwWriter.cpp	/^int lefwLayerRoutingDiagPitchXYDistance (double  diag45Distance, double  diag135Distance) {$/;"	f
lefwLayerRoutingDiagPitchXYDistance	lef/lefwWriter.cpp	/^lefwLayerRoutingDiagPitchXYDistance(double  xDistance,$/;"	f
lefwLayerRoutingDiagSpacing	clef/xlefwWriter.cpp	/^int lefwLayerRoutingDiagSpacing (double  diagSpacing) {$/;"	f
lefwLayerRoutingDiagSpacing	lef/lefwWriter.cpp	/^lefwLayerRoutingDiagSpacing(double diagSpacing)$/;"	f
lefwLayerRoutingDiagWidth	clef/xlefwWriter.cpp	/^int lefwLayerRoutingDiagWidth (double  diagWidth) {$/;"	f
lefwLayerRoutingDiagWidth	lef/lefwWriter.cpp	/^lefwLayerRoutingDiagWidth(double diagWidth)$/;"	f
lefwLayerRoutingEdgeCap	clef/xlefwWriter.cpp	/^int lefwLayerRoutingEdgeCap (double  edgeCap) {$/;"	f
lefwLayerRoutingEdgeCap	lef/lefwWriter.cpp	/^lefwLayerRoutingEdgeCap(double edgeCap)$/;"	f
lefwLayerRoutingHeight	clef/xlefwWriter.cpp	/^int lefwLayerRoutingHeight (double  height) {$/;"	f
lefwLayerRoutingHeight	lef/lefwWriter.cpp	/^lefwLayerRoutingHeight(double height)$/;"	f
lefwLayerRoutingMaxwidth	clef/xlefwWriter.cpp	/^int lefwLayerRoutingMaxwidth (double  width) {$/;"	f
lefwLayerRoutingMaxwidth	lef/lefwWriter.cpp	/^lefwLayerRoutingMaxwidth(double width)$/;"	f
lefwLayerRoutingMinenclosedarea	clef/xlefwWriter.cpp	/^int lefwLayerRoutingMinenclosedarea (int  numMinenclosed, double*  area, double*  width) {$/;"	f
lefwLayerRoutingMinenclosedarea	lef/lefwWriter.cpp	/^lefwLayerRoutingMinenclosedarea(int     numMinenclosed,$/;"	f
lefwLayerRoutingMinimumcut	clef/xlefwWriter.cpp	/^int lefwLayerRoutingMinimumcut (double  numCuts, double  minWidth) {$/;"	f
lefwLayerRoutingMinimumcut	lef/lefwWriter.cpp	/^lefwLayerRoutingMinimumcut(double   numCuts,$/;"	f
lefwLayerRoutingMinimumcutConnections	clef/xlefwWriter.cpp	/^int lefwLayerRoutingMinimumcutConnections (const char*  direction) {$/;"	f
lefwLayerRoutingMinimumcutConnections	lef/lefwWriter.cpp	/^lefwLayerRoutingMinimumcutConnections(const char *direction)$/;"	f
lefwLayerRoutingMinimumcutLengthWithin	clef/xlefwWriter.cpp	/^int lefwLayerRoutingMinimumcutLengthWithin (double  length, double  distance) {$/;"	f
lefwLayerRoutingMinimumcutLengthWithin	lef/lefwWriter.cpp	/^lefwLayerRoutingMinimumcutLengthWithin(double   length,$/;"	f
lefwLayerRoutingMinimumcutWithin	clef/xlefwWriter.cpp	/^int lefwLayerRoutingMinimumcutWithin (double  numCuts, double  minWidth, double  cutDistance) {$/;"	f
lefwLayerRoutingMinimumcutWithin	lef/lefwWriter.cpp	/^lefwLayerRoutingMinimumcutWithin(double numCuts,$/;"	f
lefwLayerRoutingMinsize	clef/xlefwWriter.cpp	/^int lefwLayerRoutingMinsize (int  numRect, double*  minWidth, double*  minLength) {$/;"	f
lefwLayerRoutingMinsize	lef/lefwWriter.cpp	/^lefwLayerRoutingMinsize(int     numRect,$/;"	f
lefwLayerRoutingMinstep	clef/xlefwWriter.cpp	/^int lefwLayerRoutingMinstep (double  distance) {$/;"	f
lefwLayerRoutingMinstep	lef/lefwWriter.cpp	/^lefwLayerRoutingMinstep(double distance)$/;"	f
lefwLayerRoutingMinstepMaxEdges	clef/xlefwWriter.cpp	/^int lefwLayerRoutingMinstepMaxEdges (double  distance, double  maxEdges) {$/;"	f
lefwLayerRoutingMinstepMaxEdges	lef/lefwWriter.cpp	/^lefwLayerRoutingMinstepMaxEdges(double  distance,$/;"	f
lefwLayerRoutingMinstepWithOptions	clef/xlefwWriter.cpp	/^int lefwLayerRoutingMinstepWithOptions (double  distance, const char*  rule, double  maxLength) {$/;"	f
lefwLayerRoutingMinstepWithOptions	lef/lefwWriter.cpp	/^lefwLayerRoutingMinstepWithOptions(double       distance,$/;"	f
lefwLayerRoutingMinwidth	clef/xlefwWriter.cpp	/^int lefwLayerRoutingMinwidth (double  width) {$/;"	f
lefwLayerRoutingMinwidth	lef/lefwWriter.cpp	/^lefwLayerRoutingMinwidth(double width)$/;"	f
lefwLayerRoutingOffset	clef/xlefwWriter.cpp	/^int lefwLayerRoutingOffset (double  offset) {$/;"	f
lefwLayerRoutingOffset	lef/lefwWriter.cpp	/^lefwLayerRoutingOffset(double offset)$/;"	f
lefwLayerRoutingOffsetXYDistance	clef/xlefwWriter.cpp	/^int lefwLayerRoutingOffsetXYDistance (double  xDistance, double  yDistance) {$/;"	f
lefwLayerRoutingOffsetXYDistance	lef/lefwWriter.cpp	/^lefwLayerRoutingOffsetXYDistance(double xDistance,$/;"	f
lefwLayerRoutingPitch	clef/xlefwWriter.cpp	/^int lefwLayerRoutingPitch (double  pitch) {$/;"	f
lefwLayerRoutingPitch	lef/lefwWriter.cpp	/^lefwLayerRoutingPitch(double pitch)$/;"	f
lefwLayerRoutingPitchXYDistance	clef/xlefwWriter.cpp	/^int lefwLayerRoutingPitchXYDistance (double  xDistance, double  yDistance) {$/;"	f
lefwLayerRoutingPitchXYDistance	lef/lefwWriter.cpp	/^lefwLayerRoutingPitchXYDistance(double  xDistance,$/;"	f
lefwLayerRoutingProtrusion	clef/xlefwWriter.cpp	/^int lefwLayerRoutingProtrusion (double  width1, double  length, double  width2) {$/;"	f
lefwLayerRoutingProtrusion	lef/lefwWriter.cpp	/^lefwLayerRoutingProtrusion(double   width1,$/;"	f
lefwLayerRoutingResistance	clef/xlefwWriter.cpp	/^int lefwLayerRoutingResistance (const char*  resistance) {$/;"	f
lefwLayerRoutingResistance	lef/lefwWriter.cpp	/^lefwLayerRoutingResistance(const char *resistance)$/;"	f
lefwLayerRoutingShrinkage	clef/xlefwWriter.cpp	/^int lefwLayerRoutingShrinkage (double  shrinkage) {$/;"	f
lefwLayerRoutingShrinkage	lef/lefwWriter.cpp	/^lefwLayerRoutingShrinkage(double shrinkage)$/;"	f
lefwLayerRoutingSpacing	clef/xlefwWriter.cpp	/^int lefwLayerRoutingSpacing (double  spacing) {$/;"	f
lefwLayerRoutingSpacing	lef/lefwWriter.cpp	/^lefwLayerRoutingSpacing(double spacing)$/;"	f
lefwLayerRoutingSpacingEOLParallel	clef/xlefwWriter.cpp	/^int lefwLayerRoutingSpacingEOLParallel (double  parSpace, double  parWithin, int  twoEdges) {$/;"	f
lefwLayerRoutingSpacingEOLParallel	lef/lefwWriter.cpp	/^lefwLayerRoutingSpacingEOLParallel(double   parSpace,$/;"	f
lefwLayerRoutingSpacingEndOfLine	clef/xlefwWriter.cpp	/^int lefwLayerRoutingSpacingEndOfLine (double  eolWidth, double  eolWithin) {$/;"	f
lefwLayerRoutingSpacingEndOfLine	lef/lefwWriter.cpp	/^lefwLayerRoutingSpacingEndOfLine(double eolWidth,$/;"	f
lefwLayerRoutingSpacingEndOfNotchWidth	clef/xlefwWriter.cpp	/^int lefwLayerRoutingSpacingEndOfNotchWidth (double  eonWidth, double  minNSpacing, double  minNLength) {$/;"	f
lefwLayerRoutingSpacingEndOfNotchWidth	lef/lefwWriter.cpp	/^lefwLayerRoutingSpacingEndOfNotchWidth(double   eonWidth,$/;"	f
lefwLayerRoutingSpacingInfluenceWidth	clef/xlefwWriter.cpp	/^int lefwLayerRoutingSpacingInfluenceWidth (double  width, double  distance, double  spacing) {$/;"	f
lefwLayerRoutingSpacingInfluenceWidth	lef/lefwWriter.cpp	/^lefwLayerRoutingSpacingInfluenceWidth(double    width,$/;"	f
lefwLayerRoutingSpacingLengthThreshold	clef/xlefwWriter.cpp	/^int lefwLayerRoutingSpacingLengthThreshold (double  lengthValue, double  minWidth, double  maxWidth) {$/;"	f
lefwLayerRoutingSpacingLengthThreshold	lef/lefwWriter.cpp	/^lefwLayerRoutingSpacingLengthThreshold(double   lengthValue,$/;"	f
lefwLayerRoutingSpacingNotchLength	clef/xlefwWriter.cpp	/^int lefwLayerRoutingSpacingNotchLength (double  minNLength) {$/;"	f
lefwLayerRoutingSpacingNotchLength	lef/lefwWriter.cpp	/^lefwLayerRoutingSpacingNotchLength(double minNLength)$/;"	f
lefwLayerRoutingSpacingRange	clef/xlefwWriter.cpp	/^int lefwLayerRoutingSpacingRange (double  minWidth, double  maxWidth) {$/;"	f
lefwLayerRoutingSpacingRange	lef/lefwWriter.cpp	/^lefwLayerRoutingSpacingRange(double leftRange,$/;"	f
lefwLayerRoutingSpacingRangeInfluence	clef/xlefwWriter.cpp	/^int lefwLayerRoutingSpacingRangeInfluence (double  infValue, double  subMinWidth, double  subMaxWidth) {$/;"	f
lefwLayerRoutingSpacingRangeInfluence	lef/lefwWriter.cpp	/^lefwLayerRoutingSpacingRangeInfluence(double    infValue,$/;"	f
lefwLayerRoutingSpacingRangeRange	clef/xlefwWriter.cpp	/^int lefwLayerRoutingSpacingRangeRange (double  minWidth, double  maxWidth) {$/;"	f
lefwLayerRoutingSpacingRangeRange	lef/lefwWriter.cpp	/^lefwLayerRoutingSpacingRangeRange(double    minWidth,$/;"	f
lefwLayerRoutingSpacingRangeUseLengthThreshold	clef/xlefwWriter.cpp	/^int lefwLayerRoutingSpacingRangeUseLengthThreshold () {$/;"	f
lefwLayerRoutingSpacingRangeUseLengthThreshold	lef/lefwWriter.cpp	/^lefwLayerRoutingSpacingRangeUseLengthThreshold()$/;"	f
lefwLayerRoutingSpacingSameNet	clef/xlefwWriter.cpp	/^int lefwLayerRoutingSpacingSameNet (int  PGOnly) {$/;"	f
lefwLayerRoutingSpacingSameNet	lef/lefwWriter.cpp	/^lefwLayerRoutingSpacingSameNet(int PGOnly)$/;"	f
lefwLayerRoutingSpacingtableParallelWidth	clef/xlefwWriter.cpp	/^int lefwLayerRoutingSpacingtableParallelWidth (double  width, int  numSpacing, double*  spacing) {$/;"	f
lefwLayerRoutingSpacingtableParallelWidth	lef/lefwWriter.cpp	/^lefwLayerRoutingSpacingtableParallelWidth(double    width,$/;"	f
lefwLayerRoutingSpacingtableTwoWidthsWidth	clef/xlefwWriter.cpp	/^int lefwLayerRoutingSpacingtableTwoWidthsWidth (double  width, double  runLength, int  numSpacing, double*  spacing) {$/;"	f
lefwLayerRoutingSpacingtableTwoWidthsWidth	lef/lefwWriter.cpp	/^lefwLayerRoutingSpacingtableTwoWidthsWidth(double   width,$/;"	f
lefwLayerRoutingStartSpacingtableInfluence	clef/xlefwWriter.cpp	/^int lefwLayerRoutingStartSpacingtableInfluence () {$/;"	f
lefwLayerRoutingStartSpacingtableInfluence	lef/lefwWriter.cpp	/^lefwLayerRoutingStartSpacingtableInfluence()$/;"	f
lefwLayerRoutingStartSpacingtableParallel	clef/xlefwWriter.cpp	/^int lefwLayerRoutingStartSpacingtableParallel (int  numLength, double*  length) {$/;"	f
lefwLayerRoutingStartSpacingtableParallel	lef/lefwWriter.cpp	/^lefwLayerRoutingStartSpacingtableParallel(int       numLength,$/;"	f
lefwLayerRoutingStartSpacingtableTwoWidths	clef/xlefwWriter.cpp	/^int lefwLayerRoutingStartSpacingtableTwoWidths () {$/;"	f
lefwLayerRoutingStartSpacingtableTwoWidths	lef/lefwWriter.cpp	/^lefwLayerRoutingStartSpacingtableTwoWidths()$/;"	f
lefwLayerRoutingThickness	clef/xlefwWriter.cpp	/^int lefwLayerRoutingThickness (double  thickness) {$/;"	f
lefwLayerRoutingThickness	lef/lefwWriter.cpp	/^lefwLayerRoutingThickness(double thickness)$/;"	f
lefwLayerRoutingWireExtension	clef/xlefwWriter.cpp	/^int lefwLayerRoutingWireExtension (double  wireExtension) {$/;"	f
lefwLayerRoutingWireExtension	lef/lefwWriter.cpp	/^lefwLayerRoutingWireExtension(double wireExtension)$/;"	f
lefwLayerWidth	clef/xlefwWriter.cpp	/^int lefwLayerWidth (double  minWidth) {$/;"	f
lefwLayerWidth	lef/lefwWriter.cpp	/^lefwLayerWidth(double minWidth)$/;"	f
lefwLineItemCounter	lef/lefwWriter.cpp	/^int lefwLineItemCounter = 0; \/\/ number of items on current line$/;"	v
lefwLines	lef/lefwWriter.cpp	/^int lefwLines = 0;    \/\/ number of lines written$/;"	v
lefwMacroCbk	lef/lefwWriterCalls.cpp	74;"	d	file:
lefwMacroCbkType	clef/lefwWriterCalls.h	/^  lefwMacroCbkType = 27,$/;"	e	enum:__anon1
lefwMacroCbkType	lef/lefwWriterCalls.hpp	/^  lefwMacroCbkType,$/;"	e	enum:__anon3
lefwMacroClass	clef/xlefwWriter.cpp	/^int lefwMacroClass (const char*  value1, const char*  value2) {$/;"	f
lefwMacroClass	lef/lefwWriter.cpp	/^lefwMacroClass(const char   *value1,$/;"	f
lefwMacroDensityLayerRect	clef/xlefwWriter.cpp	/^int lefwMacroDensityLayerRect (double  x1, double  y1, double  x2, double  y2, double  densityValue) {$/;"	f
lefwMacroDensityLayerRect	lef/lefwWriter.cpp	/^lefwMacroDensityLayerRect(double    x1,$/;"	f
lefwMacroEEQ	clef/xlefwWriter.cpp	/^int lefwMacroEEQ (const char*  macroName) {$/;"	f
lefwMacroEEQ	lef/lefwWriter.cpp	/^lefwMacroEEQ(const char *macroName)$/;"	f
lefwMacroExceptPGNet	clef/xlefwWriter.cpp	/^int lefwMacroExceptPGNet (const char*  layerName) {$/;"	f
lefwMacroExceptPGNet	lef/lefwWriter.cpp	/^lefwMacroExceptPGNet(const char *layerName)$/;"	f
lefwMacroFixedMask	clef/xlefwWriter.cpp	/^int lefwMacroFixedMask () {$/;"	f
lefwMacroFixedMask	lef/lefwWriter.cpp	/^lefwMacroFixedMask()$/;"	f
lefwMacroForeign	clef/xlefwWriter.cpp	/^int lefwMacroForeign (const char*  name, double  xl, double  yl, int  orient) {$/;"	f
lefwMacroForeign	lef/lefwWriter.cpp	/^lefwMacroForeign(const char *name,$/;"	f
lefwMacroForeignStr	clef/xlefwWriter.cpp	/^int lefwMacroForeignStr (const char*  name, double  xl, double  yl, const char * orient) {$/;"	f
lefwMacroForeignStr	lef/lefwWriter.cpp	/^lefwMacroForeignStr(const char  *name,$/;"	f
lefwMacroLEQ	clef/xlefwWriter.cpp	/^int lefwMacroLEQ (const char*  macroName) {$/;"	f
lefwMacroLEQ	lef/lefwWriter.cpp	/^lefwMacroLEQ(const char *macroName)$/;"	f
lefwMacroObsDesignRuleWidth	clef/xlefwWriter.cpp	/^int lefwMacroObsDesignRuleWidth (const char*  layerName, double  width) {$/;"	f
lefwMacroObsDesignRuleWidth	lef/lefwWriter.cpp	/^lefwMacroObsDesignRuleWidth(const char  *layerName,$/;"	f
lefwMacroObsLayer	clef/xlefwWriter.cpp	/^int lefwMacroObsLayer (const char*  layerName, double  spacing) {$/;"	f
lefwMacroObsLayer	lef/lefwWriter.cpp	/^lefwMacroObsLayer(const char    *layerName,$/;"	f
lefwMacroObsLayerPath	clef/xlefwWriter.cpp	/^int lefwMacroObsLayerPath (int  num_paths, double*  xl, double*  yl, int  numX, int  numY, double  spaceX, double  spaceY, int  mask) {$/;"	f
lefwMacroObsLayerPath	lef/lefwWriter.cpp	/^lefwMacroObsLayerPath(int       num_paths,$/;"	f
lefwMacroObsLayerPolygon	clef/xlefwWriter.cpp	/^int lefwMacroObsLayerPolygon (int  num_polys, double*  xl, double*  yl, int  numX, int  numY, double  spaceX, double  spaceY, int  mask) {$/;"	f
lefwMacroObsLayerPolygon	lef/lefwWriter.cpp	/^lefwMacroObsLayerPolygon(int    num_polys,$/;"	f
lefwMacroObsLayerRect	clef/xlefwWriter.cpp	/^int lefwMacroObsLayerRect (double  xl1, double  yl1, double  xl2, double  yl2, int  numX, int  numY, double  spaceX, double  spaceY, int  mask) {$/;"	f
lefwMacroObsLayerRect	lef/lefwWriter.cpp	/^lefwMacroObsLayerRect(double    xl1,$/;"	f
lefwMacroObsLayerWidth	clef/xlefwWriter.cpp	/^int lefwMacroObsLayerWidth (double  width) {$/;"	f
lefwMacroObsLayerWidth	lef/lefwWriter.cpp	/^lefwMacroObsLayerWidth(double width)$/;"	f
lefwMacroObsVia	clef/xlefwWriter.cpp	/^int lefwMacroObsVia (double  xl, double  yl, const char*  viaName, int  numX, int  numY, double  spaceX, double  spaceY, int  mask) {$/;"	f
lefwMacroObsVia	lef/lefwWriter.cpp	/^lefwMacroObsVia(double      xl,$/;"	f
lefwMacroOrigin	clef/xlefwWriter.cpp	/^int lefwMacroOrigin (double  xl, double  yl) {$/;"	f
lefwMacroOrigin	lef/lefwWriter.cpp	/^lefwMacroOrigin(double  xl,$/;"	f
lefwMacroPinAntennaDiffArea	clef/xlefwWriter.cpp	/^int lefwMacroPinAntennaDiffArea (double  value, const char*  layerName) {$/;"	f
lefwMacroPinAntennaDiffArea	lef/lefwWriter.cpp	/^lefwMacroPinAntennaDiffArea(double      value,$/;"	f
lefwMacroPinAntennaGateArea	clef/xlefwWriter.cpp	/^int lefwMacroPinAntennaGateArea (double  value, const char*  layerName) {$/;"	f
lefwMacroPinAntennaGateArea	lef/lefwWriter.cpp	/^lefwMacroPinAntennaGateArea(double      value,$/;"	f
lefwMacroPinAntennaMaxAreaCar	clef/xlefwWriter.cpp	/^int lefwMacroPinAntennaMaxAreaCar (double  value, const char*  layerName) {$/;"	f
lefwMacroPinAntennaMaxAreaCar	lef/lefwWriter.cpp	/^lefwMacroPinAntennaMaxAreaCar(double        value,$/;"	f
lefwMacroPinAntennaMaxCutCar	clef/xlefwWriter.cpp	/^int lefwMacroPinAntennaMaxCutCar (double  value, const char*  layerName) {$/;"	f
lefwMacroPinAntennaMaxCutCar	lef/lefwWriter.cpp	/^lefwMacroPinAntennaMaxCutCar(double     value,$/;"	f
lefwMacroPinAntennaMaxSideAreaCar	clef/xlefwWriter.cpp	/^int lefwMacroPinAntennaMaxSideAreaCar (double  value, const char*  layerName) {$/;"	f
lefwMacroPinAntennaMaxSideAreaCar	lef/lefwWriter.cpp	/^lefwMacroPinAntennaMaxSideAreaCar(double        value,$/;"	f
lefwMacroPinAntennaMetalArea	clef/xlefwWriter.cpp	/^int lefwMacroPinAntennaMetalArea (double  value, const char*  layerName) {$/;"	f
lefwMacroPinAntennaMetalArea	lef/lefwWriter.cpp	/^lefwMacroPinAntennaMetalArea(double     value,$/;"	f
lefwMacroPinAntennaMetalLength	clef/xlefwWriter.cpp	/^int lefwMacroPinAntennaMetalLength (double  value, const char*  layerName) {$/;"	f
lefwMacroPinAntennaMetalLength	lef/lefwWriter.cpp	/^lefwMacroPinAntennaMetalLength(double       value,$/;"	f
lefwMacroPinAntennaModel	clef/xlefwWriter.cpp	/^int lefwMacroPinAntennaModel (const char*  oxide) {$/;"	f
lefwMacroPinAntennaModel	lef/lefwWriter.cpp	/^lefwMacroPinAntennaModel(const char *oxide)$/;"	f
lefwMacroPinAntennaPartialCutArea	clef/xlefwWriter.cpp	/^int lefwMacroPinAntennaPartialCutArea (double  value, const char*  layerName) {$/;"	f
lefwMacroPinAntennaPartialCutArea	lef/lefwWriter.cpp	/^lefwMacroPinAntennaPartialCutArea(double        value,$/;"	f
lefwMacroPinAntennaPartialMetalArea	clef/xlefwWriter.cpp	/^int lefwMacroPinAntennaPartialMetalArea (double  value, const char*  layerName) {$/;"	f
lefwMacroPinAntennaPartialMetalArea	lef/lefwWriter.cpp	/^lefwMacroPinAntennaPartialMetalArea(double      value,$/;"	f
lefwMacroPinAntennaPartialMetalSideArea	clef/xlefwWriter.cpp	/^int lefwMacroPinAntennaPartialMetalSideArea (double  value, const char*  layerName) {$/;"	f
lefwMacroPinAntennaPartialMetalSideArea	lef/lefwWriter.cpp	/^lefwMacroPinAntennaPartialMetalSideArea(double      value,$/;"	f
lefwMacroPinAntennasize	clef/xlefwWriter.cpp	/^int lefwMacroPinAntennasize (double  value, const char*  layerName) {$/;"	f
lefwMacroPinAntennasize	lef/lefwWriter.cpp	/^lefwMacroPinAntennasize(double      value,$/;"	f
lefwMacroPinCapacitance	clef/xlefwWriter.cpp	/^int lefwMacroPinCapacitance (double  capacitance) {$/;"	f
lefwMacroPinCapacitance	lef/lefwWriter.cpp	/^lefwMacroPinCapacitance(double capacitance)$/;"	f
lefwMacroPinCurrentsource	clef/xlefwWriter.cpp	/^int lefwMacroPinCurrentsource (const char*  name) {$/;"	f
lefwMacroPinCurrentsource	lef/lefwWriter.cpp	/^lefwMacroPinCurrentsource(const char *name)$/;"	f
lefwMacroPinDirection	clef/xlefwWriter.cpp	/^int lefwMacroPinDirection (const char*  direction) {$/;"	f
lefwMacroPinDirection	lef/lefwWriter.cpp	/^lefwMacroPinDirection(const char *direction)$/;"	f
lefwMacroPinFallsatcur	clef/xlefwWriter.cpp	/^int lefwMacroPinFallsatcur (double  current) {$/;"	f
lefwMacroPinFallsatcur	lef/lefwWriter.cpp	/^lefwMacroPinFallsatcur(double current)$/;"	f
lefwMacroPinFallthresh	clef/xlefwWriter.cpp	/^int lefwMacroPinFallthresh (double  capacitance) {$/;"	f
lefwMacroPinFallthresh	lef/lefwWriter.cpp	/^lefwMacroPinFallthresh(double capacitance)$/;"	f
lefwMacroPinFallvoltagethreshold	clef/xlefwWriter.cpp	/^int lefwMacroPinFallvoltagethreshold (double  voltage) {$/;"	f
lefwMacroPinFallvoltagethreshold	lef/lefwWriter.cpp	/^lefwMacroPinFallvoltagethreshold(double voltage)$/;"	f
lefwMacroPinForeign	clef/xlefwWriter.cpp	/^int lefwMacroPinForeign (const char*  name, double  xl, double  yl, int  orient) {$/;"	f
lefwMacroPinForeign	lef/lefwWriter.cpp	/^lefwMacroPinForeign(const char  *name,$/;"	f
lefwMacroPinForeignStr	clef/xlefwWriter.cpp	/^int lefwMacroPinForeignStr (const char*  name, double  xl, double  yl, const char*  orient) {$/;"	f
lefwMacroPinForeignStr	lef/lefwWriter.cpp	/^lefwMacroPinForeignStr(const char   *name,$/;"	f
lefwMacroPinGroundSensitivity	clef/xlefwWriter.cpp	/^int lefwMacroPinGroundSensitivity (const char*  pinName) {$/;"	f
lefwMacroPinGroundSensitivity	lef/lefwWriter.cpp	/^lefwMacroPinGroundSensitivity(const char *pinName)$/;"	f
lefwMacroPinIV_Tables	clef/xlefwWriter.cpp	/^int lefwMacroPinIV_Tables (const char*  lowName, const char*  highName) {$/;"	f
lefwMacroPinIV_Tables	lef/lefwWriter.cpp	/^lefwMacroPinIV_Tables(const char    *lowName,$/;"	f
lefwMacroPinInputnoisemargin	clef/xlefwWriter.cpp	/^int lefwMacroPinInputnoisemargin (int  high, int  low) {$/;"	f
lefwMacroPinInputnoisemargin	lef/lefwWriter.cpp	/^lefwMacroPinInputnoisemargin(int    high,$/;"	f
lefwMacroPinLEQ	clef/xlefwWriter.cpp	/^int lefwMacroPinLEQ (const char*  pinName) {$/;"	f
lefwMacroPinLEQ	lef/lefwWriter.cpp	/^lefwMacroPinLEQ(const char *pinName)$/;"	f
lefwMacroPinLeakage	clef/xlefwWriter.cpp	/^int lefwMacroPinLeakage (double  leakage) {$/;"	f
lefwMacroPinLeakage	lef/lefwWriter.cpp	/^lefwMacroPinLeakage(double leakage)$/;"	f
lefwMacroPinMustjoin	clef/xlefwWriter.cpp	/^int lefwMacroPinMustjoin (const char*  name) {$/;"	f
lefwMacroPinMustjoin	lef/lefwWriter.cpp	/^lefwMacroPinMustjoin(const char *name)$/;"	f
lefwMacroPinNetExpr	clef/xlefwWriter.cpp	/^int lefwMacroPinNetExpr (const char*  name) {$/;"	f
lefwMacroPinNetExpr	lef/lefwWriter.cpp	/^lefwMacroPinNetExpr(const char *name)$/;"	f
lefwMacroPinOutputnoisemargin	clef/xlefwWriter.cpp	/^int lefwMacroPinOutputnoisemargin (int  high, int  low) {$/;"	f
lefwMacroPinOutputnoisemargin	lef/lefwWriter.cpp	/^lefwMacroPinOutputnoisemargin(int   high,$/;"	f
lefwMacroPinOutputresistance	clef/xlefwWriter.cpp	/^int lefwMacroPinOutputresistance (int  high, int  low) {$/;"	f
lefwMacroPinOutputresistance	lef/lefwWriter.cpp	/^lefwMacroPinOutputresistance(int    high,$/;"	f
lefwMacroPinPortDesignRuleWidth	clef/xlefwWriter.cpp	/^int lefwMacroPinPortDesignRuleWidth (const char*  layerName, double  width) {$/;"	f
lefwMacroPinPortDesignRuleWidth	lef/lefwWriter.cpp	/^lefwMacroPinPortDesignRuleWidth(const char  *layerName,$/;"	f
lefwMacroPinPortLayer	clef/xlefwWriter.cpp	/^int lefwMacroPinPortLayer (const char*  layerName, double  spacing) {$/;"	f
lefwMacroPinPortLayer	lef/lefwWriter.cpp	/^lefwMacroPinPortLayer(const char    *layerName,$/;"	f
lefwMacroPinPortLayerPath	clef/xlefwWriter.cpp	/^int lefwMacroPinPortLayerPath (int  num_paths, double*  xl, double*  yl, int  numX, int  numY, double  spaceX, double  spaceY, int     mask) {$/;"	f
lefwMacroPinPortLayerPath	lef/lefwWriter.cpp	/^lefwMacroPinPortLayerPath(int       num_paths,$/;"	f
lefwMacroPinPortLayerPolygon	clef/xlefwWriter.cpp	/^int lefwMacroPinPortLayerPolygon (int  num_polys, double*  xl, double*  yl, int  numX, int  numY, double  spaceX, double  spaceY, int  mask) {$/;"	f
lefwMacroPinPortLayerPolygon	lef/lefwWriter.cpp	/^lefwMacroPinPortLayerPolygon(int    num_polys,$/;"	f
lefwMacroPinPortLayerRect	clef/xlefwWriter.cpp	/^int lefwMacroPinPortLayerRect (double  xl1, double  yl1, double  xl2, double  yl2, int  numX, int  numY, double  spaceX, double  spaceY, int  mask) {$/;"	f
lefwMacroPinPortLayerRect	lef/lefwWriter.cpp	/^lefwMacroPinPortLayerRect(double    xl1,$/;"	f
lefwMacroPinPortLayerWidth	clef/xlefwWriter.cpp	/^int lefwMacroPinPortLayerWidth (double  width) {$/;"	f
lefwMacroPinPortLayerWidth	lef/lefwWriter.cpp	/^lefwMacroPinPortLayerWidth(double width)$/;"	f
lefwMacroPinPortVia	clef/xlefwWriter.cpp	/^int lefwMacroPinPortVia (double  xl, double  yl, const char*  viaName, int  numX, int  numY, double  spaceX, double  spaceY, int  mask) {$/;"	f
lefwMacroPinPortVia	lef/lefwWriter.cpp	/^lefwMacroPinPortVia(double      xl,$/;"	f
lefwMacroPinPower	clef/xlefwWriter.cpp	/^int lefwMacroPinPower (double  power) {$/;"	f
lefwMacroPinPower	lef/lefwWriter.cpp	/^lefwMacroPinPower(double power)$/;"	f
lefwMacroPinPulldownres	clef/xlefwWriter.cpp	/^int lefwMacroPinPulldownres (double  resistance) {$/;"	f
lefwMacroPinPulldownres	lef/lefwWriter.cpp	/^lefwMacroPinPulldownres(double resistance)$/;"	f
lefwMacroPinResistance	clef/xlefwWriter.cpp	/^int lefwMacroPinResistance (double  resistance) {$/;"	f
lefwMacroPinResistance	lef/lefwWriter.cpp	/^lefwMacroPinResistance(double resistance)$/;"	f
lefwMacroPinRisesatcur	clef/xlefwWriter.cpp	/^int lefwMacroPinRisesatcur (double  current) {$/;"	f
lefwMacroPinRisesatcur	lef/lefwWriter.cpp	/^lefwMacroPinRisesatcur(double current)$/;"	f
lefwMacroPinRisethresh	clef/xlefwWriter.cpp	/^int lefwMacroPinRisethresh (double  capacitance) {$/;"	f
lefwMacroPinRisethresh	lef/lefwWriter.cpp	/^lefwMacroPinRisethresh(double capacitance)$/;"	f
lefwMacroPinRisevoltagethreshold	clef/xlefwWriter.cpp	/^int lefwMacroPinRisevoltagethreshold (double  voltage) {$/;"	f
lefwMacroPinRisevoltagethreshold	lef/lefwWriter.cpp	/^lefwMacroPinRisevoltagethreshold(double voltage)$/;"	f
lefwMacroPinShape	clef/xlefwWriter.cpp	/^int lefwMacroPinShape (const char*  name) {$/;"	f
lefwMacroPinShape	lef/lefwWriter.cpp	/^lefwMacroPinShape(const char *name)$/;"	f
lefwMacroPinSupplySensitivity	clef/xlefwWriter.cpp	/^int lefwMacroPinSupplySensitivity (const char*  pinName) {$/;"	f
lefwMacroPinSupplySensitivity	lef/lefwWriter.cpp	/^lefwMacroPinSupplySensitivity(const char *pinName)$/;"	f
lefwMacroPinTaperRule	clef/xlefwWriter.cpp	/^int lefwMacroPinTaperRule (const char*  ruleName) {$/;"	f
lefwMacroPinTaperRule	lef/lefwWriter.cpp	/^lefwMacroPinTaperRule(const char *ruleName)$/;"	f
lefwMacroPinTieoffr	clef/xlefwWriter.cpp	/^int lefwMacroPinTieoffr (double  resistance) {$/;"	f
lefwMacroPinTieoffr	lef/lefwWriter.cpp	/^lefwMacroPinTieoffr(double resistance)$/;"	f
lefwMacroPinUse	clef/xlefwWriter.cpp	/^int lefwMacroPinUse (const char*  use) {$/;"	f
lefwMacroPinUse	lef/lefwWriter.cpp	/^lefwMacroPinUse(const char *use)$/;"	f
lefwMacroPinVHI	clef/xlefwWriter.cpp	/^int lefwMacroPinVHI (double  voltage) {$/;"	f
lefwMacroPinVHI	lef/lefwWriter.cpp	/^lefwMacroPinVHI(double voltage)$/;"	f
lefwMacroPinVLO	clef/xlefwWriter.cpp	/^int lefwMacroPinVLO (double  voltage) {$/;"	f
lefwMacroPinVLO	lef/lefwWriter.cpp	/^lefwMacroPinVLO(double voltage)$/;"	f
lefwMacroPower	clef/xlefwWriter.cpp	/^int lefwMacroPower (double  power) {$/;"	f
lefwMacroPower	lef/lefwWriter.cpp	/^lefwMacroPower(double power)$/;"	f
lefwMacroSite	clef/xlefwWriter.cpp	/^int lefwMacroSite (const char*  siteName) {$/;"	f
lefwMacroSite	lef/lefwWriter.cpp	/^lefwMacroSite(const char *siteName)$/;"	f
lefwMacroSitePattern	clef/xlefwWriter.cpp	/^int lefwMacroSitePattern (const char*  name, double  origX, double  origY, int  orient, int  numX, int  numY, double  spaceX, double  spaceY) {$/;"	f
lefwMacroSitePattern	lef/lefwWriter.cpp	/^lefwMacroSitePattern(const char *name,$/;"	f
lefwMacroSitePatternStr	clef/xlefwWriter.cpp	/^int lefwMacroSitePatternStr (const char*  name, double  origX, double  origY, const char * orient, int  numX, int  numY, double  spaceX, double  spaceY) {$/;"	f
lefwMacroSitePatternStr	lef/lefwWriter.cpp	/^lefwMacroSitePatternStr(const char  *name,$/;"	f
lefwMacroSize	clef/xlefwWriter.cpp	/^int lefwMacroSize (double  width, double  height) {$/;"	f
lefwMacroSize	lef/lefwWriter.cpp	/^lefwMacroSize(double    width,$/;"	f
lefwMacroSource	clef/xlefwWriter.cpp	/^int lefwMacroSource (const char*  value1) {$/;"	f
lefwMacroSource	lef/lefwWriter.cpp	/^lefwMacroSource(const char *value1)$/;"	f
lefwMacroSymmetry	clef/xlefwWriter.cpp	/^int lefwMacroSymmetry (const char*  symmetry) {$/;"	f
lefwMacroSymmetry	lef/lefwWriter.cpp	/^lefwMacroSymmetry(const char *symmetry)$/;"	f
lefwMacroTimingFallcs	clef/xlefwWriter.cpp	/^int lefwMacroTimingFallcs (double  min, double  max) {$/;"	f
lefwMacroTimingFallcs	lef/lefwWriter.cpp	/^lefwMacroTimingFallcs(double    min,$/;"	f
lefwMacroTimingFallrs	clef/xlefwWriter.cpp	/^int lefwMacroTimingFallrs (double  min, double  max) {$/;"	f
lefwMacroTimingFallrs	lef/lefwWriter.cpp	/^lefwMacroTimingFallrs(double    min,$/;"	f
lefwMacroTimingFallsatt1	clef/xlefwWriter.cpp	/^int lefwMacroTimingFallsatt1 (double  min, double  max) {$/;"	f
lefwMacroTimingFallsatt1	lef/lefwWriter.cpp	/^lefwMacroTimingFallsatt1(double min,$/;"	f
lefwMacroTimingFallt0	clef/xlefwWriter.cpp	/^int lefwMacroTimingFallt0 (double  min, double  max) {$/;"	f
lefwMacroTimingFallt0	lef/lefwWriter.cpp	/^lefwMacroTimingFallt0(double    min,$/;"	f
lefwMacroTimingIntrinsic	clef/xlefwWriter.cpp	/^int lefwMacroTimingIntrinsic (const char*  riseFall, double  min, double  max, double  slewT1, double  slewT1Min, double  slewT1Max, double  slewT2, double  slewT2Min, double  slewT2Max, double  slewT3, double  varMin, double  varMax) {$/;"	f
lefwMacroTimingIntrinsic	lef/lefwWriter.cpp	/^lefwMacroTimingIntrinsic(const char *riseFall,$/;"	f
lefwMacroTimingPin	clef/xlefwWriter.cpp	/^int lefwMacroTimingPin (const char*  fromPin, const char*  toPin) {$/;"	f
lefwMacroTimingPin	lef/lefwWriter.cpp	/^lefwMacroTimingPin(const char   *fromPin,$/;"	f
lefwMacroTimingRisecs	clef/xlefwWriter.cpp	/^int lefwMacroTimingRisecs (double  min, double  max) {$/;"	f
lefwMacroTimingRisecs	lef/lefwWriter.cpp	/^lefwMacroTimingRisecs(double    min,$/;"	f
lefwMacroTimingRisers	clef/xlefwWriter.cpp	/^int lefwMacroTimingRisers (double  min, double  max) {$/;"	f
lefwMacroTimingRisers	lef/lefwWriter.cpp	/^lefwMacroTimingRisers(double    min,$/;"	f
lefwMacroTimingRisesatt1	clef/xlefwWriter.cpp	/^int lefwMacroTimingRisesatt1 (double  min, double  max) {$/;"	f
lefwMacroTimingRisesatt1	lef/lefwWriter.cpp	/^lefwMacroTimingRisesatt1(double min,$/;"	f
lefwMacroTimingRiset0	clef/xlefwWriter.cpp	/^int lefwMacroTimingRiset0 (double  min, double  max) {$/;"	f
lefwMacroTimingRiset0	lef/lefwWriter.cpp	/^lefwMacroTimingRiset0(double    min,$/;"	f
lefwMacroTimingUnateness	clef/xlefwWriter.cpp	/^int lefwMacroTimingUnateness (const char*  unateness) {$/;"	f
lefwMacroTimingUnateness	lef/lefwWriter.cpp	/^lefwMacroTimingUnateness(const char *unateness)$/;"	f
lefwManufacturingGrid	clef/xlefwWriter.cpp	/^int lefwManufacturingGrid (double  grid) {$/;"	f
lefwManufacturingGrid	lef/lefwWriter.cpp	/^lefwManufacturingGrid(double grid)$/;"	f
lefwManufacturingGridCbk	lef/lefwWriterCalls.cpp	53;"	d	file:
lefwManufacturingGridCbkType	clef/lefwWriterCalls.h	/^  lefwManufacturingGridCbkType = 6,$/;"	e	enum:__anon1
lefwManufacturingGridCbkType	lef/lefwWriterCalls.hpp	/^  lefwManufacturingGridCbkType,$/;"	e	enum:__anon3
lefwMaximumDensity	clef/xlefwWriter.cpp	/^int lefwMaximumDensity (double  maxDensity) {$/;"	f
lefwMaximumDensity	lef/lefwWriter.cpp	/^lefwMaximumDensity(double maxDensity)$/;"	f
lefwMaxviastack	clef/xlefwWriter.cpp	/^int lefwMaxviastack (int  value, const char*  bottomLayer, const char*  topLayer) {$/;"	f
lefwMaxviastack	lef/lefwWriter.cpp	/^lefwMaxviastack(int         value,$/;"	f
lefwMinFeature	clef/xlefwWriter.cpp	/^int lefwMinFeature (double  x, double  y) {$/;"	f
lefwMinFeature	lef/lefwWriter.cpp	/^lefwMinFeature(double   x,$/;"	f
lefwMinFeatureCbk	lef/lefwWriterCalls.cpp	69;"	d	file:
lefwMinFeatureCbkType	clef/lefwWriterCalls.h	/^  lefwMinFeatureCbkType = 22,$/;"	e	enum:__anon1
lefwMinFeatureCbkType	lef/lefwWriterCalls.hpp	/^  lefwMinFeatureCbkType,$/;"	e	enum:__anon3
lefwMinfeature	clef/xlefwWriter.cpp	/^int lefwMinfeature (double  minFeatureX, double  minFeatureY) {$/;"	f
lefwMinfeature	lef/lefwWriter.cpp	/^lefwMinfeature(double   minFeatureX,$/;"	f
lefwMinimumDensity	clef/xlefwWriter.cpp	/^int lefwMinimumDensity (double  minDensity) {$/;"	f
lefwMinimumDensity	lef/lefwWriter.cpp	/^lefwMinimumDensity(double minDensity)$/;"	f
lefwNewLine	clef/xlefwWriter.cpp	/^int lefwNewLine () {$/;"	f
lefwNewLine	lef/lefwWriter.cpp	/^lefwNewLine()$/;"	f
lefwNoWireExtensionAtPin	clef/xlefwWriter.cpp	/^int lefwNoWireExtensionAtPin (const char*  noWireExt) {$/;"	f
lefwNoWireExtensionAtPin	lef/lefwWriter.cpp	/^lefwNoWireExtensionAtPin(const char *noWireExt)$/;"	f
lefwNoWireExtensionCbk	lef/lefwWriterCalls.cpp	50;"	d	file:
lefwNoWireExtensionCbkType	clef/lefwWriterCalls.h	/^  lefwNoWireExtensionCbkType = 3,$/;"	e	enum:__anon1
lefwNoWireExtensionCbkType	lef/lefwWriterCalls.hpp	/^  lefwNoWireExtensionCbkType,$/;"	e	enum:__anon3
lefwNoiseTableCbk	lef/lefwWriterCalls.cpp	66;"	d	file:
lefwNoiseTableCbkType	clef/lefwWriterCalls.h	/^  lefwNoiseTableCbkType = 19,$/;"	e	enum:__anon1
lefwNoiseTableCbkType	lef/lefwWriterCalls.hpp	/^  lefwNoiseTableCbkType,$/;"	e	enum:__anon3
lefwNonDefaultCbk	lef/lefwWriterCalls.cpp	64;"	d	file:
lefwNonDefaultCbkType	clef/lefwWriterCalls.h	/^  lefwNonDefaultCbkType = 17,$/;"	e	enum:__anon1
lefwNonDefaultCbkType	lef/lefwWriterCalls.hpp	/^  lefwNonDefaultCbkType,$/;"	e	enum:__anon3
lefwNonDefaultRuleEndVia	clef/xlefwWriter.cpp	/^int lefwNonDefaultRuleEndVia (const char*  viaName) {$/;"	f
lefwNonDefaultRuleEndVia	lef/lefwWriter.cpp	/^lefwNonDefaultRuleEndVia(const char *viaName)$/;"	f
lefwNonDefaultRuleHardspacing	clef/xlefwWriter.cpp	/^int lefwNonDefaultRuleHardspacing () {$/;"	f
lefwNonDefaultRuleHardspacing	lef/lefwWriter.cpp	/^lefwNonDefaultRuleHardspacing()$/;"	f
lefwNonDefaultRuleLayer	clef/xlefwWriter.cpp	/^int lefwNonDefaultRuleLayer (const char*  routingLayerName, double  width, double  minSpacing, double  wireExtension, double  resistance, double  capacitance, double  edgeCap) {$/;"	f
lefwNonDefaultRuleLayer	lef/lefwWriter.cpp	/^lefwNonDefaultRuleLayer(const char  *routingLayerName,$/;"	f
lefwNonDefaultRuleMinCuts	clef/xlefwWriter.cpp	/^int lefwNonDefaultRuleMinCuts (const char*  layerName, int  numCuts) {$/;"	f
lefwNonDefaultRuleMinCuts	lef/lefwWriter.cpp	/^lefwNonDefaultRuleMinCuts(const char    *layerName,$/;"	f
lefwNonDefaultRuleStartVia	clef/xlefwWriter.cpp	/^int lefwNonDefaultRuleStartVia (const char*  viaName, const char*  isDefault) {$/;"	f
lefwNonDefaultRuleStartVia	lef/lefwWriter.cpp	/^lefwNonDefaultRuleStartVia(const char   *viaName,$/;"	f
lefwNonDefaultRuleUseVia	clef/xlefwWriter.cpp	/^int lefwNonDefaultRuleUseVia (const char*  viaName) {$/;"	f
lefwNonDefaultRuleUseVia	lef/lefwWriter.cpp	/^lefwNonDefaultRuleUseVia(const char *viaName)$/;"	f
lefwNonDefaultRuleUseViaRule	clef/xlefwWriter.cpp	/^int lefwNonDefaultRuleUseViaRule (const char*  viaRuleName) {$/;"	f
lefwNonDefaultRuleUseViaRule	lef/lefwWriter.cpp	/^lefwNonDefaultRuleUseViaRule(const char *viaRuleName)$/;"	f
lefwNumViaRuleLayers	lef/lefwWriter.cpp	/^int lefwNumViaRuleLayers = 0; \/\/ number of via rule in a via rule$/;"	v
lefwObsoleteNum	lef/lefwWriter.cpp	/^static int lefwObsoleteNum = -1; \/\/ keep track the obsolote syntax for error$/;"	v	file:
lefwOldState	lef/lefwWriter.cpp	/^int lefwOldState = 0;  \/\/ the previous state$/;"	v
lefwOrient	lef/lefwWriter.cpp	/^lefwOrient(int num)$/;"	f
lefwOutputResistance	clef/xlefwWriter.cpp	/^int lefwOutputResistance (int  numResists, double*  resistance) {$/;"	f
lefwOutputResistance	lef/lefwWriter.cpp	/^lefwOutputResistance(int    numResists,$/;"	f
lefwPrintError	clef/xlefwWriter.cpp	/^void lefwPrintError (int  status) {$/;"	f
lefwPrintError	lef/lefwWriter.cpp	/^lefwPrintError(int status)$/;"	f
lefwPrintUnusedCallbacks	clef/xlefwWriterCalls.cpp	/^void lefwPrintUnusedCallbacks (FILE*  f) {$/;"	f
lefwPrintUnusedCallbacks	lef/lefwWriterCalls.cpp	/^lefwPrintUnusedCallbacks(FILE *f)$/;"	f
lefwPropDefCbk	lef/lefwWriterCalls.cpp	60;"	d	file:
lefwPropDefCbkType	clef/lefwWriterCalls.h	/^  lefwPropDefCbkType = 13,$/;"	e	enum:__anon1
lefwPropDefCbkType	lef/lefwWriterCalls.hpp	/^  lefwPropDefCbkType,$/;"	e	enum:__anon3
lefwRealPropDef	clef/xlefwWriter.cpp	/^int lefwRealPropDef (const char*  objType, const char*  propName, double  leftRange, double  rightRange, double  propValue) {$/;"	f
lefwRealPropDef	lef/lefwWriter.cpp	/^lefwRealPropDef(const char  *objType,$/;"	f
lefwRealProperty	clef/xlefwWriter.cpp	/^int lefwRealProperty (const char*  propName, double  propValue) {$/;"	f
lefwRealProperty	lef/lefwWriter.cpp	/^lefwRealProperty(const char *propName,$/;"	f
lefwRegisterUnused	lef/lefwWriterCalls.cpp	/^static int lefwRegisterUnused = 0;$/;"	v	file:
lefwSectionNames	lef/lefwWriterCalls.cpp	/^char lefwSectionNames[MAXCBS] [80] = {$/;"	v
lefwSetAntennaCbk	clef/xlefwWriterCalls.cpp	/^void lefwSetAntennaCbk (::lefwVoidCbkFnType p0) {$/;"	f
lefwSetAntennaCbk	lef/lefwWriterCalls.cpp	/^lefwSetAntennaCbk(lefwVoidCbkFnType f)$/;"	f
lefwSetAntennaInOutDiffAreaCbk	lef/lefwWriterCalls.cpp	/^lefwSetAntennaInOutDiffAreaCbk(lefwVoidCbkFnType f)$/;"	f
lefwSetAntennaInputGateAreaCbk	lef/lefwWriterCalls.cpp	/^lefwSetAntennaInputGateAreaCbk(lefwVoidCbkFnType f)$/;"	f
lefwSetAntennaOutputDiffAreaCbk	lef/lefwWriterCalls.cpp	/^lefwSetAntennaOutputDiffAreaCbk(lefwVoidCbkFnType f)$/;"	f
lefwSetArrayCbk	clef/xlefwWriterCalls.cpp	/^void lefwSetArrayCbk (::lefwVoidCbkFnType p0) {$/;"	f
lefwSetArrayCbk	lef/lefwWriterCalls.cpp	/^lefwSetArrayCbk(lefwVoidCbkFnType f)$/;"	f
lefwSetBusBitCharsCbk	clef/xlefwWriterCalls.cpp	/^void lefwSetBusBitCharsCbk (::lefwVoidCbkFnType p0) {$/;"	f
lefwSetBusBitCharsCbk	lef/lefwWriterCalls.cpp	/^lefwSetBusBitCharsCbk(lefwVoidCbkFnType f)$/;"	f
lefwSetCaseSensitiveCbk	clef/xlefwWriterCalls.cpp	/^void lefwSetCaseSensitiveCbk (::lefwVoidCbkFnType p0) {$/;"	f
lefwSetCaseSensitiveCbk	lef/lefwWriterCalls.cpp	/^lefwSetCaseSensitiveCbk(lefwVoidCbkFnType f)$/;"	f
lefwSetClearanceMeasureCbk	clef/xlefwWriterCalls.cpp	/^void lefwSetClearanceMeasureCbk (::lefwVoidCbkFnType p0) {$/;"	f
lefwSetClearanceMeasureCbk	lef/lefwWriterCalls.cpp	/^lefwSetClearanceMeasureCbk(lefwVoidCbkFnType f)$/;"	f
lefwSetCorrectionTableCbk	clef/xlefwWriterCalls.cpp	/^void lefwSetCorrectionTableCbk (::lefwVoidCbkFnType p0) {$/;"	f
lefwSetCorrectionTableCbk	lef/lefwWriterCalls.cpp	/^lefwSetCorrectionTableCbk(lefwVoidCbkFnType f)$/;"	f
lefwSetCrossTalkCbk	clef/xlefwWriterCalls.cpp	/^void lefwSetCrossTalkCbk (::lefwVoidCbkFnType p0) {$/;"	f
lefwSetCrossTalkCbk	lef/lefwWriterCalls.cpp	/^lefwSetCrossTalkCbk(lefwVoidCbkFnType f)$/;"	f
lefwSetDielectricCbk	clef/xlefwWriterCalls.cpp	/^void lefwSetDielectricCbk (::lefwVoidCbkFnType p0) {$/;"	f
lefwSetDielectricCbk	lef/lefwWriterCalls.cpp	/^lefwSetDielectricCbk(lefwVoidCbkFnType f)$/;"	f
lefwSetDividerCharCbk	clef/xlefwWriterCalls.cpp	/^void lefwSetDividerCharCbk (::lefwVoidCbkFnType p0) {$/;"	f
lefwSetDividerCharCbk	lef/lefwWriterCalls.cpp	/^lefwSetDividerCharCbk(lefwVoidCbkFnType f)$/;"	f
lefwSetEndLibCbk	clef/xlefwWriterCalls.cpp	/^void lefwSetEndLibCbk (::lefwVoidCbkFnType p0) {$/;"	f
lefwSetEndLibCbk	lef/lefwWriterCalls.cpp	/^lefwSetEndLibCbk(lefwVoidCbkFnType f)$/;"	f
lefwSetExtCbk	clef/xlefwWriterCalls.cpp	/^void lefwSetExtCbk (::lefwVoidCbkFnType p0) {$/;"	f
lefwSetExtCbk	lef/lefwWriterCalls.cpp	/^lefwSetExtCbk(lefwVoidCbkFnType f)$/;"	f
lefwSetIRDropCbk	clef/xlefwWriterCalls.cpp	/^void lefwSetIRDropCbk (::lefwVoidCbkFnType p0) {$/;"	f
lefwSetIRDropCbk	lef/lefwWriterCalls.cpp	/^lefwSetIRDropCbk(lefwVoidCbkFnType f)$/;"	f
lefwSetLayerCbk	clef/xlefwWriterCalls.cpp	/^void lefwSetLayerCbk (::lefwVoidCbkFnType p0) {$/;"	f
lefwSetLayerCbk	lef/lefwWriterCalls.cpp	/^lefwSetLayerCbk(lefwVoidCbkFnType f)$/;"	f
lefwSetLogFunction	clef/xlefwWriterCalls.cpp	/^void lefwSetLogFunction (::LEFI_LOG_FUNCTION  p0) {$/;"	f
lefwSetLogFunction	lef/lefwWriterCalls.cpp	/^lefwSetLogFunction(LEFI_LOG_FUNCTION f)$/;"	f
lefwSetMacroCbk	clef/xlefwWriterCalls.cpp	/^void lefwSetMacroCbk (::lefwVoidCbkFnType p0) {$/;"	f
lefwSetMacroCbk	lef/lefwWriterCalls.cpp	/^lefwSetMacroCbk(lefwVoidCbkFnType f)$/;"	f
lefwSetManufacturingGridCbk	clef/xlefwWriterCalls.cpp	/^void lefwSetManufacturingGridCbk (::lefwVoidCbkFnType p0) {$/;"	f
lefwSetManufacturingGridCbk	lef/lefwWriterCalls.cpp	/^lefwSetManufacturingGridCbk(lefwVoidCbkFnType f)$/;"	f
lefwSetMinFeatureCbk	clef/xlefwWriterCalls.cpp	/^void lefwSetMinFeatureCbk (::lefwVoidCbkFnType p0) {$/;"	f
lefwSetMinFeatureCbk	lef/lefwWriterCalls.cpp	/^lefwSetMinFeatureCbk(lefwVoidCbkFnType f)$/;"	f
lefwSetNoWireExtensionCbk	clef/xlefwWriterCalls.cpp	/^void lefwSetNoWireExtensionCbk (::lefwVoidCbkFnType p0) {$/;"	f
lefwSetNoWireExtensionCbk	lef/lefwWriterCalls.cpp	/^lefwSetNoWireExtensionCbk(lefwVoidCbkFnType f)$/;"	f
lefwSetNoiseTableCbk	clef/xlefwWriterCalls.cpp	/^void lefwSetNoiseTableCbk (::lefwVoidCbkFnType p0) {$/;"	f
lefwSetNoiseTableCbk	lef/lefwWriterCalls.cpp	/^lefwSetNoiseTableCbk(lefwVoidCbkFnType f)$/;"	f
lefwSetNonDefaultCbk	clef/xlefwWriterCalls.cpp	/^void lefwSetNonDefaultCbk (::lefwVoidCbkFnType p0) {$/;"	f
lefwSetNonDefaultCbk	lef/lefwWriterCalls.cpp	/^lefwSetNonDefaultCbk(lefwVoidCbkFnType f)$/;"	f
lefwSetPropDefCbk	clef/xlefwWriterCalls.cpp	/^void lefwSetPropDefCbk (::lefwVoidCbkFnType p0) {$/;"	f
lefwSetPropDefCbk	lef/lefwWriterCalls.cpp	/^lefwSetPropDefCbk(lefwVoidCbkFnType f)$/;"	f
lefwSetRegisterUnusedCallbacks	clef/xlefwWriterCalls.cpp	/^void lefwSetRegisterUnusedCallbacks () {$/;"	f
lefwSetRegisterUnusedCallbacks	lef/lefwWriterCalls.cpp	/^lefwSetRegisterUnusedCallbacks()$/;"	f
lefwSetSiteCbk	clef/xlefwWriterCalls.cpp	/^void lefwSetSiteCbk (::lefwVoidCbkFnType p0) {$/;"	f
lefwSetSiteCbk	lef/lefwWriterCalls.cpp	/^lefwSetSiteCbk(lefwVoidCbkFnType f)$/;"	f
lefwSetSpacingCbk	clef/xlefwWriterCalls.cpp	/^void lefwSetSpacingCbk (::lefwVoidCbkFnType p0) {$/;"	f
lefwSetSpacingCbk	lef/lefwWriterCalls.cpp	/^lefwSetSpacingCbk(lefwVoidCbkFnType f)$/;"	f
lefwSetUnitsCbk	clef/xlefwWriterCalls.cpp	/^void lefwSetUnitsCbk (::lefwVoidCbkFnType p0) {$/;"	f
lefwSetUnitsCbk	lef/lefwWriterCalls.cpp	/^lefwSetUnitsCbk(lefwVoidCbkFnType f)$/;"	f
lefwSetUnusedCallbacks	clef/xlefwWriterCalls.cpp	/^void lefwSetUnusedCallbacks (::lefwVoidCbkFnType  func) {$/;"	f
lefwSetUnusedCallbacks	lef/lefwWriterCalls.cpp	/^lefwSetUnusedCallbacks(lefwVoidCbkFnType func)$/;"	f
lefwSetUseMinSpacingCbk	clef/xlefwWriterCalls.cpp	/^void lefwSetUseMinSpacingCbk (::lefwVoidCbkFnType p0) {$/;"	f
lefwSetUseMinSpacingCbk	lef/lefwWriterCalls.cpp	/^lefwSetUseMinSpacingCbk(lefwVoidCbkFnType f)$/;"	f
lefwSetUserData	clef/xlefwWriterCalls.cpp	/^void lefwSetUserData (lefiUserData  p0) {$/;"	f
lefwSetUserData	lef/lefwWriterCalls.cpp	/^lefwSetUserData(lefiUserData d)$/;"	f
lefwSetVersionCbk	clef/xlefwWriterCalls.cpp	/^void lefwSetVersionCbk (::lefwVoidCbkFnType p0) {$/;"	f
lefwSetVersionCbk	lef/lefwWriterCalls.cpp	/^lefwSetVersionCbk(lefwVoidCbkFnType f)$/;"	f
lefwSetViaCbk	clef/xlefwWriterCalls.cpp	/^void lefwSetViaCbk (::lefwVoidCbkFnType p0) {$/;"	f
lefwSetViaCbk	lef/lefwWriterCalls.cpp	/^lefwSetViaCbk(lefwVoidCbkFnType f)$/;"	f
lefwSetViaRuleCbk	clef/xlefwWriterCalls.cpp	/^void lefwSetViaRuleCbk (::lefwVoidCbkFnType p0) {$/;"	f
lefwSetViaRuleCbk	lef/lefwWriterCalls.cpp	/^lefwSetViaRuleCbk(lefwVoidCbkFnType f)$/;"	f
lefwSetWarningLogFunction	clef/xlefwWriterCalls.cpp	/^void lefwSetWarningLogFunction (::LEFI_WARNING_LOG_FUNCTION  p0) {$/;"	f
lefwSetWarningLogFunction	lef/lefwWriterCalls.cpp	/^lefwSetWarningLogFunction(LEFI_WARNING_LOG_FUNCTION f)$/;"	f
lefwSite	clef/xlefwWriter.cpp	/^int lefwSite (const char*  siteName, const char*  classType, const char*  symmetry, double  width, double  height) {$/;"	f
lefwSite	lef/lefwWriter.cpp	/^lefwSite(const char *siteName,$/;"	f
lefwSiteCbk	lef/lefwWriterCalls.cpp	72;"	d	file:
lefwSiteCbkType	clef/lefwWriterCalls.h	/^  lefwSiteCbkType = 25,$/;"	e	enum:__anon1
lefwSiteCbkType	lef/lefwWriterCalls.hpp	/^  lefwSiteCbkType,$/;"	e	enum:__anon3
lefwSiteRowPattern	clef/xlefwWriter.cpp	/^int lefwSiteRowPattern (const char*  siteName, int  orient) {$/;"	f
lefwSiteRowPattern	lef/lefwWriter.cpp	/^lefwSiteRowPattern(const char   *siteName,$/;"	f
lefwSiteRowPatternStr	clef/xlefwWriter.cpp	/^int lefwSiteRowPatternStr (const char*  siteName, const char * orient) {$/;"	f
lefwSiteRowPatternStr	lef/lefwWriter.cpp	/^lefwSiteRowPatternStr(const char    *siteName,$/;"	f
lefwSpacing	clef/xlefwWriter.cpp	/^int lefwSpacing (const char*  layerName1, const char*  layerName2, double  minSpace, const char*  stack) {$/;"	f
lefwSpacing	lef/lefwWriter.cpp	/^lefwSpacing(const char  *layerName1,$/;"	f
lefwSpacingCbk	lef/lefwWriterCalls.cpp	68;"	d	file:
lefwSpacingCbkType	clef/lefwWriterCalls.h	/^  lefwSpacingCbkType = 21,$/;"	e	enum:__anon1
lefwSpacingCbkType	lef/lefwWriterCalls.hpp	/^  lefwSpacingCbkType,$/;"	e	enum:__anon3
lefwSpacingVal	lef/lefwWriter.cpp	/^static int lefwSpacingVal = 0; \/\/ either this or lefwWidthVal$/;"	v	file:
lefwStartArray	clef/xlefwWriter.cpp	/^int lefwStartArray (const char*  arrayName) {$/;"	f
lefwStartArray	lef/lefwWriter.cpp	/^lefwStartArray(const char *arrayName)$/;"	f
lefwStartArrayDefaultCap	clef/xlefwWriter.cpp	/^int lefwStartArrayDefaultCap (int  size) {$/;"	f
lefwStartArrayDefaultCap	lef/lefwWriter.cpp	/^lefwStartArrayDefaultCap(int size)$/;"	f
lefwStartArrayFloorplan	clef/xlefwWriter.cpp	/^int lefwStartArrayFloorplan (const char*  name) {$/;"	f
lefwStartArrayFloorplan	lef/lefwWriter.cpp	/^lefwStartArrayFloorplan(const char *name)$/;"	f
lefwStartBeginext	clef/xlefwWriter.cpp	/^int lefwStartBeginext (const char*  name) {$/;"	f
lefwStartBeginext	lef/lefwWriter.cpp	/^lefwStartBeginext(const char *name)$/;"	f
lefwStartCorrectTable	clef/xlefwWriter.cpp	/^int lefwStartCorrectTable (int  num) {$/;"	f
lefwStartCorrectTable	lef/lefwWriter.cpp	/^lefwStartCorrectTable(int num)$/;"	f
lefwStartIrdrop	clef/xlefwWriter.cpp	/^int lefwStartIrdrop () {$/;"	f
lefwStartIrdrop	lef/lefwWriter.cpp	/^lefwStartIrdrop()$/;"	f
lefwStartLayer	clef/xlefwWriter.cpp	/^int lefwStartLayer (const char*  layerName, const char*  type) {$/;"	f
lefwStartLayer	lef/lefwWriter.cpp	/^lefwStartLayer(const char   *layerName,$/;"	f
lefwStartLayerRouting	clef/xlefwWriter.cpp	/^int lefwStartLayerRouting (const char*  layerName) {$/;"	f
lefwStartLayerRouting	lef/lefwWriter.cpp	/^lefwStartLayerRouting(const char *layerName)$/;"	f
lefwStartMacro	clef/xlefwWriter.cpp	/^int lefwStartMacro (const char*  macroName) {$/;"	f
lefwStartMacro	lef/lefwWriter.cpp	/^lefwStartMacro(const char *macroName)$/;"	f
lefwStartMacroDensity	clef/xlefwWriter.cpp	/^int lefwStartMacroDensity (const char*  layerName) {$/;"	f
lefwStartMacroDensity	lef/lefwWriter.cpp	/^lefwStartMacroDensity(const char *layerName)$/;"	f
lefwStartMacroObs	clef/xlefwWriter.cpp	/^int lefwStartMacroObs () {$/;"	f
lefwStartMacroObs	lef/lefwWriter.cpp	/^lefwStartMacroObs()$/;"	f
lefwStartMacroPin	clef/xlefwWriter.cpp	/^int lefwStartMacroPin (const char*  pinName) {$/;"	f
lefwStartMacroPin	lef/lefwWriter.cpp	/^lefwStartMacroPin(const char *pinName)$/;"	f
lefwStartMacroPinPort	clef/xlefwWriter.cpp	/^int lefwStartMacroPinPort (const char*  classType) {$/;"	f
lefwStartMacroPinPort	lef/lefwWriter.cpp	/^lefwStartMacroPinPort(const char *classType)$/;"	f
lefwStartMacroTiming	clef/xlefwWriter.cpp	/^int lefwStartMacroTiming () {$/;"	f
lefwStartMacroTiming	lef/lefwWriter.cpp	/^lefwStartMacroTiming()$/;"	f
lefwStartNoiseTable	clef/xlefwWriter.cpp	/^int lefwStartNoiseTable (int  num) {$/;"	f
lefwStartNoiseTable	lef/lefwWriter.cpp	/^lefwStartNoiseTable(int num)$/;"	f
lefwStartNonDefaultRule	clef/xlefwWriter.cpp	/^int lefwStartNonDefaultRule (const char*  ruleName) {$/;"	f
lefwStartNonDefaultRule	lef/lefwWriter.cpp	/^lefwStartNonDefaultRule(const char *ruleName)$/;"	f
lefwStartPropDef	clef/xlefwWriter.cpp	/^int lefwStartPropDef () {$/;"	f
lefwStartPropDef	lef/lefwWriter.cpp	/^lefwStartPropDef()$/;"	f
lefwStartSpacing	clef/xlefwWriter.cpp	/^int lefwStartSpacing () {$/;"	f
lefwStartSpacing	lef/lefwWriter.cpp	/^lefwStartSpacing()$/;"	f
lefwStartUnits	clef/xlefwWriter.cpp	/^int lefwStartUnits () {$/;"	f
lefwStartUnits	lef/lefwWriter.cpp	/^lefwStartUnits()$/;"	f
lefwStartVia	clef/xlefwWriter.cpp	/^int lefwStartVia (const char*  viaName, const char*  isDefault) {$/;"	f
lefwStartVia	lef/lefwWriter.cpp	/^lefwStartVia(const char *viaName,$/;"	f
lefwStartViaRule	clef/xlefwWriter.cpp	/^int lefwStartViaRule (const char*  viaRuleName) {$/;"	f
lefwStartViaRule	lef/lefwWriter.cpp	/^lefwStartViaRule(const char *viaRuleName)$/;"	f
lefwStartViaRuleGen	clef/xlefwWriter.cpp	/^int lefwStartViaRuleGen (const char*  viaRuleName) {$/;"	f
lefwStartViaRuleGen	lef/lefwWriter.cpp	/^lefwStartViaRuleGen(const char *viaRuleName)$/;"	f
lefwState	lef/lefwWriter.cpp	/^int lefwState = LEFW_UNINIT;  \/\/ Current state of writer$/;"	v
lefwStateStr	lef/lefwWriter.cpp	/^char lefwStateStr[MAXSYN] [80] = {$/;"	v
lefwStringPropDef	clef/xlefwWriter.cpp	/^int lefwStringPropDef (const char*  objType, const char*  propName, double  leftRange, double  rightRange, const char*  propValue) {$/;"	f
lefwStringPropDef	lef/lefwWriter.cpp	/^lefwStringPropDef(const char    *objType,$/;"	f
lefwStringProperty	clef/xlefwWriter.cpp	/^int lefwStringProperty (const char*  propName, const char*  propValue) {$/;"	f
lefwStringProperty	lef/lefwWriter.cpp	/^lefwStringProperty(const char   *propName,$/;"	f
lefwSynArray	lef/lefwWriter.cpp	/^int lefwSynArray[MAXSYN]; \/\/ array of syntax$/;"	v
lefwTableLen	lef/lefwWriter.cpp	/^int lefwTableLen = 0; \/\/ width or cutarea for the tableEntries$/;"	v
lefwUnits	clef/xlefwWriter.cpp	/^int lefwUnits (double  time, double  capacitance, double  resistance, double  power, double  current, double  voltage, double  database) {$/;"	f
lefwUnits	lef/lefwWriter.cpp	/^lefwUnits(double    time,        \/\/ optional $/;"	f
lefwUnitsCbk	lef/lefwWriterCalls.cpp	56;"	d	file:
lefwUnitsCbkType	clef/lefwWriterCalls.h	/^  lefwUnitsCbkType = 9,$/;"	e	enum:__anon1
lefwUnitsCbkType	lef/lefwWriterCalls.hpp	/^  lefwUnitsCbkType,$/;"	e	enum:__anon3
lefwUnitsFrequency	clef/xlefwWriter.cpp	/^int lefwUnitsFrequency (double  frequency) {$/;"	f
lefwUnitsFrequency	lef/lefwWriter.cpp	/^lefwUnitsFrequency(double frequency)$/;"	f
lefwUniversalNoiseMargin	clef/xlefwWriter.cpp	/^int lefwUniversalNoiseMargin (double  high, double  low) {$/;"	f
lefwUniversalNoiseMargin	lef/lefwWriter.cpp	/^lefwUniversalNoiseMargin(double high,$/;"	f
lefwUnspecifiedCbkType	clef/lefwWriterCalls.h	/^  lefwUnspecifiedCbkType = 0,$/;"	e	enum:__anon1
lefwUnspecifiedCbkType	lef/lefwWriterCalls.hpp	/^  lefwUnspecifiedCbkType = 0,$/;"	e	enum:__anon3
lefwUnusedCount	lef/lefwWriterCalls.cpp	/^static int lefwUnusedCount[100];$/;"	v	file:
lefwUseMinSpacing	clef/xlefwWriter.cpp	/^int lefwUseMinSpacing (const char*  type, const char*  onOff) {$/;"	f
lefwUseMinSpacing	lef/lefwWriter.cpp	/^lefwUseMinSpacing(const char    *type,$/;"	f
lefwUseMinSpacingCbk	lef/lefwWriterCalls.cpp	54;"	d	file:
lefwUseMinSpacingCbkType	clef/lefwWriterCalls.h	/^  lefwUseMinSpacingCbkType = 7,$/;"	e	enum:__anon1
lefwUseMinSpacingCbkType	lef/lefwWriterCalls.hpp	/^  lefwUseMinSpacingCbkType,$/;"	e	enum:__anon3
lefwUserData	lef/lefwWriterCalls.cpp	/^lefiUserData lefwUserData = 0;$/;"	v
lefwValidateMaskNumber	lef/lefwWriter.cpp	/^lefwValidateMaskNumber(int num)$/;"	f
lefwVersion	clef/xlefwWriter.cpp	/^int lefwVersion (int  vers1, int  vers2) {$/;"	f
lefwVersion	lef/lefwWriter.cpp	/^lefwVersion(int vers1,$/;"	f
lefwVersionCbk	lef/lefwWriterCalls.cpp	48;"	d	file:
lefwVersionCbkType	clef/lefwWriterCalls.h	/^  lefwVersionCbkType = 1,$/;"	e	enum:__anon1
lefwVersionCbkType	lef/lefwWriterCalls.hpp	/^  lefwVersionCbkType,$/;"	e	enum:__anon3
lefwViaCbk	lef/lefwWriterCalls.cpp	62;"	d	file:
lefwViaCbkType	clef/lefwWriterCalls.h	/^  lefwViaCbkType = 15,$/;"	e	enum:__anon1
lefwViaCbkType	lef/lefwWriterCalls.hpp	/^  lefwViaCbkType,$/;"	e	enum:__anon3
lefwViaForeign	clef/xlefwWriter.cpp	/^int lefwViaForeign (const char*  foreignName, double  xl, double  yl, int  orient) {$/;"	f
lefwViaForeign	lef/lefwWriter.cpp	/^lefwViaForeign(const char   *foreignName,$/;"	f
lefwViaForeignStr	clef/xlefwWriter.cpp	/^int lefwViaForeignStr (const char*  foreignName, double  xl, double  yl, const char*  orient) {$/;"	f
lefwViaForeignStr	lef/lefwWriter.cpp	/^lefwViaForeignStr(const char    *foreignName,$/;"	f
lefwViaHasVal	lef/lefwWriter.cpp	/^static int lefwViaHasVal = 0; \/\/ keep track only ViaRule or Resistance in a via$/;"	v	file:
lefwViaLayer	clef/xlefwWriter.cpp	/^int lefwViaLayer (const char*  layerName) {$/;"	f
lefwViaLayer	lef/lefwWriter.cpp	/^lefwViaLayer(const char *layerName)$/;"	f
lefwViaLayerPolygon	clef/xlefwWriter.cpp	/^int lefwViaLayerPolygon (int  num_polys, double*  xl, double*  yl, int  mask) {$/;"	f
lefwViaLayerPolygon	lef/lefwWriter.cpp	/^lefwViaLayerPolygon(int     num_polys,$/;"	f
lefwViaLayerRect	clef/xlefwWriter.cpp	/^int lefwViaLayerRect (double  x1l, double  y1l, double  x2l, double  y2l, int  mask) {$/;"	f
lefwViaLayerRect	lef/lefwWriter.cpp	/^lefwViaLayerRect(double x1l,$/;"	f
lefwViaResistance	clef/xlefwWriter.cpp	/^int lefwViaResistance (double  resistance) {$/;"	f
lefwViaResistance	lef/lefwWriter.cpp	/^lefwViaResistance(double resistance)$/;"	f
lefwViaRuleCbk	lef/lefwWriterCalls.cpp	63;"	d	file:
lefwViaRuleCbkType	clef/lefwWriterCalls.h	/^  lefwViaRuleCbkType = 16,$/;"	e	enum:__anon1
lefwViaRuleCbkType	lef/lefwWriterCalls.hpp	/^  lefwViaRuleCbkType,$/;"	e	enum:__anon3
lefwViaRuleGenDefault	clef/xlefwWriter.cpp	/^int lefwViaRuleGenDefault () {$/;"	f
lefwViaRuleGenDefault	lef/lefwWriter.cpp	/^lefwViaRuleGenDefault()$/;"	f
lefwViaRuleGenLayer	clef/xlefwWriter.cpp	/^int lefwViaRuleGenLayer (const char*  layerName, const char*  direction, double  minWidth, double  maxWidth, double  overhang, double  metalOverhang) {$/;"	f
lefwViaRuleGenLayer	lef/lefwWriter.cpp	/^lefwViaRuleGenLayer(const char  *layerName,$/;"	f
lefwViaRuleGenLayer3	clef/xlefwWriter.cpp	/^int lefwViaRuleGenLayer3 (const char*  layerName, double  xl, double  yl, double  xh, double  yh, double  xSpacing, double  ySpacing, double  resistance) {$/;"	f
lefwViaRuleGenLayer3	lef/lefwWriter.cpp	/^lefwViaRuleGenLayer3(const char *layerName,$/;"	f
lefwViaRuleGenLayerEnclosure	clef/xlefwWriter.cpp	/^int lefwViaRuleGenLayerEnclosure (const char*  layerName, double  overhang1, double  overhang2, double  minWidth, double  maxWidth) {$/;"	f
lefwViaRuleGenLayerEnclosure	lef/lefwWriter.cpp	/^lefwViaRuleGenLayerEnclosure(const char *layerName,$/;"	f
lefwViaRuleLayer	clef/xlefwWriter.cpp	/^int lefwViaRuleLayer (const char*  layerName, const char*  direction, double  minWidth, double  maxWidth, double  overhang, double  metalOverhang) {$/;"	f
lefwViaRuleLayer	lef/lefwWriter.cpp	/^lefwViaRuleLayer(const char *layerName,$/;"	f
lefwViaRulePrtLayer	lef/lefwWriter.cpp	/^lefwViaRulePrtLayer(const char  *layerName,$/;"	f
lefwViaRuleVia	clef/xlefwWriter.cpp	/^int lefwViaRuleVia (const char*  viaName) {$/;"	f
lefwViaRuleVia	lef/lefwWriter.cpp	/^lefwViaRuleVia(const char *viaName)$/;"	f
lefwViaTopofstackonly	clef/xlefwWriter.cpp	/^int lefwViaTopofstackonly () {$/;"	f
lefwViaTopofstackonly	lef/lefwWriter.cpp	/^lefwViaTopofstackonly()$/;"	f
lefwViaViarule	clef/xlefwWriter.cpp	/^int lefwViaViarule (const char*  viaRuleName, double  xCutSize, double  yCutSize, const char*  botMetalLayer, const char*  cutLayer, const char*  topMetalLayer, double  xCutSpacing, double  yCutSpacing, double  xBotEnc, double  yBotEnc, double  xTopEnc, double  yTopEnc) {$/;"	f
lefwViaViarule	lef/lefwWriter.cpp	/^lefwViaViarule(const char   *viaRuleName,$/;"	f
lefwViaViaruleOffset	clef/xlefwWriter.cpp	/^int lefwViaViaruleOffset (double  xBotOffset, double  yBotOffset, double  xTopOffset, double  yTopOffset) {$/;"	f
lefwViaViaruleOffset	lef/lefwWriter.cpp	/^lefwViaViaruleOffset(double xBotOffset,$/;"	f
lefwViaViaruleOrigin	clef/xlefwWriter.cpp	/^int lefwViaViaruleOrigin (double  xOffset, double  yOffset) {$/;"	f
lefwViaViaruleOrigin	lef/lefwWriter.cpp	/^lefwViaViaruleOrigin(double xOffset,$/;"	f
lefwViaViarulePattern	clef/xlefwWriter.cpp	/^int lefwViaViarulePattern (const char*  cutPattern) {$/;"	f
lefwViaViarulePattern	lef/lefwWriter.cpp	/^lefwViaViarulePattern(const char *cutPattern)$/;"	f
lefwViaViaruleRowCol	clef/xlefwWriter.cpp	/^int lefwViaViaruleRowCol (int  numCutRows, int  numCutCols) {$/;"	f
lefwViaViaruleRowCol	lef/lefwWriter.cpp	/^lefwViaViaruleRowCol(int    numCutRows,$/;"	f
lefwVictims	clef/xlefwWriter.cpp	/^int lefwVictims (int  length, int  numNoises, double*  noises) {$/;"	f
lefwVictims	lef/lefwWriter.cpp	/^lefwVictims(int     length,$/;"	f
lefwVoidCbkFnType	clef/lefwWriterCalls.h	/^typedef int (*lefwVoidCbkFnType) ( lefwCallbackType_e, lefiUserData );$/;"	t
lefwVoidCbkFnType	lef/lefwWriterCalls.hpp	/^typedef int (*lefwVoidCbkFnType) ( lefwCallbackType_e, lefiUserData );$/;"	t
lefwWarningLogFunction	lef/lefwWriter.cpp	/^LEFI_WARNING_LOG_FUNCTION lefwWarningLogFunction;$/;"	v
lefwWidthVal	lef/lefwWriter.cpp	/^static int lefwWidthVal = 0;   \/\/ is allowed$/;"	v	file:
lefwWrite	clef/xlefwWriterCalls.cpp	/^int lefwWrite (FILE * file, const char * fileName, lefiUserData  userData) {$/;"	f
lefwWrite	lef/lefwWriterCalls.cpp	/^lefwWrite(FILE          *f,$/;"	f
lefwWriteEncrypt	lef/lefwWriter.cpp	/^static int lefwWriteEncrypt = 0; \/\/ for writing out encrypted file, default is 0$/;"	v	file:
leh_h	lef/lex.h	31;"	d
length	lef/lefiCrossTalk.cpp	/^lefiCorrectionVictim::length()$/;"	f	class:lefiCorrectionVictim
length	lef/lefiCrossTalk.cpp	/^lefiNoiseVictim::length() const$/;"	f	class:lefiNoiseVictim
length	lef/lefiLayer.cpp	/^lefiParallel::length(int index) const$/;"	f	class:lefiParallel
lengthThresholdRangeMax_	lef/lefiLayer.hpp	/^  double* lengthThresholdRangeMax_;         \/\/ pcr 408930$/;"	m	class:lefiLayer
lengthThresholdRangeMin_	lef/lefiLayer.hpp	/^  double* lengthThresholdRangeMin_;         \/\/ pcr 408930$/;"	m	class:lefiLayer
lengthThreshold_	lef/lefiLayer.hpp	/^  double* lengthThreshold_;                 \/\/ pcr 408930$/;"	m	class:lefiLayer
length_	lef/lefiCrossTalk.hpp	/^  double length_;$/;"	m	class:lefiCorrectionVictim
length_	lef/lefiCrossTalk.hpp	/^  double length_;$/;"	m	class:lefiNoiseVictim
length_	lef/lefiLayer.hpp	/^  double* length_;$/;"	m	class:lefiParallel
lineNumberCB	lefrw/lefrw.cpp	/^void lineNumberCB(int lineNo) {$/;"	f
list_of_from_strings	lef/lef.y	/^list_of_from_strings:$/;"	l
list_of_table_axis_dnumbers	lef/lef.y	/^list_of_table_axis_dnumbers:$/;"	l
list_of_table_entries	lef/lef.y	/^list_of_table_entries:$/;"	l
list_of_to_strings	lef/lef.y	/^list_of_to_strings:$/;"	l
ll	lef/lefiDefs.hpp	/^    lefPOINT ll,ur;$/;"	m	struct:rect
low	clef/lefiTypedefs.h	/^  double low;$/;"	m	struct:lefiNoiseMargin
low	lef/lefiCrossTalk.hpp	/^  double low;$/;"	m	struct:lefiNoiseMargin
lowTableSize_	lef/lefiMacro.hpp	/^  int lowTableSize_;$/;"	m	class:lefiPin
lowTable_	lef/lefiMacro.hpp	/^  char* lowTable_;$/;"	m	class:lefiPin
macro	lef/lef.y	/^macro: start_macro macro_options$/;"	l
macroBeginCB	lefrw/lefrw.cpp	/^int macroBeginCB(lefrCallbackType_e c, const char* macroName, lefiUserData) {$/;"	f
macroCB	lefdiff/diffLefRW.cpp	/^int macroCB(lefrCallbackType_e c, lefiMacro* macro, lefiUserData ud) {$/;"	f
macroCB	lefrw/lefrw.cpp	/^int macroCB(lefrCallbackType_e c, lefiMacro* macro, lefiUserData) {$/;"	f
macroCB	lefwrite/lefwriteCbs.cpp	/^int macroCB(lefwCallbackType_e c, lefiUserData ud) {$/;"	f
macroClass	lef/lefiMacro.cpp	/^lefiMacro::macroClass() const$/;"	f	class:lefiMacro
macroClassTypeCB	lefrw/lefrw.cpp	/^int macroClassTypeCB(lefrCallbackType_e c, const char* macroClassType,$/;"	f
macroClass_	lef/lefiMacro.hpp	/^  char macroClass_[32];$/;"	m	class:lefiMacro
macroEndCB	lefrw/lefrw.cpp	/^int macroEndCB(lefrCallbackType_e c, const char* macroName, lefiUserData) {$/;"	f
macroFixedMaskCB	lefrw/lefrw.cpp	/^int macroFixedMaskCB(lefrCallbackType_e c, int, $/;"	f
macroName	lef/lefrData.hpp	/^    char*  macroName; $/;"	m	class:lefrData
macroNum	lef/lefrData.hpp	/^    lefiNum  macroNum; $/;"	m	class:lefrData
macroOriginCB	lefrw/lefrw.cpp	/^int macroOriginCB(lefrCallbackType_e c, lefiNum,$/;"	f
macroSizeCB	lefrw/lefrw.cpp	/^int macroSizeCB(lefrCallbackType_e c, lefiNum,$/;"	f
macroWarnings	lef/lefrData.hpp	/^    int  macroWarnings; $/;"	m	class:lefrData
macro_class	lef/lef.y	/^macro_class: K_CLASS class_type ';'$/;"	l
macro_clocktype	lef/lef.y	/^macro_clocktype: K_CLOCKTYPE { lefData->lefDumbMode = 1; lefData->lefNoNum = 1; } T_STRING ';'$/;"	l
macro_density	lef/lef.y	/^macro_density: K_DENSITY density_layer density_layers K_END$/;"	l
macro_eeq	lef/lef.y	/^macro_eeq: K_EEQ { lefData->lefDumbMode = 1; lefData->lefNoNum = 1; } T_STRING ';'$/;"	l
macro_fixedMask	lef/lef.y	/^macro_fixedMask:$/;"	l
macro_foreign	lef/lef.y	/^macro_foreign:$/;"	l
macro_generate	lef/lef.y	/^macro_generate: K_GENERATE T_STRING T_STRING ';'$/;"	l
macro_generator	lef/lef.y	/^macro_generator: K_GENERATOR T_STRING ';'$/;"	l
macro_leq	lef/lef.y	/^macro_leq: K_LEQ { lefData->lefDumbMode = 1; lefData->lefNoNum = 1; } T_STRING ';'$/;"	l
macro_name_value_pair	lef/lef.y	/^macro_name_value_pair:$/;"	l
macro_obs	lef/lef.y	/^macro_obs: start_macro_obs geometries K_END$/;"	l
macro_option	lef/lef.y	/^macro_option:$/;"	l
macro_options	lef/lef.y	/^macro_options:$/;"	l
macro_origin	lef/lef.y	/^macro_origin: K_ORIGIN pt ';'$/;"	l
macro_pin	lef/lef.y	/^macro_pin: start_macro_pin macro_pin_options end_macro_pin$/;"	l
macro_pin_option	lef/lef.y	/^macro_pin_option:$/;"	l
macro_pin_options	lef/lef.y	/^macro_pin_options:$/;"	l
macro_pin_use	lef/lef.y	/^macro_pin_use:$/;"	l
macro_port_class_option	lef/lef.y	/^macro_port_class_option: \/\/ empty $/;"	l
macro_power	lef/lef.y	/^macro_power: K_POWER int_number ';'$/;"	l
macro_prop_list	lef/lef.y	/^macro_prop_list:$/;"	l
macro_scan_use	lef/lef.y	/^macro_scan_use:$/;"	l
macro_site	lef/lef.y	/^macro_site:$/;"	l
macro_site_word	lef/lef.y	/^macro_site_word: K_SITE$/;"	l
macro_size	lef/lef.y	/^macro_size: K_SIZE int_number K_BY int_number ';'$/;"	l
macro_source	lef/lef.y	/^macro_source:$/;"	l
macro_symmetries	lef/lef.y	/^macro_symmetries:$/;"	l
macro_symmetry	lef/lef.y	/^macro_symmetry:$/;"	l
macro_symmetry_statement	lef/lef.y	/^macro_symmetry_statement: K_SYMMETRY macro_symmetries ';'$/;"	l
main	lefdiff/differLef.cpp	/^int main(int argc, char** argv) {$/;"	f
main	lefrw/lefrw.cpp	/^main(int argc, char** argv) {$/;"	f
main	lefwrite/lefwrite.cpp	/^int main(int argc, char** argv) {$/;"	f
main	lefwrite/lefwriteCbs.cpp	/^main(int argc, char** argv) {$/;"	f
mallocCB	lefrw/lefrw.cpp	/^void* mallocCB(int size) {$/;"	f
manufacturing	lef/lef.y	/^manufacturing: K_MANUFACTURINGGRID int_number ';'$/;"	l
manufacturingCB	lefdiff/diffLefRW.cpp	/^int manufacturingCB(lefrCallbackType_e c, double num, lefiUserData ud) {$/;"	f
manufacturingCB	lefrw/lefrw.cpp	/^int manufacturingCB(lefrCallbackType_e c, double num, lefiUserData) {$/;"	f
mask	lef/lefiLayer.cpp	/^lefiLayer::mask() const$/;"	f	class:lefiLayer
maskColor	lef/lef.y	/^maskColor:$/;"	l
maskNumber_	lef/lefiLayer.hpp	/^  int maskNumber_;                     \/\/ 5.8$/;"	m	class:lefiLayer
maxAdjacentSlotSpacing	lef/lefiLayer.cpp	/^lefiLayer::maxAdjacentSlotSpacing() const$/;"	f	class:lefiLayer
maxAdjacentSlotSpacing_	lef/lefiLayer.hpp	/^  double maxAdjacentSlotSpacing_; $/;"	m	class:lefiLayer
maxArea_	lef/lefiLayer.hpp	/^  double  maxArea_;$/;"	m	class:lefiLayer
maxCoaxialSlotSpacing	lef/lefiLayer.cpp	/^lefiLayer::maxCoaxialSlotSpacing() const$/;"	f	class:lefiLayer
maxCoaxialSlotSpacing_	lef/lefiLayer.hpp	/^  double maxCoaxialSlotSpacing_; $/;"	m	class:lefiLayer
maxEdgeSlotSpacing	lef/lefiLayer.cpp	/^lefiLayer::maxEdgeSlotSpacing() const$/;"	f	class:lefiLayer
maxEdgeSlotSpacing_	lef/lefiLayer.hpp	/^  double maxEdgeSlotSpacing_; $/;"	m	class:lefiLayer
maxFloatingArea	lef/lefiLayer.cpp	/^lefiLayer::maxFloatingArea() const$/;"	f	class:lefiLayer
maxStackVia	lef/lefiMisc.cpp	/^lefiMaxStackVia::maxStackVia() const$/;"	f	class:lefiMaxStackVia
maxStackViaBottomLayer	lef/lefiMisc.cpp	/^lefiMaxStackVia::maxStackViaBottomLayer() const$/;"	f	class:lefiMaxStackVia
maxStackViaCB	lefdiff/diffLefRW.cpp	/^int maxStackViaCB(lefrCallbackType_e c, lefiMaxStackVia* maxStack,$/;"	f
maxStackViaCB	lefrw/lefrw.cpp	/^int maxStackViaCB(lefrCallbackType_e c, lefiMaxStackVia* maxStack,$/;"	f
maxStackViaTopLayer	lef/lefiMisc.cpp	/^lefiMaxStackVia::maxStackViaTopLayer() const$/;"	f	class:lefiMaxStackVia
maxStackViaWarnings	lef/lefrData.hpp	/^    int  maxStackViaWarnings; $/;"	m	class:lefrData
maxdelay	lef/lefiMacro.cpp	/^lefiPin::maxdelay() const$/;"	f	class:lefiPin
maxdelay_	lef/lefiMacro.hpp	/^  double maxdelay_;$/;"	m	class:lefiPin
maximumDensity	lef/lefiLayer.cpp	/^lefiLayer::maximumDensity() const$/;"	f	class:lefiLayer
maximumDensity_	lef/lefiLayer.hpp	/^  double maximumDensity_; $/;"	m	class:lefiLayer
maxload	lef/lefiMacro.cpp	/^lefiPin::maxload() const$/;"	f	class:lefiPin
maxload_	lef/lefiMacro.hpp	/^  double maxload_;$/;"	m	class:lefiPin
maxstack_via	lef/lef.y	/^maxstack_via: K_MAXVIASTACK int_number ';'$/;"	l
maxwidth	lef/lefiLayer.cpp	/^lefiLayer::maxwidth() const$/;"	f	class:lefiLayer
maxwidth_	lef/lefiLayer.hpp	/^  double  maxwidth_;                          \/\/ 5.5$/;"	m	class:lefiLayer
metalOverhang	lef/lefiViaRule.cpp	/^lefiViaRuleLayer::metalOverhang() const$/;"	f	class:lefiViaRuleLayer
metalOverhang_	lef/lefiViaRule.hpp	/^  double metalOverhang_;$/;"	m	class:lefiViaRuleLayer
minFeatureCB	lefdiff/diffLefRW.cpp	/^int minFeatureCB(lefrCallbackType_e c, lefiMinFeature* min, lefiUserData ud) {$/;"	f
minFeatureCB	lefrw/lefrw.cpp	/^int minFeatureCB(lefrCallbackType_e c, lefiMinFeature* min, lefiUserData) {$/;"	f
minFeatureCB	lefwrite/lefwriteCbs.cpp	/^int minFeatureCB(lefwCallbackType_e c, lefiUserData ud) {$/;"	f
minFeatureWarnings	lef/lefrData.hpp	/^    int  minFeatureWarnings; $/;"	m	class:lefrData
minLength_	lef/lefiLayer.hpp	/^  double* minLength_;$/;"	m	class:lefiLayer
minNotchSpacing_	lef/lefiLayer.hpp	/^  double* minNotchSpacing_;$/;"	m	class:lefiLayer
minPins_	lef/lefiArray.hpp	/^  int* minPins_;$/;"	m	class:lefiArray
minSizeLength	lef/lefiLayer.cpp	/^lefiLayer::minSizeLength(int index) const$/;"	f	class:lefiLayer
minSizeLength_	lef/lefiLayer.hpp	/^  double* minSizeLength_;$/;"	m	class:lefiLayer
minSizeWidth	lef/lefiLayer.cpp	/^lefiLayer::minSizeWidth(int index) const$/;"	f	class:lefiLayer
minSizeWidth_	lef/lefiLayer.hpp	/^  double* minSizeWidth_;$/;"	m	class:lefiLayer
mincuts	lef/lef.y	/^mincuts: K_MINCUTS T_STRING int_number ';'$/;"	l
minenclosedarea	lef/lefiLayer.cpp	/^lefiLayer::minenclosedarea(int index) const$/;"	f	class:lefiLayer
minenclosedareaAllocated_	lef/lefiLayer.hpp	/^  int     minenclosedareaAllocated_;          \/\/ 5.5$/;"	m	class:lefiLayer
minenclosedareaWidth	lef/lefiLayer.cpp	/^lefiLayer::minenclosedareaWidth(int index) const$/;"	f	class:lefiLayer
minenclosedareaWidth_	lef/lefiLayer.hpp	/^  double* minenclosedareaWidth_;              \/\/ 5.5$/;"	m	class:lefiLayer
minenclosedarea_	lef/lefiLayer.hpp	/^  double* minenclosedarea_;                   \/\/ 5.5$/;"	m	class:lefiLayer
minfeature	lef/lef.y	/^minfeature: K_MINFEATURE int_number int_number ';'$/;"	l
minimumDensity	lef/lefiLayer.cpp	/^lefiLayer::minimumDensity() const$/;"	f	class:lefiLayer
minimumDensity_	lef/lefiLayer.hpp	/^  double minimumDensity_; $/;"	m	class:lefiLayer
minimumcut	lef/lefiLayer.cpp	/^lefiLayer::minimumcut(int index) const$/;"	f	class:lefiLayer
minimumcutAllocated_	lef/lefiLayer.hpp	/^  int     minimumcutAllocated_;$/;"	m	class:lefiLayer
minimumcutConnection	lef/lefiLayer.cpp	/^lefiLayer::minimumcutConnection(int index) const$/;"	f	class:lefiLayer
minimumcutConnection_	lef/lefiLayer.hpp	/^  char**  minimumcutConnection_;$/;"	m	class:lefiLayer
minimumcutDistance	lef/lefiLayer.cpp	/^lefiLayer::minimumcutDistance(int index) const$/;"	f	class:lefiLayer
minimumcutDistance_	lef/lefiLayer.hpp	/^  double* minimumcutDistance_;$/;"	m	class:lefiLayer
minimumcutLength	lef/lefiLayer.cpp	/^lefiLayer::minimumcutLength(int index) const$/;"	f	class:lefiLayer
minimumcutLength_	lef/lefiLayer.hpp	/^  double* minimumcutLength_;$/;"	m	class:lefiLayer
minimumcutWidth	lef/lefiLayer.cpp	/^lefiLayer::minimumcutWidth(int index) const$/;"	f	class:lefiLayer
minimumcutWidth_	lef/lefiLayer.hpp	/^  double* minimumcutWidth_;                  \/\/ pcr 409334$/;"	m	class:lefiLayer
minimumcutWithin	lef/lefiLayer.cpp	/^lefiLayer::minimumcutWithin(int index) const$/;"	f	class:lefiLayer
minimumcutWithin_	lef/lefiLayer.hpp	/^  double* minimumcutWithin_;                 \/\/ 5.7$/;"	m	class:lefiLayer
minimumcut_	lef/lefiLayer.hpp	/^  int*    minimumcut_;                       \/\/ pcr 409334$/;"	m	class:lefiLayer
minstep	lef/lefiLayer.cpp	/^lefiLayer::minstep(int index) const$/;"	f	class:lefiLayer
minstepLengthsum	lef/lefiLayer.cpp	/^lefiLayer::minstepLengthsum(int index) const$/;"	f	class:lefiLayer
minstepLengthsum_	lef/lefiLayer.hpp	/^  double* minstepLengthsum_; $/;"	m	class:lefiLayer
minstepMaxEdges_	lef/lefiLayer.hpp	/^  int*    minstepMaxEdges_;                   \/\/ 5.7$/;"	m	class:lefiLayer
minstepMaxedges	lef/lefiLayer.cpp	/^lefiLayer::minstepMaxedges(int index) const$/;"	f	class:lefiLayer
minstepMinAdjLength	lef/lefiLayer.cpp	/^lefiLayer::minstepMinAdjLength(int index) const$/;"	f	class:lefiLayer
minstepMinAdjLength_	lef/lefiLayer.hpp	/^  double* minstepMinAdjLength_;               \/\/ 5.7$/;"	m	class:lefiLayer
minstepMinBetLength	lef/lefiLayer.cpp	/^lefiLayer::minstepMinBetLength(int index) const$/;"	f	class:lefiLayer
minstepMinBetLength_	lef/lefiLayer.hpp	/^  double* minstepMinBetLength_;               \/\/ 5.7$/;"	m	class:lefiLayer
minstepType	lef/lefiLayer.cpp	/^lefiLayer::minstepType(int index) const$/;"	f	class:lefiLayer
minstepType_	lef/lefiLayer.hpp	/^  char**  minstepType_;                       \/\/ INSIDECORNER|OUTSIDECORNER|STEP$/;"	m	class:lefiLayer
minstepXSameCorners_	lef/lefiLayer.hpp	/^  int*    minstepXSameCorners_;               \/\/ 5.7$/;"	m	class:lefiLayer
minstep_	lef/lefiLayer.hpp	/^  double* minstep_;                           \/\/ 5.6, switch to multiple$/;"	m	class:lefiLayer
minwidth	lef/lefiLayer.cpp	/^lefiLayer::minwidth() const$/;"	f	class:lefiLayer
minwidth_	lef/lefiLayer.hpp	/^  double  minwidth_;                          \/\/ 5.5$/;"	m	class:lefiLayer
msgCnt	lef/lefrData.hpp	/^    int  msgCnt; $/;"	m	class:lefrData
msgLimit	lef/lefrData.hpp	/^    int msgLimit[2][MAX_LEF_MSGS];$/;"	m	class:lefrData
msg_statement	lef/lef.y	/^msg_statement:$/;"	l
msgsDisableMap	lef/lefrSettings.hpp	/^    MsgsDisableMap msgsDisableMap;$/;"	m	class:lefrSettings
mustjoin	lef/lefiMacro.cpp	/^lefiPin::mustjoin() const$/;"	f	class:lefiPin
mustjoinSize_	lef/lefiMacro.hpp	/^  int    mustjoinSize_;$/;"	m	class:lefiPin
mustjoin_	lef/lefiMacro.hpp	/^  char*  mustjoin_;$/;"	m	class:lefiPin
name	clef/lefiTypedefs.h	/^  char*  name;$/;"	m	struct:lefiGeomVia
name	clef/lefiTypedefs.h	/^  char*  name;$/;"	m	struct:lefiGeomViaIter
name	lef/lefiArray.cpp	/^lefiArray::name() const$/;"	f	class:lefiArray
name	lef/lefiArray.cpp	/^lefiArrayFloorPlan::name() const$/;"	f	class:lefiArrayFloorPlan
name	lef/lefiLayer.cpp	/^lefiLayer::name() const$/;"	f	class:lefiLayer
name	lef/lefiMacro.cpp	/^lefiMacro::name() const$/;"	f	class:lefiMacro
name	lef/lefiMacro.cpp	/^lefiPin::name() const$/;"	f	class:lefiPin
name	lef/lefiMisc.cpp	/^lefiGcellPattern::name() const$/;"	f	class:lefiGcellPattern
name	lef/lefiMisc.cpp	/^lefiIRDrop::name() const$/;"	f	class:lefiIRDrop
name	lef/lefiMisc.cpp	/^lefiSite::name() const$/;"	f	class:lefiSite
name	lef/lefiMisc.cpp	/^lefiSitePattern::name() const$/;"	f	class:lefiSitePattern
name	lef/lefiMisc.cpp	/^lefiTrackPattern::name() const$/;"	f	class:lefiTrackPattern
name	lef/lefiMisc.cpp	/^lefiUseMinSpacing::name() const$/;"	f	class:lefiUseMinSpacing
name	lef/lefiMisc.hpp	/^  char*  name;$/;"	m	struct:lefiGeomVia
name	lef/lefiMisc.hpp	/^  char*  name;$/;"	m	struct:lefiGeomViaIter
name	lef/lefiNonDefault.cpp	/^lefiNonDefault::name() const$/;"	f	class:lefiNonDefault
name	lef/lefiVia.cpp	/^lefiVia::name() const$/;"	f	class:lefiVia
name	lef/lefiVia.cpp	/^lefiViaLayer::name()$/;"	f	class:lefiViaLayer
name	lef/lefiViaRule.cpp	/^lefiViaRule::name() const$/;"	f	class:lefiViaRule
name	lef/lefiViaRule.cpp	/^lefiViaRuleLayer::name() const$/;"	f	class:lefiViaRuleLayer
name1	lef/lefiMisc.cpp	/^lefiSpacing::name1() const$/;"	f	class:lefiSpacing
name1Size_	lef/lefiMisc.hpp	/^  int    name1Size_;$/;"	m	class:lefiSpacing
name1_	lef/lefiMisc.hpp	/^  char*  name1_;$/;"	m	class:lefiSpacing
name2	lef/lefiMisc.cpp	/^lefiSpacing::name2() const$/;"	f	class:lefiSpacing
name2Size_	lef/lefiMisc.hpp	/^  int    name2Size_;$/;"	m	class:lefiSpacing
name2_	lef/lefiMisc.hpp	/^  char*  name2_;$/;"	m	class:lefiSpacing
nameSize_	lef/lefiArray.hpp	/^  int nameSize_;$/;"	m	class:lefiArray
nameSize_	lef/lefiLayer.hpp	/^  int nameSize_;$/;"	m	class:lefiLayer
nameSize_	lef/lefiMacro.hpp	/^  int   nameSize_;$/;"	m	class:lefiPin
nameSize_	lef/lefiMacro.hpp	/^  int nameSize_;$/;"	m	class:lefiMacro
nameSize_	lef/lefiMisc.hpp	/^  int     nameSize_;$/;"	m	class:lefiIRDrop
nameSize_	lef/lefiMisc.hpp	/^  int    nameSize_;$/;"	m	class:lefiGcellPattern
nameSize_	lef/lefiMisc.hpp	/^  int    nameSize_;$/;"	m	class:lefiSite
nameSize_	lef/lefiMisc.hpp	/^  int    nameSize_;$/;"	m	class:lefiSitePattern
nameSize_	lef/lefiMisc.hpp	/^  int    nameSize_;$/;"	m	class:lefiTrackPattern
nameSize_	lef/lefiNonDefault.hpp	/^  int nameSize_;$/;"	m	class:lefiNonDefault
nameSize_	lef/lefiProp.hpp	/^  int nameSize_;        \/\/ allocated size of name.$/;"	m	class:lefiProp
nameSize_	lef/lefiVia.hpp	/^  int nameSize_;$/;"	m	class:lefiVia
nameSize_	lef/lefiViaRule.hpp	/^  int nameSize_;$/;"	m	class:lefiViaRule
name_	lef/lefiArray.hpp	/^  char* name_;$/;"	m	class:lefiArray
name_	lef/lefiArray.hpp	/^  char* name_;$/;"	m	class:lefiArrayFloorPlan
name_	lef/lefiLayer.hpp	/^  char* name_;$/;"	m	class:lefiLayer
name_	lef/lefiMacro.hpp	/^  char* name_;$/;"	m	class:lefiMacro
name_	lef/lefiMacro.hpp	/^  char* name_;$/;"	m	class:lefiPin
name_	lef/lefiMisc.hpp	/^  char*   name_;$/;"	m	class:lefiIRDrop
name_	lef/lefiMisc.hpp	/^  char*  name_;$/;"	m	class:lefiGcellPattern
name_	lef/lefiMisc.hpp	/^  char*  name_;$/;"	m	class:lefiSite
name_	lef/lefiMisc.hpp	/^  char*  name_;$/;"	m	class:lefiSitePattern
name_	lef/lefiMisc.hpp	/^  char*  name_;$/;"	m	class:lefiTrackPattern
name_	lef/lefiMisc.hpp	/^  char* name_;$/;"	m	class:lefiUseMinSpacing
name_	lef/lefiNonDefault.hpp	/^  char* name_;$/;"	m	class:lefiNonDefault
name_	lef/lefiVia.hpp	/^  char* name_;$/;"	m	class:lefiVia
name_	lef/lefiVia.hpp	/^  char* name_;$/;"	m	class:lefiViaLayer
name_	lef/lefiViaRule.hpp	/^  char* name_;$/;"	m	class:lefiViaRule
name_	lef/lefiViaRule.hpp	/^  char* name_;$/;"	m	class:lefiViaRuleLayer
namesCaseSensitive	lef/lefrData.hpp	/^    int  namesCaseSensitive; \/\/ always true in 5.6$/;"	m	class:lefrData
names_	lef/lefiLayer.hpp	/^  char**  names_;$/;"	m	class:lefiLayer
names_	lef/lefiNonDefault.hpp	/^  char**  names_;$/;"	m	class:lefiNonDefault
names_	lef/lefiViaRule.hpp	/^  char**  names_;$/;"	m	class:lefiViaRule
nd	lef/lefrData.hpp	/^    lefiNonDefault*  nd; \/\/ PCR 909010 - For VIA in the nondefaultrule$/;"	m	class:lefrData
ndLayer	lef/lefrData.hpp	/^    int  ndLayer; $/;"	m	class:lefrData
ndLayerSpace	lef/lefrData.hpp	/^    int  ndLayerSpace; $/;"	m	class:lefrData
ndLayerWidth	lef/lefrData.hpp	/^    int  ndLayerWidth; $/;"	m	class:lefrData
ndName	lef/lefrData.hpp	/^    char*  ndName; $/;"	m	class:lefrData
ndRule	lef/lefrData.hpp	/^    int  ndRule; $/;"	m	class:lefrData
nd_hardspacing	lef/lef.y	/^nd_hardspacing:$/;"	l
nd_layer	lef/lef.y	/^nd_layer: K_LAYER {lefData->lefDumbMode = 1; lefData->lefNoNum = 1;} T_STRING$/;"	l
nd_layer_stmt	lef/lef.y	/^nd_layer_stmt:$/;"	l
nd_layer_stmts	lef/lef.y	/^nd_layer_stmts:$/;"	l
nd_prop	lef/lef.y	/^nd_prop: K_PROPERTY { lefData->lefDumbMode = 10000000;} nd_prop_list ';'$/;"	l
nd_prop	lef/lef.y	/^nd_prop:$/;"	l
nd_prop_list	lef/lef.y	/^nd_prop_list:$/;"	l
nd_rule	lef/lef.y	/^nd_rule:$/;"	l
nd_rules	lef/lef.y	/^nd_rules: \/\/ empty $/;"	l
need58PropsProcessing	lef/lefiLayer.cpp	/^lefiLayer::need58PropsProcessing() const$/;"	f	class:lefiLayer
needGeometry	lef/lefrData.hpp	/^    int  needGeometry; $/;"	m	class:lefrData
netEpxr_	lef/lefiMacro.hpp	/^  char* netEpxr_;$/;"	m	class:lefiPin
netExpr	lef/lefiMacro.cpp	/^lefiPin::netExpr() const$/;"	f	class:lefiPin
newEdge	lef/lefiCrossTalk.cpp	/^lefiCorrectionTable::newEdge()$/;"	f	class:lefiCorrectionTable
newEdge	lef/lefiCrossTalk.cpp	/^lefiNoiseTable::newEdge()$/;"	f	class:lefiNoiseTable
next	lef/lefiDefs.hpp	/^    lefTOKEN *next;$/;"	m	struct:token
next	lef/lefrData.hpp	/^    char*  next; $/;"	m	class:lefrData
nextPt	lef/lef.y	/^nextPt:  pt$/;"	l
noWireExtCB	lefdiff/diffLefRW.cpp	/^int noWireExtCB(lefrCallbackType_e c, const char* wireExt, lefiUserData ud) {$/;"	f
noWireExtCB	lefrw/lefrw.cpp	/^int noWireExtCB(lefrCallbackType_e c, const char* name, lefiUserData) {$/;"	f
noWireExtensionWarnings	lef/lefrData.hpp	/^    int  noWireExtensionWarnings; $/;"	m	class:lefrData
noise	lef/lefiCrossTalk.cpp	/^lefiNoiseVictim::noise(int index) const$/;"	f	class:lefiNoiseVictim
noiseMarCB	lefrw/lefrw.cpp	/^int noiseMarCB(lefrCallbackType_e c, lefiNoiseMargin *, lefiUserData) {$/;"	f
noiseMarginCB	lefdiff/diffLefRW.cpp	/^int noiseMarginCB(lefrCallbackType_e c, lefiNoiseMargin* margin,$/;"	f
noiseMarginWarnings	lef/lefrData.hpp	/^    int  noiseMarginWarnings; $/;"	m	class:lefrData
noiseTableCB	lefdiff/diffLefRW.cpp	/^int noiseTableCB(lefrCallbackType_e c, lefiNoiseTable* table, lefiUserData ud) {$/;"	f
noiseTableCB	lefrw/lefrw.cpp	/^int noiseTableCB(lefrCallbackType_e c, lefiNoiseTable *, lefiUserData) {$/;"	f
noiseTableWarnings	lef/lefrData.hpp	/^    int  noiseTableWarnings; $/;"	m	class:lefrData
noise_table_entry	lef/lef.y	/^noise_table_entry:$/;"	l
noise_table_list	lef/lef.y	/^noise_table_list :$/;"	l
noisesAllocated_	lef/lefiCrossTalk.hpp	/^  int noisesAllocated_;$/;"	m	class:lefiNoiseVictim
noises_	lef/lefiCrossTalk.hpp	/^  double* noises_;$/;"	m	class:lefiNoiseVictim
noisetable	lef/lef.y	/^noisetable: K_NOISETABLE int_number$/;"	l
nonDefaultCB	lefdiff/diffLefRW.cpp	/^int nonDefaultCB(lefrCallbackType_e c, lefiNonDefault* def, lefiUserData ud) {$/;"	f
nonDefaultCB	lefrw/lefrw.cpp	/^int nonDefaultCB(lefrCallbackType_e c, lefiNonDefault* def, lefiUserData) {$/;"	f
nonDefaultCB	lefwrite/lefwriteCbs.cpp	/^int nonDefaultCB(lefwCallbackType_e c, lefiUserData ud) {$/;"	f
nonDefaultRuleName	lef/lefrData.hpp	/^    char*  nonDefaultRuleName; $/;"	m	class:lefrData
nonDefaultWarnings	lef/lefrData.hpp	/^    int  nonDefaultWarnings; $/;"	m	class:lefrData
nondefault_rule	lef/lef.y	/^nondefault_rule: K_NONDEFAULTRULE {lefData->lefDumbMode = 1; lefData->lefNoNum = 1;} T_STRING$/;"	l
notchLength_	lef/lefiLayer.hpp	/^  double* notchLength_;$/;"	m	class:lefiLayer
nowRise_	lef/lefiMacro.hpp	/^  int nowRise_;$/;"	m	class:lefiTiming
num	lef/lefiCrossTalk.cpp	/^lefiCorrectionResistance::num(int index)$/;"	f	class:lefiCorrectionResistance
num	lef/lefiCrossTalk.cpp	/^lefiCorrectionTable::num()$/;"	f	class:lefiCorrectionTable
num	lef/lefiCrossTalk.cpp	/^lefiNoiseResistance::num(int index) const$/;"	f	class:lefiNoiseResistance
num	lef/lefiCrossTalk.cpp	/^lefiNoiseTable::num()$/;"	f	class:lefiNoiseTable
numAccurrentDensity	lef/lefiLayer.cpp	/^lefiLayer::numAccurrentDensity() const$/;"	f	class:lefiLayer
numAccurrents_	lef/lefiLayer.hpp	/^  int numAccurrents_;                 \/\/ number of ACCURRENTDENSITY$/;"	m	class:lefiLayer
numAlloc_	lef/lefiLayer.hpp	/^  int numAlloc_;$/;"	m	class:lefiAntennaPWL
numAllocated_	lef/lefiLayer.hpp	/^  int numAllocated_;$/;"	m	class:lefiInfluence
numAllocated_	lef/lefiLayer.hpp	/^  int numAllocated_;$/;"	m	class:lefiLayer
numAllocated_	lef/lefiLayer.hpp	/^  int numAllocated_;$/;"	m	class:lefiOrthogonal
numAntennaDiffArea	lef/lefiMacro.cpp	/^lefiPin::numAntennaDiffArea() const$/;"	f	class:lefiPin
numAntennaDiffArea_	lef/lefiMacro.hpp	/^  int numAntennaDiffArea_;$/;"	m	class:lefiPin
numAntennaGateArea	lef/lefiMacro.cpp	/^lefiPinAntennaModel::numAntennaGateArea() const$/;"	f	class:lefiPinAntennaModel
numAntennaGateArea_	lef/lefiMacro.hpp	/^  int numAntennaGateArea_;$/;"	m	class:lefiPinAntennaModel
numAntennaMaxAreaCar	lef/lefiMacro.cpp	/^lefiPinAntennaModel::numAntennaMaxAreaCar() const$/;"	f	class:lefiPinAntennaModel
numAntennaMaxAreaCar_	lef/lefiMacro.hpp	/^  int numAntennaMaxAreaCar_;$/;"	m	class:lefiPinAntennaModel
numAntennaMaxCutCar	lef/lefiMacro.cpp	/^lefiPinAntennaModel::numAntennaMaxCutCar() const$/;"	f	class:lefiPinAntennaModel
numAntennaMaxCutCar_	lef/lefiMacro.hpp	/^  int numAntennaMaxCutCar_;$/;"	m	class:lefiPinAntennaModel
numAntennaMaxSideAreaCar	lef/lefiMacro.cpp	/^lefiPinAntennaModel::numAntennaMaxSideAreaCar() const$/;"	f	class:lefiPinAntennaModel
numAntennaMaxSideAreaCar_	lef/lefiMacro.hpp	/^  int numAntennaMaxSideAreaCar_;$/;"	m	class:lefiPinAntennaModel
numAntennaMetalArea	lef/lefiMacro.cpp	/^lefiPin::numAntennaMetalArea() const$/;"	f	class:lefiPin
numAntennaMetalArea_	lef/lefiMacro.hpp	/^  int numAntennaMetalArea_;$/;"	m	class:lefiPin
numAntennaMetalLength	lef/lefiMacro.cpp	/^lefiPin::numAntennaMetalLength() const$/;"	f	class:lefiPin
numAntennaMetalLength_	lef/lefiMacro.hpp	/^  int numAntennaMetalLength_;$/;"	m	class:lefiPin
numAntennaModel	lef/lefiLayer.cpp	/^lefiLayer::numAntennaModel() const$/;"	f	class:lefiLayer
numAntennaModel	lef/lefiMacro.cpp	/^lefiPin::numAntennaModel() const$/;"	f	class:lefiPin
numAntennaModel_	lef/lefiLayer.hpp	/^  int numAntennaModel_;$/;"	m	class:lefiLayer
numAntennaModel_	lef/lefiMacro.hpp	/^  int numAntennaModel_;$/;"	m	class:lefiPin
numAntennaPartialCutArea	lef/lefiMacro.cpp	/^lefiPin::numAntennaPartialCutArea() const$/;"	f	class:lefiPin
numAntennaPartialCutArea_	lef/lefiMacro.hpp	/^  int numAntennaPartialCutArea_;$/;"	m	class:lefiPin
numAntennaPartialMetalArea	lef/lefiMacro.cpp	/^lefiPin::numAntennaPartialMetalArea() const$/;"	f	class:lefiPin
numAntennaPartialMetalArea_	lef/lefiMacro.hpp	/^  int numAntennaPartialMetalArea_;$/;"	m	class:lefiPin
numAntennaPartialMetalSideArea	lef/lefiMacro.cpp	/^lefiPin::numAntennaPartialMetalSideArea() const$/;"	f	class:lefiPin
numAntennaPartialMetalSideArea_	lef/lefiMacro.hpp	/^  int numAntennaPartialMetalSideArea_;$/;"	m	class:lefiPin
numAntennaSize	lef/lefiMacro.cpp	/^lefiPin::numAntennaSize() const$/;"	f	class:lefiPin
numAntennaSize_	lef/lefiMacro.hpp	/^  int numAntennaSize_;$/;"	m	class:lefiPin
numArrayCuts	lef/lefiLayer.cpp	/^lefiLayer::numArrayCuts() const$/;"	f	class:lefiLayer
numArrayCuts_	lef/lefiLayer.hpp	/^  int     numArrayCuts_;$/;"	m	class:lefiLayer
numCRs	lef/lefiMisc.cpp	/^lefiGcellPattern::numCRs() const$/;"	f	class:lefiGcellPattern
numCRs_	lef/lefiMisc.hpp	/^  int    numCRs_;$/;"	m	class:lefiGcellPattern
numCanPlace	lef/lefiArray.cpp	/^lefiArray::numCanPlace() const$/;"	f	class:lefiArray
numCan_	lef/lefiArray.hpp	/^  int numCan_;$/;"	m	class:lefiArray
numCannotOccupy	lef/lefiArray.cpp	/^lefiArray::numCannotOccupy() const$/;"	f	class:lefiArray
numCannot_	lef/lefiArray.hpp	/^  int numCannot_;$/;"	m	class:lefiArray
numCapacitancePoints_	lef/lefiLayer.hpp	/^  int numCapacitancePoints_;$/;"	m	class:lefiLayer
numCols_	lef/lefiVia.hpp	/^  int numCols_;                \/\/ 5.6$/;"	m	class:lefiVia
numCorrections	lef/lefiCrossTalk.cpp	/^lefiCorrectionVictim::numCorrections()$/;"	f	class:lefiCorrectionVictim
numCorrections_	lef/lefiCrossTalk.hpp	/^  int numCorrections_;$/;"	m	class:lefiCorrectionVictim
numCurrentPoints_	lef/lefiLayer.hpp	/^  int numCurrentPoints_;$/;"	m	class:lefiLayer
numCutCols	lef/lefiVia.cpp	/^lefiVia::numCutCols() const$/;"	f	class:lefiVia
numCutOrtho_	lef/lefiLayer.hpp	/^  int numCutOrtho_;$/;"	m	class:lefiOrthogonal
numCutRows	lef/lefiVia.cpp	/^lefiVia::numCutRows() const$/;"	f	class:lefiVia
numCutareas	lef/lefiLayer.cpp	/^lefiLayerDensity::numCutareas() const$/;"	f	class:lefiLayerDensity
numCutareas_	lef/lefiLayer.hpp	/^  int numCutareas_;$/;"	m	class:lefiLayerDensity
numCuts	lef/lefiNonDefault.cpp	/^lefiNonDefault::numCuts(int index) const$/;"	f	class:lefiNonDefault
numCuts_	lef/lefiNonDefault.hpp	/^  int*   numCuts_;                 \/\/ 5.6$/;"	m	class:lefiNonDefault
numDccurrentDensity	lef/lefiLayer.cpp	/^lefiLayer::numDccurrentDensity() const$/;"	f	class:lefiLayer
numDccurrents_	lef/lefiLayer.hpp	/^  int numDccurrents_;                 \/\/ number of DCCURRENTDENSITY$/;"	m	class:lefiLayer
numDefaultCaps	lef/lefiArray.cpp	/^lefiArray::numDefaultCaps() const$/;"	f	class:lefiArray
numDefault_	lef/lefiArray.hpp	/^  int numDefault_;$/;"	m	class:lefiArray
numDistance_	lef/lefiLayer.hpp	/^  int numDistance_;$/;"	m	class:lefiInfluence
numEdges	lef/lefiCrossTalk.cpp	/^lefiCorrectionTable::numEdges()$/;"	f	class:lefiCorrectionTable
numEdges	lef/lefiCrossTalk.cpp	/^lefiNoiseTable::numEdges()$/;"	f	class:lefiNoiseTable
numEdges_	lef/lefiCrossTalk.hpp	/^  int numEdges_;$/;"	m	class:lefiCorrectionTable
numEdges_	lef/lefiCrossTalk.hpp	/^  int numEdges_;$/;"	m	class:lefiNoiseTable
numEnclosure	lef/lefiLayer.cpp	/^lefiLayer::numEnclosure() const$/;"	f	class:lefiLayer
numEnclosure_	lef/lefiLayer.hpp	/^  int numEnclosure_;$/;"	m	class:lefiLayer
numFloorPlans	lef/lefiArray.cpp	/^lefiArray::numFloorPlans() const$/;"	f	class:lefiArray
numFloorPlans_	lef/lefiArray.hpp	/^  int numFloorPlans_;$/;"	m	class:lefiArray
numForeigns	lef/lefiMacro.cpp	/^lefiMacro::numForeigns() const$/;"	f	class:lefiMacro
numForeigns	lef/lefiMacro.cpp	/^lefiPin::numForeigns() const$/;"	f	class:lefiPin
numForeigns_	lef/lefiMacro.hpp	/^  int     numForeigns_;$/;"	m	class:lefiPin
numForeigns_	lef/lefiMacro.hpp	/^  int numForeigns_;$/;"	m	class:lefiMacro
numFrequency	lef/lefiLayer.cpp	/^lefiLayerDensity::numFrequency() const$/;"	f	class:lefiLayerDensity
numFrequency_	lef/lefiLayer.hpp	/^  int numFrequency_;$/;"	m	class:lefiLayerDensity
numFromPins	lef/lefiMacro.cpp	/^lefiTiming::numFromPins()$/;"	f	class:lefiTiming
numFrom_	lef/lefiMacro.hpp	/^  int numFrom_;$/;"	m	class:lefiTiming
numG_	lef/lefiArray.hpp	/^  int numG_;$/;"	m	class:lefiArray
numGcell	lef/lefiArray.cpp	/^lefiArray::numGcell() const$/;"	f	class:lefiArray
numInfluenceEntry	lef/lefiLayer.cpp	/^lefiInfluence::numInfluenceEntry() const$/;"	f	class:lefiInfluence
numItems	lef/lefiMisc.cpp	/^lefiGeometries::numItems() const$/;"	f	class:lefiGeometries
numItems_	lef/lefiMisc.hpp	/^  int numItems_;$/;"	m	class:lefiGeometries
numLayer	lef/lefiMacro.cpp	/^lefiDensity::numLayer() const$/;"	f	class:lefiDensity
numLayers	lef/lefiMisc.cpp	/^lefiTrackPattern::numLayers() const$/;"	f	class:lefiTrackPattern
numLayers	lef/lefiNonDefault.cpp	/^lefiNonDefault::numLayers() const$/;"	f	class:lefiNonDefault
numLayers	lef/lefiVia.cpp	/^lefiVia::numLayers() const$/;"	f	class:lefiVia
numLayers	lef/lefiViaRule.cpp	/^lefiViaRule::numLayers() const$/;"	f	class:lefiViaRule
numLayers_	lef/lefiMacro.hpp	/^  int    numLayers_;$/;"	m	class:lefiDensity
numLayers_	lef/lefiMisc.hpp	/^  int    numLayers_;$/;"	m	class:lefiTrackPattern
numLayers_	lef/lefiNonDefault.hpp	/^  int numLayers_;$/;"	m	class:lefiNonDefault
numLayers_	lef/lefiVia.hpp	/^  int numLayers_;$/;"	m	class:lefiVia
numLayers_	lef/lefiViaRule.hpp	/^  int numLayers_;$/;"	m	class:lefiViaRule
numLength	lef/lefiLayer.cpp	/^lefiParallel::numLength() const$/;"	f	class:lefiParallel
numLength_	lef/lefiLayer.hpp	/^  int numLength_;$/;"	m	class:lefiParallel
numMinCuts	lef/lefiNonDefault.cpp	/^lefiNonDefault::numMinCuts() const$/;"	f	class:lefiNonDefault
numMinCuts_	lef/lefiNonDefault.hpp	/^  int    numMinCuts_;              \/\/ 5.6$/;"	m	class:lefiNonDefault
numMinSize	lef/lefiLayer.cpp	/^lefiLayer::numMinSize() const$/;"	f	class:lefiLayer
numMinSize_	lef/lefiLayer.hpp	/^  int numMinSize_;$/;"	m	class:lefiLayer
numMinenclosedarea	lef/lefiLayer.cpp	/^lefiLayer::numMinenclosedarea() const$/;"	f	class:lefiLayer
numMinenclosedarea_	lef/lefiLayer.hpp	/^  int     numMinenclosedarea_;                \/\/ 5.5$/;"	m	class:lefiLayer
numMinimumcut	lef/lefiLayer.cpp	/^lefiLayer::numMinimumcut() const$/;"	f	class:lefiLayer
numMinimumcut_	lef/lefiLayer.hpp	/^  int     numMinimumcut_;$/;"	m	class:lefiLayer
numMinstep	lef/lefiLayer.cpp	/^lefiLayer::numMinstep() const$/;"	f	class:lefiLayer
numMinstepAlloc_	lef/lefiLayer.hpp	/^  int     numMinstepAlloc_;                   \/\/ 5.6$/;"	m	class:lefiLayer
numMinstep_	lef/lefiLayer.hpp	/^  int     numMinstep_;                        \/\/ 5.6$/;"	m	class:lefiLayer
numNoises	lef/lefiCrossTalk.cpp	/^lefiNoiseVictim::numNoises() const$/;"	f	class:lefiNoiseVictim
numNoises_	lef/lefiCrossTalk.hpp	/^  int numNoises_;$/;"	m	class:lefiNoiseVictim
numNums	lef/lefiCrossTalk.cpp	/^lefiCorrectionResistance::numNums()$/;"	f	class:lefiCorrectionResistance
numNums	lef/lefiCrossTalk.cpp	/^lefiNoiseResistance::numNums() const$/;"	f	class:lefiNoiseResistance
numNums_	lef/lefiCrossTalk.hpp	/^  int numNums_;$/;"	m	class:lefiCorrectionResistance
numNums_	lef/lefiCrossTalk.hpp	/^  int numNums_;$/;"	m	class:lefiNoiseResistance
numNums_	lef/lefiLayer.hpp	/^  int numNums_;$/;"	m	class:lefiLayer
numOfAxisNumbers	lef/lefiMacro.cpp	/^lefiTiming::numOfAxisNumbers()$/;"	f	class:lefiTiming
numOfAxisNumbers_	lef/lefiMacro.hpp	/^  int numOfAxisNumbers_;$/;"	m	class:lefiTiming
numOfTableEntries	lef/lefiMacro.cpp	/^lefiTiming::numOfTableEntries()$/;"	f	class:lefiTiming
numOfTableEntries_	lef/lefiMacro.hpp	/^  int numOfTableEntries_;$/;"	m	class:lefiTiming
numOrthogonal	lef/lefiLayer.cpp	/^lefiOrthogonal::numOrthogonal() const$/;"	f	class:lefiOrthogonal
numPWL	lef/lefiLayer.cpp	/^lefiAntennaPWL::numPWL() const$/;"	f	class:lefiAntennaPWL
numPWL_	lef/lefiLayer.hpp	/^  int numPWL_;$/;"	m	class:lefiAntennaPWL
numPatterns	lef/lefiArray.cpp	/^lefiArrayFloorPlan::numPatterns() const$/;"	f	class:lefiArrayFloorPlan
numPatterns_	lef/lefiArray.hpp	/^  int numPatterns_;$/;"	m	class:lefiArray
numPatterns_	lef/lefiArray.hpp	/^  int numPatterns_;$/;"	m	class:lefiArrayFloorPlan
numPoints	clef/lefiTypedefs.h	/^  int     numPoints;$/;"	m	struct:lefiGeomPath
numPoints	clef/lefiTypedefs.h	/^  int     numPoints;$/;"	m	struct:lefiGeomPathIter
numPoints	clef/lefiTypedefs.h	/^  int     numPoints;$/;"	m	struct:lefiGeomPolygon
numPoints	clef/lefiTypedefs.h	/^  int numPoints;$/;"	m	struct:lefiGeomPolygonIter
numPoints	lef/lefiMisc.hpp	/^  int     numPoints;$/;"	m	struct:lefiGeomPath
numPoints	lef/lefiMisc.hpp	/^  int     numPoints;$/;"	m	struct:lefiGeomPathIter
numPoints	lef/lefiMisc.hpp	/^  int     numPoints;$/;"	m	struct:lefiGeomPolygon
numPoints	lef/lefiMisc.hpp	/^  int numPoints;$/;"	m	struct:lefiGeomPolygonIter
numPoints_	lef/lefiMisc.hpp	/^  int numPoints_;$/;"	m	class:lefiGeometries
numPolygons	lef/lefiVia.cpp	/^lefiVia::numPolygons(int layerNum) const$/;"	f	class:lefiVia
numPolygons	lef/lefiVia.cpp	/^lefiViaLayer::numPolygons()$/;"	f	class:lefiViaLayer
numPolys_	lef/lefiVia.hpp	/^  int numPolys_;$/;"	m	class:lefiViaLayer
numPorts	lef/lefiMacro.cpp	/^lefiPin::numPorts() const$/;"	f	class:lefiPin
numPorts_	lef/lefiMacro.hpp	/^  int numPorts_;$/;"	m	class:lefiPin
numPreferEnclosure	lef/lefiLayer.cpp	/^lefiLayer::numPreferEnclosure() const$/;"	f	class:lefiLayer
numPreferEnclosure_	lef/lefiLayer.hpp	/^  int numPreferEnclosure_;$/;"	m	class:lefiLayer
numProperties	lef/lefiMacro.cpp	/^lefiMacro::numProperties() const$/;"	f	class:lefiMacro
numProperties	lef/lefiMacro.cpp	/^lefiPin::numProperties() const$/;"	f	class:lefiPin
numProperties	lef/lefiVia.cpp	/^lefiVia::numProperties() const$/;"	f	class:lefiVia
numProperties_	lef/lefiMacro.hpp	/^  int numProperties_;$/;"	m	class:lefiMacro
numProperties_	lef/lefiMacro.hpp	/^  int numProperties_;$/;"	m	class:lefiPin
numProperties_	lef/lefiPropType.hpp	/^  int    numProperties_;$/;"	m	class:lefiPropType
numProps	lef/lefiLayer.cpp	/^lefiLayer::numProps() const$/;"	f	class:lefiLayer
numProps	lef/lefiNonDefault.cpp	/^lefiNonDefault::numProps() const$/;"	f	class:lefiNonDefault
numProps	lef/lefiViaRule.cpp	/^lefiViaRule::numProps() const$/;"	f	class:lefiViaRule
numProps_	lef/lefiLayer.hpp	/^  int numProps_;$/;"	m	class:lefiLayer
numProps_	lef/lefiNonDefault.hpp	/^  int numProps_;$/;"	m	class:lefiNonDefault
numProps_	lef/lefiVia.hpp	/^  int numProps_;$/;"	m	class:lefiVia
numProps_	lef/lefiViaRule.hpp	/^  int numProps_;$/;"	m	class:lefiViaRule
numRects	lef/lefiMacro.cpp	/^lefiDensity::numRects(int index) const$/;"	f	class:lefiDensity
numRects	lef/lefiVia.cpp	/^lefiVia::numRects(int layerNum) const$/;"	f	class:lefiVia
numRects	lef/lefiVia.cpp	/^lefiViaLayer::numRects()$/;"	f	class:lefiViaLayer
numRects_	lef/lefiMacro.hpp	/^  int*   numRects_;$/;"	m	class:lefiDensity
numRects_	lef/lefiVia.hpp	/^  int numRects_;$/;"	m	class:lefiViaLayer
numResistancePoints_	lef/lefiLayer.hpp	/^  int numResistancePoints_;$/;"	m	class:lefiLayer
numResistances	lef/lefiCrossTalk.cpp	/^lefiCorrectionEdge::numResistances()$/;"	f	class:lefiCorrectionEdge
numResistances	lef/lefiCrossTalk.cpp	/^lefiNoiseEdge::numResistances()$/;"	f	class:lefiNoiseEdge
numResistances_	lef/lefiCrossTalk.hpp	/^  int numResistances_;$/;"	m	class:lefiCorrectionEdge
numResistances_	lef/lefiCrossTalk.hpp	/^  int numResistances_;$/;"	m	class:lefiNoiseEdge
numRowPattern_	lef/lefiMisc.hpp	/^  int    numRowPattern_;         \/\/ 5.6 ROWPATTERN$/;"	m	class:lefiSite
numRows_	lef/lefiVia.hpp	/^  int numRows_;                \/\/ 5.6$/;"	m	class:lefiVia
numSitePattern	lef/lefiArray.cpp	/^lefiArray::numSitePattern() const$/;"	f	class:lefiArray
numSitePattern	lef/lefiMacro.cpp	/^lefiMacro::numSitePattern() const$/;"	f	class:lefiMacro
numSites	lef/lefiArray.cpp	/^lefiArray::numSites(int index) const$/;"	f	class:lefiArray
numSites	lef/lefiMisc.cpp	/^lefiSite::numSites() const$/;"	f	class:lefiSite
numSites_	lef/lefiMacro.hpp	/^  int numSites_;$/;"	m	class:lefiMacro
numSpacing	lef/lefiLayer.cpp	/^lefiLayer::numSpacing() const$/;"	f	class:lefiLayer
numSpacingRules	lef/lefiNonDefault.cpp	/^lefiNonDefault::numSpacingRules() const$/;"	f	class:lefiNonDefault
numSpacingTable	lef/lefiLayer.cpp	/^lefiLayer::numSpacingTable()$/;"	f	class:lefiLayer
numSpacingTable_	lef/lefiLayer.hpp	/^  int numSpacingTable_;$/;"	m	class:lefiLayer
numSpacing_	lef/lefiLayer.hpp	/^  int numSpacing_;$/;"	m	class:lefiInfluence
numSpacing_	lef/lefiNonDefault.hpp	/^  int numSpacing_;$/;"	m	class:lefiNonDefault
numSpacings_	lef/lefiLayer.hpp	/^  int numSpacings_;$/;"	m	class:lefiLayer
numTableEntries	lef/lefiLayer.cpp	/^lefiLayerDensity::numTableEntries() const$/;"	f	class:lefiLayerDensity
numTableEntries_	lef/lefiLayer.hpp	/^  int numTableEntries_;$/;"	m	class:lefiLayerDensity
numToPins	lef/lefiMacro.cpp	/^lefiTiming::numToPins()$/;"	f	class:lefiTiming
numTo_	lef/lefiMacro.hpp	/^  int numTo_;$/;"	m	class:lefiTiming
numTrack	lef/lefiArray.cpp	/^lefiArray::numTrack() const$/;"	f	class:lefiArray
numTracks	lef/lefiMisc.cpp	/^lefiTrackPattern::numTracks() const$/;"	f	class:lefiTrackPattern
numTracks_	lef/lefiArray.hpp	/^  int numTracks_;$/;"	m	class:lefiArray
numTracks_	lef/lefiMisc.hpp	/^  int    numTracks_;$/;"	m	class:lefiTrackPattern
numUseVia	lef/lefiNonDefault.cpp	/^lefiNonDefault::numUseVia() const$/;"	f	class:lefiNonDefault
numUseViaRule	lef/lefiNonDefault.cpp	/^lefiNonDefault::numUseViaRule() const$/;"	f	class:lefiNonDefault
numUseViaRules_	lef/lefiNonDefault.hpp	/^  int    numUseViaRules_;          \/\/ 5.6$/;"	m	class:lefiNonDefault
numUseVias_	lef/lefiNonDefault.hpp	/^  int    numUseVias_;              \/\/ 5.6$/;"	m	class:lefiNonDefault
numValues	lef/lefiMisc.cpp	/^lefiIRDrop::numValues() const$/;"	f	class:lefiIRDrop
numValues_	lef/lefiMisc.hpp	/^  int     numValues_;$/;"	m	class:lefiIRDrop
numVia	lef/lefrData.hpp	/^    int  numVia; $/;"	m	class:lefrData
numVias	lef/lefiNonDefault.cpp	/^lefiNonDefault::numVias() const$/;"	f	class:lefiNonDefault
numVias	lef/lefiViaRule.cpp	/^lefiViaRule::numVias() const$/;"	f	class:lefiViaRule
numVias_	lef/lefiNonDefault.hpp	/^  int numVias_;$/;"	m	class:lefiNonDefault
numVias_	lef/lefiViaRule.hpp	/^  int numVias_;$/;"	m	class:lefiViaRule
numVictims	lef/lefiCrossTalk.cpp	/^lefiCorrectionResistance::numVictims()$/;"	f	class:lefiCorrectionResistance
numVictims	lef/lefiCrossTalk.cpp	/^lefiNoiseResistance::numVictims() const$/;"	f	class:lefiNoiseResistance
numVictims_	lef/lefiCrossTalk.hpp	/^  int numVictims_;$/;"	m	class:lefiCorrectionResistance
numVictims_	lef/lefiCrossTalk.hpp	/^  int numVictims_;$/;"	m	class:lefiNoiseResistance
numWidth	lef/lefiLayer.cpp	/^lefiParallel::numWidth() const$/;"	f	class:lefiParallel
numWidth	lef/lefiLayer.cpp	/^lefiTwoWidths::numWidth() const$/;"	f	class:lefiTwoWidths
numWidthAllocated_	lef/lefiLayer.hpp	/^  int numWidthAllocated_;$/;"	m	class:lefiParallel
numWidthAllocated_	lef/lefiLayer.hpp	/^  int numWidthAllocated_;$/;"	m	class:lefiTwoWidths
numWidthSpacing	lef/lefiLayer.cpp	/^lefiTwoWidths::numWidthSpacing(int index) const$/;"	f	class:lefiTwoWidths
numWidthSpacing_	lef/lefiLayer.hpp	/^  int*    numWidthSpacing_;   \/\/ each slot contains number of spacing of slot$/;"	m	class:lefiTwoWidths
numWidth_	lef/lefiLayer.hpp	/^  int numWidth_;$/;"	m	class:lefiInfluence
numWidth_	lef/lefiLayer.hpp	/^  int numWidth_;$/;"	m	class:lefiParallel
numWidth_	lef/lefiLayer.hpp	/^  int numWidth_;$/;"	m	class:lefiTwoWidths
numWidths	lef/lefiLayer.cpp	/^lefiLayerDensity::numWidths() const$/;"	f	class:lefiLayerDensity
numWidths_	lef/lefiLayer.hpp	/^  int numWidths_;$/;"	m	class:lefiLayerDensity
num_	lef/lefiCrossTalk.hpp	/^  int num_;$/;"	m	class:lefiCorrectionTable
num_	lef/lefiCrossTalk.hpp	/^  int num_;$/;"	m	class:lefiNoiseTable
num_list	lef/lef.y	/^num_list:$/;"	l
number	lef/lefiProp.cpp	/^lefiProp::number() const$/;"	f	class:lefiProp
number_list	lef/lef.y	/^number_list:$/;"	l
numo_list	lef/lef.y	/^numo_list:$/;"	l
numsAllocated_	lef/lefiCrossTalk.hpp	/^  int numsAllocated_;$/;"	m	class:lefiCorrectionResistance
numsAllocated_	lef/lefiCrossTalk.hpp	/^  int numsAllocated_;$/;"	m	class:lefiNoiseResistance
nums_	lef/lefiCrossTalk.hpp	/^  double* nums_;$/;"	m	class:lefiCorrectionResistance
nums_	lef/lefiCrossTalk.hpp	/^  double* nums_;$/;"	m	class:lefiNoiseResistance
nums_	lef/lefiLayer.hpp	/^  double* nums_;$/;"	m	class:lefiLayer
obsDef	lef/lefrData.hpp	/^    int  obsDef; $/;"	m	class:lefrData
obstructionCB	lefdiff/diffLefRW.cpp	/^int obstructionCB(lefrCallbackType_e c, lefiObstruction* obs,$/;"	f
obstructionCB	lefrw/lefrw.cpp	/^int obstructionCB(lefrCallbackType_e c, lefiObstruction* obs,$/;"	f
offset	lef/lefiLayer.cpp	/^lefiLayer::offset() const$/;"	f	class:lefiLayer
offsetX	lef/lefiLayer.cpp	/^lefiLayer::offsetX() const$/;"	f	class:lefiLayer
offsetX_	lef/lefiLayer.hpp	/^  double offsetX_;                    \/\/ 5.6$/;"	m	class:lefiLayer
offsetY	lef/lefiLayer.cpp	/^lefiLayer::offsetY() const$/;"	f	class:lefiLayer
offsetY_	lef/lefiLayer.hpp	/^  double offsetY_;                    \/\/ 5.6$/;"	m	class:lefiLayer
one	lef/lefiMisc.cpp	/^lefiMinFeature::one() const$/;"	f	class:lefiMinFeature
oneEntry	lef/lefiLayer.cpp	/^lefiLayerDensity::oneEntry() const$/;"	f	class:lefiLayerDensity
oneEntry_	lef/lefiLayer.hpp	/^  double oneEntry_;$/;"	m	class:lefiLayerDensity
one_	lef/lefiMisc.hpp	/^  double one_;$/;"	m	class:lefiMinFeature
one_cap	lef/lef.y	/^one_cap: K_MINPINS int_number K_WIRECAP int_number ';'$/;"	l
one_pin_trigger	lef/lef.y	/^one_pin_trigger:$/;"	l
operator ()	lef/lefrData.hpp	/^    bool operator()(const std::string &lhs, const std::string &rhs) const {$/;"	f	struct:lefCompareStrings
operator ()	lef/lefrSettings.hpp	/^    bool operator()(const char* lhs, const char* rhs) const {$/;"	f	struct:lefCompareCStrings
opt_adjacentcuts_exceptsame	lef/lef.y	/^opt_adjacentcuts_exceptsame:                \/\/ 5.7 $/;"	l
opt_def_dvalue	lef/lef.y	/^opt_def_dvalue:$/;"	l
opt_def_range	lef/lef.y	/^opt_def_range:$/;"	l
opt_def_value	lef/lef.y	/^opt_def_value:$/;"	l
opt_endofline	lef/lef.y	/^opt_endofline:                                      \/\/ 5.7 $/;"	l
opt_endofline_twoedges	lef/lef.y	/^opt_endofline_twoedges:                             \/\/ 5.7 $/;"	l
opt_layer_name	lef/lef.y	/^opt_layer_name:$/;"	l
opt_range_second	lef/lef.y	/^opt_range_second:$/;"	l
opt_samenetPGonly	lef/lef.y	/^opt_samenetPGonly:                                  \/\/ 5.7 $/;"	l
opt_viarule_props	lef/lef.y	/^opt_viarule_props:$/;"	l
orient	lef/lefiMisc.cpp	/^lefiSitePattern::orient() const$/;"	f	class:lefiSitePattern
orientStr	lef/lefiMisc.cpp	/^lefiSitePattern::orientStr() const$/;"	f	class:lefiSitePattern
orientStr	lefrw/lefrw.cpp	/^char* orientStr(int orient) {$/;"	f
orient_	lef/lefiMisc.hpp	/^  int    orient_;$/;"	m	class:lefiSitePattern
orientation	lef/lef.y	/^orientation:$/;"	l
origDef	lef/lefrData.hpp	/^    int  origDef; $/;"	m	class:lefrData
originX	lef/lefiMacro.cpp	/^lefiMacro::originX() const$/;"	f	class:lefiMacro
originX_	lef/lefiMacro.hpp	/^  double originX_;$/;"	m	class:lefiMacro
originY	lef/lefiMacro.cpp	/^lefiMacro::originY() const$/;"	f	class:lefiMacro
originY_	lef/lefiMacro.hpp	/^  double originY_;$/;"	m	class:lefiMacro
orthoSpacing	lef/lefiLayer.cpp	/^lefiOrthogonal::orthoSpacing(int index) const$/;"	f	class:lefiOrthogonal
ortho_	lef/lefiLayer.hpp	/^  double* ortho_;$/;"	m	class:lefiOrthogonal
orthogonal	lef/lefiLayer.cpp	/^lefiLayer::orthogonal() const$/;"	f	class:lefiLayer
otherPts	lef/lef.y	/^otherPts:$/;"	l
outMarginH_	lef/lefiMacro.hpp	/^  double outMarginH_;$/;"	m	class:lefiPin
outMarginHigh	lef/lefiMacro.cpp	/^lefiPin::outMarginHigh() const$/;"	f	class:lefiPin
outMarginL_	lef/lefiMacro.hpp	/^  double outMarginL_;$/;"	m	class:lefiPin
outMarginLow	lef/lefiMacro.cpp	/^lefiPin::outMarginLow() const$/;"	f	class:lefiPin
outMsg	lef/lefrData.hpp	/^    char*  outMsg; $/;"	m	class:lefrData
outResistanceH_	lef/lefiMacro.hpp	/^  double outResistanceH_;$/;"	m	class:lefiPin
outResistanceHigh	lef/lefiMacro.cpp	/^lefiPin::outResistanceHigh() const$/;"	f	class:lefiPin
outResistanceL_	lef/lefiMacro.hpp	/^  double outResistanceL_;$/;"	m	class:lefiPin
outResistanceLow	lef/lefiMacro.cpp	/^lefiPin::outResistanceLow() const$/;"	f	class:lefiPin
outputAntCB	lefdiff/diffLefRW.cpp	/^int outputAntCB(lefrCallbackType_e c, double antenna, lefiUserData ud) {$/;"	f
outputAntennaWarnings	lef/lefrData.hpp	/^    int  outputAntennaWarnings; $/;"	m	class:lefrData
output_antenna	lef/lef.y	/^output_antenna: K_OUTPUTPINANTENNASIZE int_number ';'$/;"	l
output_list	lef/lef.y	/^output_list: K_OUTPUTRESISTANCE$/;"	l
output_resistance_entry	lef/lef.y	/^output_resistance_entry: K_OUTPUTRESISTANCE$/;"	l
overhang	lef/lefiViaRule.cpp	/^lefiViaRuleLayer::overhang() const$/;"	f	class:lefiViaRuleLayer
overhang1_	lef/lefiLayer.hpp	/^  double* overhang1_;$/;"	m	class:lefiLayer
overhang1_	lef/lefiViaRule.hpp	/^  double overhang1_;                                       \/\/ 5.5$/;"	m	class:lefiViaRuleLayer
overhang2_	lef/lefiLayer.hpp	/^  double* overhang2_;$/;"	m	class:lefiLayer
overhang2_	lef/lefiViaRule.hpp	/^  double overhang2_;                                       \/\/ 5.5$/;"	m	class:lefiViaRuleLayer
overhang_	lef/lefiViaRule.hpp	/^  double overhang_;$/;"	m	class:lefiViaRuleLayer
oxide_	lef/lefiLayer.hpp	/^  char*  oxide_;$/;"	m	class:lefiAntennaModel
oxide_	lef/lefiMacro.hpp	/^  char* oxide_;$/;"	m	class:lefiPinAntennaModel
pad_type	lef/lef.y	/^pad_type: $/;"	l
parSpace_	lef/lefiLayer.hpp	/^  double* parSpace_;$/;"	m	class:lefiLayer
parWithin_	lef/lefiLayer.hpp	/^  double* parWithin_;$/;"	m	class:lefiLayer
parallel	lef/lefiLayer.cpp	/^lefiSpacingTable::parallel() const$/;"	f	class:lefiSpacingTable
parallel_	lef/lefiLayer.hpp	/^  lefiParallel*    parallel_;$/;"	m	class:lefiSpacingTable
parse65nm	lefrw/lefrw.cpp	/^int parse65nm = 0;$/;"	v
parse65nmRules	lef/lefiLayer.cpp	/^lefiLayer::parse65nmRules()$/;"	f	class:lefiLayer
parseAntennaAreaDiff	lef/lefiLayer.cpp	/^lefiLayer::parseAntennaAreaDiff(int index)$/;"	f	class:lefiLayer
parseAntennaAreaMinus	lef/lefiLayer.cpp	/^lefiLayer::parseAntennaAreaMinus(int index)$/;"	f	class:lefiLayer
parseAntennaCumRouting	lef/lefiLayer.cpp	/^lefiLayer::parseAntennaCumRouting(int index)$/;"	f	class:lefiLayer
parseAntennaGatePlus	lef/lefiLayer.cpp	/^lefiLayer::parseAntennaGatePlus(int index)$/;"	f	class:lefiLayer
parseArraySpacing	lef/lefiLayer.cpp	/^lefiLayer::parseArraySpacing(int index)$/;"	f	class:lefiLayer
parseLEF58Layer	lef/lefiLayer.cpp	/^lefiLayer::parseLEF58Layer()$/;"	f	class:lefiLayer
parseLayerEnclosure	lef/lefiLayer.cpp	/^lefiLayer::parseLayerEnclosure(int index)$/;"	f	class:lefiLayer
parseLayerType	lef/lefiLayer.cpp	/^lefiLayer::parseLayerType(int index)$/;"	f	class:lefiLayer
parseLef58Type	lefrw/lefrw.cpp	/^int parseLef58Type = 0;$/;"	v
parseMinstep	lef/lefiLayer.cpp	/^lefiLayer::parseMinstep(int index)$/;"	f	class:lefiLayer
parseSpacing	lef/lefiLayer.cpp	/^lefiLayer::parseSpacing(int index)$/;"	f	class:lefiLayer
pattern	lef/lefiArray.cpp	/^lefiArrayFloorPlan::pattern(int index) const$/;"	f	class:lefiArrayFloorPlan
pattern_	lef/lefiArray.hpp	/^  lefiSitePattern** pattern_;$/;"	m	class:lefiArray
pattern_	lef/lefiMacro.hpp	/^  lefiSitePattern** pattern_;$/;"	m	class:lefiMacro
patternsAllocated_	lef/lefiArray.hpp	/^  int patternsAllocated_;$/;"	m	class:lefiArray
patternsAllocated_	lef/lefiArray.hpp	/^  int patternsAllocated_;$/;"	m	class:lefiArrayFloorPlan
patterns_	lef/lefiArray.hpp	/^  lefiSitePattern** patterns_;$/;"	m	class:lefiArrayFloorPlan
pinCB	lefdiff/diffLefRW.cpp	/^int pinCB(lefrCallbackType_e c, lefiPin* pin, lefiUserData ud) {$/;"	f
pinCB	lefrw/lefrw.cpp	/^int pinCB(lefrCallbackType_e c, lefiPin* pin, lefiUserData) {$/;"	f
pinDef	lef/lefrData.hpp	/^    int  pinDef; $/;"	m	class:lefrData
pinName	lef/lefrData.hpp	/^    char*  pinName; $/;"	m	class:lefrData
pinWarnings	lef/lefrData.hpp	/^    int  pinWarnings; $/;"	m	class:lefrData
pin_layer_oxide	lef/lef.y	/^pin_layer_oxide:$/;"	l
pin_name_value_pair	lef/lef.y	/^pin_name_value_pair:$/;"	l
pin_prop_list	lef/lef.y	/^pin_prop_list:$/;"	l
pin_shape	lef/lef.y	/^pin_shape:$/;"	l
pitch	lef/lefiLayer.cpp	/^lefiLayer::pitch() const$/;"	f	class:lefiLayer
pitchX	lef/lefiLayer.cpp	/^lefiLayer::pitchX() const$/;"	f	class:lefiLayer
pitchX_	lef/lefiLayer.hpp	/^  double pitchX_;                     \/\/ 5.6$/;"	m	class:lefiLayer
pitchY	lef/lefiLayer.cpp	/^lefiLayer::pitchY() const$/;"	f	class:lefiLayer
pitchY_	lef/lefiLayer.hpp	/^  double pitchY_;                     \/\/ 5.6$/;"	m	class:lefiLayer
point	lef/lefiDefs.hpp	/^struct point {$/;"	s
pointsAllocated_	lef/lefiMisc.hpp	/^  int pointsAllocated_;$/;"	m	class:lefiGeometries
polyColorMask	lef/lefiVia.cpp	/^lefiVia::polyColorMask(int  layerNum,$/;"	f	class:lefiVia
polyColorMask	lef/lefiVia.cpp	/^lefiViaLayer::polyColorMask(int index)$/;"	f	class:lefiViaLayer
polyColorMask_	lef/lefiVia.hpp	/^  int* polyColorMask_;$/;"	m	class:lefiViaLayer
polygons_	lef/lefiVia.hpp	/^  lefiGeomPolygon** polygons_;$/;"	m	class:lefiViaLayer
polysAllocated_	lef/lefiVia.hpp	/^  int polysAllocated_;$/;"	m	class:lefiViaLayer
port	lef/lefiMacro.cpp	/^lefiPin::port(int index) const$/;"	f	class:lefiPin
portsAllocated_	lef/lefiMacro.hpp	/^  int portsAllocated_;$/;"	m	class:lefiPin
ports_	lef/lefiMacro.hpp	/^  lefiGeometries** ports_;$/;"	m	class:lefiPin
power	lef/lefiMacro.cpp	/^lefiMacro::power() const$/;"	f	class:lefiMacro
power	lef/lefiMacro.cpp	/^lefiPin::power() const$/;"	f	class:lefiPin
power	lef/lefiUnits.cpp	/^lefiUnits::power() const$/;"	f	class:lefiUnits
power_	lef/lefiMacro.hpp	/^  double power_;$/;"	m	class:lefiMacro
power_	lef/lefiMacro.hpp	/^  double power_;$/;"	m	class:lefiPin
power_	lef/lefiUnits.hpp	/^  double power_;$/;"	m	class:lefiUnits
preferEnclosureAllocated_	lef/lefiLayer.hpp	/^  int preferEnclosureAllocated_;$/;"	m	class:lefiLayer
preferEnclosureMinWidth	lef/lefiLayer.cpp	/^lefiLayer::preferEnclosureMinWidth(int index) const$/;"	f	class:lefiLayer
preferEnclosureOverhang1	lef/lefiLayer.cpp	/^lefiLayer::preferEnclosureOverhang1(int index) const$/;"	f	class:lefiLayer
preferEnclosureOverhang2	lef/lefiLayer.cpp	/^lefiLayer::preferEnclosureOverhang2(int index) const$/;"	f	class:lefiLayer
preferEnclosureRule	lef/lefiLayer.cpp	/^lefiLayer::preferEnclosureRule(int index)$/;"	f	class:lefiLayer
preferEnclosureRules_	lef/lefiLayer.hpp	/^  char** preferEnclosureRules_;$/;"	m	class:lefiLayer
preferMinWidth_	lef/lefiLayer.hpp	/^  double* preferMinWidth_;$/;"	m	class:lefiLayer
preferOverhang1_	lef/lefiLayer.hpp	/^  double* preferOverhang1_;$/;"	m	class:lefiLayer
preferOverhang2_	lef/lefiLayer.hpp	/^  double* preferOverhang2_;$/;"	m	class:lefiLayer
print	lef/lefiArray.cpp	/^lefiArray::print(FILE *f) const$/;"	f	class:lefiArray
print	lef/lefiLayer.cpp	/^lefiLayer::print(FILE *f) const$/;"	f	class:lefiLayer
print	lef/lefiMacro.cpp	/^lefiDensity::print(FILE *f) const$/;"	f	class:lefiDensity
print	lef/lefiMacro.cpp	/^lefiMacro::print(FILE *f) const$/;"	f	class:lefiMacro
print	lef/lefiMacro.cpp	/^lefiObstruction::print(FILE *f) const$/;"	f	class:lefiObstruction
print	lef/lefiMacro.cpp	/^lefiPin::print(FILE *f) const$/;"	f	class:lefiPin
print	lef/lefiMisc.cpp	/^lefiGcellPattern::print(FILE *f) const$/;"	f	class:lefiGcellPattern
print	lef/lefiMisc.cpp	/^lefiGeometries::print(FILE *f) const$/;"	f	class:lefiGeometries
print	lef/lefiMisc.cpp	/^lefiIRDrop::print(FILE *f) const$/;"	f	class:lefiIRDrop
print	lef/lefiMisc.cpp	/^lefiMaxStackVia::print(FILE *f) const$/;"	f	class:lefiMaxStackVia
print	lef/lefiMisc.cpp	/^lefiMinFeature::print(FILE *f) const$/;"	f	class:lefiMinFeature
print	lef/lefiMisc.cpp	/^lefiSite::print(FILE *f) const$/;"	f	class:lefiSite
print	lef/lefiMisc.cpp	/^lefiSitePattern::print(FILE *f) const$/;"	f	class:lefiSitePattern
print	lef/lefiMisc.cpp	/^lefiSpacing::print(FILE *f) const$/;"	f	class:lefiSpacing
print	lef/lefiMisc.cpp	/^lefiTrackPattern::print(FILE *f) const$/;"	f	class:lefiTrackPattern
print	lef/lefiMisc.cpp	/^lefiUseMinSpacing::print(FILE *f) const$/;"	f	class:lefiUseMinSpacing
print	lef/lefiNonDefault.cpp	/^lefiNonDefault::print(FILE *f)$/;"	f	class:lefiNonDefault
print	lef/lefiProp.cpp	/^lefiProp::print(FILE *f) const$/;"	f	class:lefiProp
print	lef/lefiUnits.cpp	/^lefiUnits::print(FILE *f) const$/;"	f	class:lefiUnits
print	lef/lefiVia.cpp	/^lefiVia::print(FILE *f) const$/;"	f	class:lefiVia
print	lef/lefiViaRule.cpp	/^lefiViaRule::print(FILE *f) const$/;"	f	class:lefiViaRule
print	lef/lefiViaRule.cpp	/^lefiViaRuleLayer::print(FILE *f) const$/;"	f	class:lefiViaRuleLayer
printWarning	lefrw/lefrw.cpp	/^void printWarning(const char *str)$/;"	f
print_nlines	lef/lef_keywords.cpp	/^print_nlines(int lineNum)$/;"	f	file:
printing	lefdiff/diffLefRW.cpp	/^int     printing = 0;     \/\/ Printing the output.$/;"	v
printing	lefrw/lefrw.cpp	/^int printing = 0;     \/\/ Printing the output.$/;"	v
prl_	lef/lefiLayer.hpp	/^  double* prl_;$/;"	m	class:lefiTwoWidths
propDValue_	lef/lefiVia.hpp	/^  double* propDValue_;$/;"	m	class:lefiVia
propDefBeginCB	lefrw/lefrw.cpp	/^int propDefBeginCB(lefrCallbackType_e c, void*, lefiUserData) {$/;"	f
propDefCB	lefdiff/diffLefRW.cpp	/^int propDefCB(lefrCallbackType_e c, lefiProp* prop, lefiUserData ud) {$/;"	f
propDefCB	lefrw/lefrw.cpp	/^int propDefCB(lefrCallbackType_e c, lefiProp* prop, lefiUserData) {$/;"	f
propDefCB	lefwrite/lefwriteCbs.cpp	/^int propDefCB(lefwCallbackType_e c, lefiUserData ud) {$/;"	f
propDefEndCB	lefrw/lefrw.cpp	/^int propDefEndCB(lefrCallbackType_e c, void*, lefiUserData) {$/;"	f
propIsNumber	lef/lefiLayer.cpp	/^lefiLayer::propIsNumber(int i) const$/;"	f	class:lefiLayer
propIsNumber	lef/lefiMacro.cpp	/^lefiMacro::propIsNumber(int index) const$/;"	f	class:lefiMacro
propIsNumber	lef/lefiMacro.cpp	/^lefiPin::propIsNumber(int index) const$/;"	f	class:lefiPin
propIsNumber	lef/lefiNonDefault.cpp	/^lefiNonDefault::propIsNumber(int index) const$/;"	f	class:lefiNonDefault
propIsNumber	lef/lefiVia.cpp	/^lefiVia::propIsNumber(int index) const$/;"	f	class:lefiVia
propIsNumber	lef/lefiViaRule.cpp	/^lefiViaRule::propIsNumber(int i) const$/;"	f	class:lefiViaRule
propIsString	lef/lefiLayer.cpp	/^lefiLayer::propIsString(int i) const$/;"	f	class:lefiLayer
propIsString	lef/lefiMacro.cpp	/^lefiMacro::propIsString(int index) const$/;"	f	class:lefiMacro
propIsString	lef/lefiMacro.cpp	/^lefiPin::propIsString(int index) const$/;"	f	class:lefiPin
propIsString	lef/lefiNonDefault.cpp	/^lefiNonDefault::propIsString(int index) const$/;"	f	class:lefiNonDefault
propIsString	lef/lefiVia.cpp	/^lefiVia::propIsString(int index) const$/;"	f	class:lefiVia
propIsString	lef/lefiViaRule.cpp	/^lefiViaRule::propIsString(int i) const$/;"	f	class:lefiViaRule
propName	lef/lefiLayer.cpp	/^lefiLayer::propName(int i) const$/;"	f	class:lefiLayer
propName	lef/lefiMacro.cpp	/^lefiMacro::propName(int index) const$/;"	f	class:lefiMacro
propName	lef/lefiMacro.cpp	/^lefiPin::propName(int index) const$/;"	f	class:lefiPin
propName	lef/lefiNonDefault.cpp	/^lefiNonDefault::propName(int index) const$/;"	f	class:lefiNonDefault
propName	lef/lefiProp.cpp	/^lefiProp::propName() const$/;"	f	class:lefiProp
propName	lef/lefiVia.cpp	/^lefiVia::propName(int index) const$/;"	f	class:lefiVia
propName	lef/lefiViaRule.cpp	/^lefiViaRule::propName(int i) const$/;"	f	class:lefiViaRule
propName_	lef/lefiProp.hpp	/^  char* propName_;      \/\/ name.$/;"	m	class:lefiProp
propName_	lef/lefiVia.hpp	/^  char** propName_;$/;"	m	class:lefiVia
propNames_	lef/lefiMacro.hpp	/^  char** propNames_;$/;"	m	class:lefiMacro
propNames_	lef/lefiMacro.hpp	/^  char** propNames_;$/;"	m	class:lefiPin
propNames_	lef/lefiPropType.hpp	/^  char** propNames_;      \/\/ name.$/;"	m	class:lefiPropType
propNum	lef/lefiMacro.cpp	/^lefiMacro::propNum(int index) const$/;"	f	class:lefiMacro
propNum	lef/lefiMacro.cpp	/^lefiPin::propNum(int index) const$/;"	f	class:lefiPin
propNumber	lef/lefiLayer.cpp	/^lefiLayer::propNumber(int i) const$/;"	f	class:lefiLayer
propNumber	lef/lefiNonDefault.cpp	/^lefiNonDefault::propNumber(int index) const$/;"	f	class:lefiNonDefault
propNumber	lef/lefiVia.cpp	/^lefiVia::propNumber(int index) const$/;"	f	class:lefiVia
propNumber	lef/lefiViaRule.cpp	/^lefiViaRule::propNumber(int i) const$/;"	f	class:lefiViaRule
propNums_	lef/lefiMacro.hpp	/^  double* propNums_;$/;"	m	class:lefiMacro
propNums_	lef/lefiMacro.hpp	/^  double* propNums_;$/;"	m	class:lefiPin
propType	lef/lefiLayer.cpp	/^lefiLayer::propType(int i) const$/;"	f	class:lefiLayer
propType	lef/lefiMacro.cpp	/^lefiMacro::propType(int index) const$/;"	f	class:lefiMacro
propType	lef/lefiMacro.cpp	/^lefiPin::propType(int index) const$/;"	f	class:lefiPin
propType	lef/lefiNonDefault.cpp	/^lefiNonDefault::propType(int index) const$/;"	f	class:lefiNonDefault
propType	lef/lefiProp.cpp	/^lefiProp::propType() const$/;"	f	class:lefiProp
propType	lef/lefiPropType.cpp	/^lefiPropType::propType(char *name) const$/;"	f	class:lefiPropType
propType	lef/lefiVia.cpp	/^lefiVia::propType(int index) const$/;"	f	class:lefiVia
propType	lef/lefiViaRule.cpp	/^lefiViaRule::propType(int i) const$/;"	f	class:lefiViaRule
propType_	lef/lefiProp.hpp	/^  char* propType_;      \/\/ "design" "net" "macro" ...$/;"	m	class:lefiProp
propType_	lef/lefiVia.hpp	/^  char*   propType_;$/;"	m	class:lefiVia
propTypes_	lef/lefiMacro.hpp	/^  char*  propTypes_;$/;"	m	class:lefiMacro
propTypes_	lef/lefiMacro.hpp	/^  char*  propTypes_;$/;"	m	class:lefiPin
propTypes_	lef/lefiPropType.hpp	/^  char*  propTypes_;      \/\/ 'R' == "REAL", 'I' == "INTEGER"$/;"	m	class:lefiPropType
propValue	lef/lefiLayer.cpp	/^lefiLayer::propValue(int i) const$/;"	f	class:lefiLayer
propValue	lef/lefiMacro.cpp	/^lefiMacro::propValue(int index) const$/;"	f	class:lefiMacro
propValue	lef/lefiMacro.cpp	/^lefiPin::propValue(int index) const$/;"	f	class:lefiPin
propValue	lef/lefiNonDefault.cpp	/^lefiNonDefault::propValue(int index) const$/;"	f	class:lefiNonDefault
propValue	lef/lefiVia.cpp	/^lefiVia::propValue(int index) const$/;"	f	class:lefiVia
propValue	lef/lefiViaRule.cpp	/^lefiViaRule::propValue(int i) const$/;"	f	class:lefiViaRule
propValue_	lef/lefiVia.hpp	/^  char** propValue_;$/;"	m	class:lefiVia
propValues_	lef/lefiMacro.hpp	/^  char** propValues_;$/;"	m	class:lefiMacro
propValues_	lef/lefiMacro.hpp	/^  char** propValues_;$/;"	m	class:lefiPin
prop_def_section	lef/lef.y	/^prop_def_section: K_PROPDEF$/;"	l
prop_define	lef/lef.y	/^prop_define:$/;"	l
prop_stmt	lef/lef.y	/^prop_stmt:$/;"	l
prop_stmts	lef/lef.y	/^prop_stmts:$/;"	l
propertiesAllocated_	lef/lefiMacro.hpp	/^  int propertiesAllocated_;$/;"	m	class:lefiMacro
propertiesAllocated_	lef/lefiMacro.hpp	/^  int propertiesAllocated_;$/;"	m	class:lefiPin
propertiesAllocated_	lef/lefiPropType.hpp	/^  int    propertiesAllocated_;$/;"	m	class:lefiPropType
propsAllocated_	lef/lefiLayer.hpp	/^  int propsAllocated_;$/;"	m	class:lefiLayer
propsAllocated_	lef/lefiNonDefault.hpp	/^  int propsAllocated_;$/;"	m	class:lefiNonDefault
propsAllocated_	lef/lefiVia.hpp	/^  int propsAllocated_;$/;"	m	class:lefiVia
propsAllocated_	lef/lefiViaRule.hpp	/^  int propsAllocated_;$/;"	m	class:lefiViaRule
protrusionLength	lef/lefiLayer.cpp	/^lefiLayer::protrusionLength() const$/;"	f	class:lefiLayer
protrusionLength_	lef/lefiLayer.hpp	/^  double  protrusionLength_;                  \/\/ 5.5$/;"	m	class:lefiLayer
protrusionWidth1	lef/lefiLayer.cpp	/^lefiLayer::protrusionWidth1() const$/;"	f	class:lefiLayer
protrusionWidth1_	lef/lefiLayer.hpp	/^  double  protrusionWidth1_;                  \/\/ 5.5$/;"	m	class:lefiLayer
protrusionWidth2	lef/lefiLayer.cpp	/^lefiLayer::protrusionWidth2() const$/;"	f	class:lefiLayer
protrusionWidth2_	lef/lefiLayer.hpp	/^  double  protrusionWidth2_;                  \/\/ 5.5$/;"	m	class:lefiLayer
prtGeometry	lefdiff/diffLefRW.cpp	/^void prtGeometry(lefiGeometries* geometry, char* inName) {$/;"	f
prtGeometry	lefrw/lefrw.cpp	/^void prtGeometry(lefiGeometries *geometry) {$/;"	f
prtNewLine	lef/lefrData.hpp	/^    int  prtNewLine; \/\/ sometimes need to print a new line$/;"	m	class:lefrData
prtNewLine	lef/lefwWriter.cpp	/^static int prtNewLine = 0;  \/\/ sometimes need to print a new line$/;"	v	file:
prtSemiColon	lef/lefrData.hpp	/^    int  prtSemiColon; \/\/ sometimes ; is not printed yet$/;"	m	class:lefrData
prtSemiColon	lef/lefwWriter.cpp	/^static int prtSemiColon = 0;  \/\/ sometimes ; is not printed yet$/;"	v	file:
pt	lef/lef.y	/^pt:$/;"	l
pt	lef/lefiDefs.hpp	/^    lefPOINT pt;$/;"	m	struct:token
pulldownres	lef/lefiMacro.cpp	/^lefiPin::pulldownres() const$/;"	f	class:lefiPin
pulldownres_	lef/lefiMacro.hpp	/^  double pulldownres_;$/;"	m	class:lefiPin
pv_token	lef/lefrData.hpp	/^    char       *pv_token; $/;"	m	class:lefrData
px	lef/lefiMacro.cpp	/^lefiMacroForeign::px() const$/;"	f	class:lefiMacroForeign
px_	lef/lefiMacro.hpp	/^  double     px_;$/;"	m	class:lefiMacroForeign
py	lef/lefiMacro.cpp	/^lefiMacroForeign::py() const$/;"	f	class:lefiMacroForeign
py_	lef/lefiMacro.hpp	/^  double     py_;$/;"	m	class:lefiMacroForeign
qStrCopy	lef/lef_keywords.cpp	/^qStrCopy(char *string)$/;"	f
r_	lef/lefiLayer.hpp	/^  double* r_;$/;"	m	class:lefiAntennaPWL
rangeInfluenceRangeMax_	lef/lefiLayer.hpp	/^  double* rangeInfluenceRangeMax_;          \/\/ pcr 388183 & 408930$/;"	m	class:lefiLayer
rangeInfluenceRangeMin_	lef/lefiLayer.hpp	/^  double* rangeInfluenceRangeMin_;          \/\/ pcr 388183 & 408930$/;"	m	class:lefiLayer
rangeInfluence_	lef/lefiLayer.hpp	/^  double* rangeInfluence_;   \/\/ pcr 282799 & 408930, due to mult spacing allow$/;"	m	class:lefiLayer
rangeMax_	lef/lefiLayer.hpp	/^  double* rangeMax_;         \/\/ pcr 282799 & 408930, due to mult spacing allow$/;"	m	class:lefiLayer
rangeMin_	lef/lefiLayer.hpp	/^  double* rangeMin_;         \/\/ pcr 282799 & 408930, due to mult spacing allow$/;"	m	class:lefiLayer
rangeRangeMax_	lef/lefiLayer.hpp	/^  double* rangeRangeMax_;                   \/\/ pcr 408930$/;"	m	class:lefiLayer
rangeRangeMin_	lef/lefiLayer.hpp	/^  double* rangeRangeMin_;                   \/\/ pcr 408930$/;"	m	class:lefiLayer
reallocCB	lefrw/lefrw.cpp	/^void* reallocCB(void* name, int size) {$/;"	f
rect	lef/lefiDefs.hpp	/^struct rect {$/;"	s
rectColorMask	lef/lefiVia.cpp	/^lefiVia::rectColorMask(int  layerNum,$/;"	f	class:lefiVia
rectColorMask	lef/lefiVia.cpp	/^lefiViaLayer::rectColorMask(int index)$/;"	f	class:lefiViaLayer
rectColorMask_	lef/lefiVia.hpp	/^  int* rectColorMask_;$/;"	m	class:lefiViaLayer
rectsAllocated_	lef/lefiMacro.hpp	/^  int*   rectsAllocated_;$/;"	m	class:lefiDensity
rectsAllocated_	lef/lefiVia.hpp	/^  int rectsAllocated_;$/;"	m	class:lefiViaLayer
rects_	lef/lefiMacro.hpp	/^  struct lefiGeomRect** rects_;$/;"	m	class:lefiDensity	typeref:struct:lefiDensity::lefiGeomRect
relop	lef/lef.y	/^relop:$/;"	l
req_layer_name	lef/lef.y	/^req_layer_name:$/;"	l
resPerCut_	lef/lefiLayer.hpp	/^  double  resPerCut_;$/;"	m	class:lefiLayer
res_point	lef/lef.y	/^res_point: '(' int_number int_number ')'$/;"	l
res_points	lef/lef.y	/^res_points :$/;"	l
reset	lef/lefrCallbacks.cpp	/^lefrCallbacks::reset()$/;"	f	class:lefrCallbacks
reset	lef/lefrData.cpp	/^lefrData::reset()$/;"	f	class:lefrData
reset	lef/lefrSettings.cpp	/^lefrSettings::reset()$/;"	f	class:lefrSettings
resistance	lef/lefiCrossTalk.cpp	/^lefiCorrectionEdge::resistance(int index)$/;"	f	class:lefiCorrectionEdge
resistance	lef/lefiCrossTalk.cpp	/^lefiNoiseEdge::resistance(int index)$/;"	f	class:lefiNoiseEdge
resistance	lef/lefiLayer.cpp	/^lefiLayer::resistance() const$/;"	f	class:lefiLayer
resistance	lef/lefiMacro.cpp	/^lefiPin::resistance() const$/;"	f	class:lefiPin
resistance	lef/lefiUnits.cpp	/^lefiUnits::resistance() const$/;"	f	class:lefiUnits
resistance	lef/lefiVia.cpp	/^lefiVia::resistance() const$/;"	f	class:lefiVia
resistance	lef/lefiViaRule.cpp	/^lefiViaRuleLayer::resistance() const$/;"	f	class:lefiViaRuleLayer
resistanceArray	lef/lefiLayer.cpp	/^lefiLayer::resistanceArray(int      *numPoints,$/;"	f	class:lefiLayer
resistancePerCut	lef/lefiLayer.cpp	/^lefiLayer::resistancePerCut() const$/;"	f	class:lefiLayer
resistancePointsAllocated_	lef/lefiLayer.hpp	/^  int resistancePointsAllocated_;$/;"	m	class:lefiLayer
resistanceWidths_	lef/lefiLayer.hpp	/^  double* resistanceWidths_;$/;"	m	class:lefiLayer
resistance_	lef/lefiLayer.hpp	/^  double resistance_;$/;"	m	class:lefiLayer
resistance_	lef/lefiMacro.hpp	/^  double resistance_;$/;"	m	class:lefiPin
resistance_	lef/lefiNonDefault.hpp	/^  double* resistance_;$/;"	m	class:lefiNonDefault
resistance_	lef/lefiUnits.hpp	/^  double resistance_;$/;"	m	class:lefiUnits
resistance_	lef/lefiVia.hpp	/^  double resistance_;$/;"	m	class:lefiVia
resistance_	lef/lefiViaRule.hpp	/^  double resistance_;$/;"	m	class:lefiViaRuleLayer
resistancesAllocated_	lef/lefiCrossTalk.hpp	/^  int resistancesAllocated_;$/;"	m	class:lefiCorrectionEdge
resistancesAllocated_	lef/lefiCrossTalk.hpp	/^  int resistancesAllocated_;$/;"	m	class:lefiNoiseEdge
resistances_	lef/lefiCrossTalk.hpp	/^  lefiCorrectionResistance** resistances_;$/;"	m	class:lefiCorrectionEdge
resistances_	lef/lefiCrossTalk.hpp	/^  lefiNoiseResistance** resistances_;$/;"	m	class:lefiNoiseEdge
resistances_	lef/lefiLayer.hpp	/^  double* resistances_;$/;"	m	class:lefiLayer
right	lef/lefiProp.cpp	/^lefiProp::right() const$/;"	f	class:lefiProp
right_	lef/lefiProp.hpp	/^  double right_; \/\/ if it has a range the numbers are here.$/;"	m	class:lefiProp
ring	lef/lefrData.hpp	/^    char       *ring[RING_SIZE];$/;"	m	class:lefrData
ringCopy	lef/lef_keywords.cpp	/^ringCopy(const char *string)$/;"	f	file:
ringPlace	lef/lefrData.hpp	/^    int  ringPlace; $/;"	m	class:lefrData
ringSizes	lef/lefrData.hpp	/^    int         ringSizes[RING_SIZE];$/;"	m	class:lefrData
riseAtt1One	lef/lefiMacro.cpp	/^lefiTiming::riseAtt1One()$/;"	f	class:lefiTiming
riseAtt1One_	lef/lefiMacro.hpp	/^  double riseAtt1One_;$/;"	m	class:lefiTiming
riseAtt1Two	lef/lefiMacro.cpp	/^lefiTiming::riseAtt1Two()$/;"	f	class:lefiTiming
riseAtt1Two_	lef/lefiMacro.hpp	/^  double riseAtt1Two_;$/;"	m	class:lefiTiming
riseCSOne	lef/lefiMacro.cpp	/^lefiTiming::riseCSOne()$/;"	f	class:lefiTiming
riseCSOne_	lef/lefiMacro.hpp	/^  double riseCSOne_;$/;"	m	class:lefiTiming
riseCSTwo	lef/lefiMacro.cpp	/^lefiTiming::riseCSTwo()$/;"	f	class:lefiTiming
riseCSTwo_	lef/lefiMacro.hpp	/^  double riseCSTwo_;$/;"	m	class:lefiTiming
riseIntrinsicFour	lef/lefiMacro.cpp	/^lefiTiming::riseIntrinsicFour()$/;"	f	class:lefiTiming
riseIntrinsicFour_	lef/lefiMacro.hpp	/^  double riseIntrinsicFour_;$/;"	m	class:lefiTiming
riseIntrinsicOne	lef/lefiMacro.cpp	/^lefiTiming::riseIntrinsicOne()$/;"	f	class:lefiTiming
riseIntrinsicOne_	lef/lefiMacro.hpp	/^  double riseIntrinsicOne_;$/;"	m	class:lefiTiming
riseIntrinsicThree	lef/lefiMacro.cpp	/^lefiTiming::riseIntrinsicThree()$/;"	f	class:lefiTiming
riseIntrinsicThree_	lef/lefiMacro.hpp	/^  double riseIntrinsicThree_;$/;"	m	class:lefiTiming
riseIntrinsicTwo	lef/lefiMacro.cpp	/^lefiTiming::riseIntrinsicTwo()$/;"	f	class:lefiTiming
riseIntrinsicTwo_	lef/lefiMacro.hpp	/^  double riseIntrinsicTwo_;$/;"	m	class:lefiTiming
riseRSOne	lef/lefiMacro.cpp	/^lefiTiming::riseRSOne()$/;"	f	class:lefiTiming
riseRSOne_	lef/lefiMacro.hpp	/^  double riseRSOne_;$/;"	m	class:lefiTiming
riseRSTwo	lef/lefiMacro.cpp	/^lefiTiming::riseRSTwo()$/;"	f	class:lefiTiming
riseRSTwo_	lef/lefiMacro.hpp	/^  double riseRSTwo_;$/;"	m	class:lefiTiming
riseSatcur	lef/lefiMacro.cpp	/^lefiPin::riseSatcur() const$/;"	f	class:lefiPin
riseSatcur_	lef/lefiMacro.hpp	/^  double riseSatcur_;$/;"	m	class:lefiPin
riseSlewFive	lef/lefiMacro.cpp	/^lefiTiming::riseSlewFive()$/;"	f	class:lefiTiming
riseSlewFive_	lef/lefiMacro.hpp	/^  double riseSlewFive_;$/;"	m	class:lefiTiming
riseSlewFour	lef/lefiMacro.cpp	/^lefiTiming::riseSlewFour()$/;"	f	class:lefiTiming
riseSlewFour_	lef/lefiMacro.hpp	/^  double riseSlewFour_;$/;"	m	class:lefiTiming
riseSlewLimit	lef/lefiMacro.cpp	/^lefiPin::riseSlewLimit() const$/;"	f	class:lefiPin
riseSlewLimit_	lef/lefiMacro.hpp	/^  double riseSlewLimit_;$/;"	m	class:lefiPin
riseSlewOne	lef/lefiMacro.cpp	/^lefiTiming::riseSlewOne()$/;"	f	class:lefiTiming
riseSlewOne_	lef/lefiMacro.hpp	/^  double riseSlewOne_;$/;"	m	class:lefiTiming
riseSlewSeven	lef/lefiMacro.cpp	/^lefiTiming::riseSlewSeven()$/;"	f	class:lefiTiming
riseSlewSeven_	lef/lefiMacro.hpp	/^  double riseSlewSeven_;$/;"	m	class:lefiTiming
riseSlewSix	lef/lefiMacro.cpp	/^lefiTiming::riseSlewSix()$/;"	f	class:lefiTiming
riseSlewSix_	lef/lefiMacro.hpp	/^  double riseSlewSix_;$/;"	m	class:lefiTiming
riseSlewThree	lef/lefiMacro.cpp	/^lefiTiming::riseSlewThree()$/;"	f	class:lefiTiming
riseSlewThree_	lef/lefiMacro.hpp	/^  double riseSlewThree_;$/;"	m	class:lefiTiming
riseSlewTwo	lef/lefiMacro.cpp	/^lefiTiming::riseSlewTwo()$/;"	f	class:lefiTiming
riseSlewTwo_	lef/lefiMacro.hpp	/^  double riseSlewTwo_;$/;"	m	class:lefiTiming
riseThresh	lef/lefiMacro.cpp	/^lefiPin::riseThresh() const$/;"	f	class:lefiPin
riseThresh_	lef/lefiMacro.hpp	/^  double riseThresh_;$/;"	m	class:lefiPin
riseToOne	lef/lefiMacro.cpp	/^lefiTiming::riseToOne()$/;"	f	class:lefiTiming
riseToOne_	lef/lefiMacro.hpp	/^  double riseToOne_;$/;"	m	class:lefiTiming
riseToTwo	lef/lefiMacro.cpp	/^lefiTiming::riseToTwo()$/;"	f	class:lefiTiming
riseToTwo_	lef/lefiMacro.hpp	/^  double riseToTwo_;$/;"	m	class:lefiTiming
riseVoltage	lef/lefiMacro.cpp	/^lefiPin::riseVoltage() const$/;"	f	class:lefiPin
riseVoltage_	lef/lefiMacro.hpp	/^  double riseVoltage_;$/;"	m	class:lefiPin
risefall	lef/lef.y	/^risefall:$/;"	l
rowPatternAllocated_	lef/lefiMisc.hpp	/^  int    rowPatternAllocated_;$/;"	m	class:lefiSite
rule	lef/lef.y	/^rule:  version | busbitchars | case_sensitivity | units_section$/;"	l
rules	lef/lef.y	/^rules:$/;"	l
s_expr	lef/lef.y	/^s_expr:$/;"	l
samenet_keyword	lef/lef.y	/^samenet_keyword: K_SAMENET$/;"	l
set	lef/lefiMisc.cpp	/^lefiGcellPattern::set(const char    *name,$/;"	f	class:lefiGcellPattern
set	lef/lefiMisc.cpp	/^lefiMinFeature::set(double  one,$/;"	f	class:lefiMinFeature
set	lef/lefiMisc.cpp	/^lefiSitePattern::set(const char *name,$/;"	f	class:lefiSitePattern
set	lef/lefiMisc.cpp	/^lefiSpacing::set(const char *name1,$/;"	f	class:lefiSpacing
set	lef/lefiMisc.cpp	/^lefiTrackPattern::set(const char    *name,$/;"	f	class:lefiTrackPattern
set	lef/lefiMisc.cpp	/^lefiUseMinSpacing::set(const char   *name,$/;"	f	class:lefiUseMinSpacing
set90Symmetry	lef/lefiMacro.cpp	/^lefiMacro::set90Symmetry()$/;"	f	class:lefiMacro
set90Symmetry	lef/lefiMisc.cpp	/^lefiSite::set90Symmetry()$/;"	f	class:lefiSite
setAcOneEntry	lef/lefiLayer.cpp	/^lefiLayer::setAcOneEntry(double num)$/;"	f	class:lefiLayer
setAntennaArea	lef/lefiLayer.cpp	/^lefiLayer::setAntennaArea(double num)$/;"	f	class:lefiLayer
setAntennaAreaFactor	lef/lefiLayer.cpp	/^lefiAntennaModel::setAntennaAreaFactor(double value)$/;"	f	class:lefiAntennaModel
setAntennaAreaFactor	lef/lefiLayer.cpp	/^lefiLayer::setAntennaAreaFactor(double value)$/;"	f	class:lefiLayer
setAntennaAreaMinusDiff	lef/lefiLayer.cpp	/^lefiAntennaModel::setAntennaAreaMinusDiff(double value)$/;"	f	class:lefiAntennaModel
setAntennaAreaMinusDiff	lef/lefiLayer.cpp	/^lefiLayer::setAntennaAreaMinusDiff(double value)$/;"	f	class:lefiLayer
setAntennaAreaRatio	lef/lefiLayer.cpp	/^lefiAntennaModel::setAntennaAreaRatio(double value)$/;"	f	class:lefiAntennaModel
setAntennaAreaRatio	lef/lefiLayer.cpp	/^lefiLayer::setAntennaAreaRatio(double value)$/;"	f	class:lefiLayer
setAntennaCumAreaRatio	lef/lefiLayer.cpp	/^lefiAntennaModel::setAntennaCumAreaRatio(double value)$/;"	f	class:lefiAntennaModel
setAntennaCumAreaRatio	lef/lefiLayer.cpp	/^lefiLayer::setAntennaCumAreaRatio(double value)$/;"	f	class:lefiLayer
setAntennaCumRoutingPlusCut	lef/lefiLayer.cpp	/^lefiAntennaModel::setAntennaCumRoutingPlusCut()$/;"	f	class:lefiAntennaModel
setAntennaCumRoutingPlusCut	lef/lefiLayer.cpp	/^lefiLayer::setAntennaCumRoutingPlusCut()$/;"	f	class:lefiLayer
setAntennaCumSideAreaRatio	lef/lefiLayer.cpp	/^lefiAntennaModel::setAntennaCumSideAreaRatio(double value)$/;"	f	class:lefiAntennaModel
setAntennaCumSideAreaRatio	lef/lefiLayer.cpp	/^lefiLayer::setAntennaCumSideAreaRatio(double value)$/;"	f	class:lefiLayer
setAntennaDUO	lef/lefiLayer.cpp	/^lefiAntennaModel::setAntennaDUO(lefiAntennaEnum antennaType)$/;"	f	class:lefiAntennaModel
setAntennaDUO	lef/lefiLayer.cpp	/^lefiLayer::setAntennaDUO(lefiAntennaEnum antennaType)$/;"	f	class:lefiLayer
setAntennaGatePlusDiff	lef/lefiLayer.cpp	/^lefiAntennaModel::setAntennaGatePlusDiff(double value)$/;"	f	class:lefiAntennaModel
setAntennaGatePlusDiff	lef/lefiLayer.cpp	/^lefiLayer::setAntennaGatePlusDiff(double value)$/;"	f	class:lefiLayer
setAntennaLength	lef/lefiLayer.cpp	/^lefiLayer::setAntennaLength(double num)$/;"	f	class:lefiLayer
setAntennaModel	lef/lefiLayer.cpp	/^lefiAntennaModel::setAntennaModel(int aOxide)$/;"	f	class:lefiAntennaModel
setAntennaModel	lef/lefiMacro.cpp	/^lefiPinAntennaModel::setAntennaModel(int aOxide)$/;"	f	class:lefiPinAntennaModel
setAntennaPWL	lef/lefiLayer.cpp	/^lefiAntennaModel::setAntennaPWL(lefiAntennaEnum antennaType,$/;"	f	class:lefiAntennaModel
setAntennaPWL	lef/lefiLayer.cpp	/^lefiLayer::setAntennaPWL(lefiAntennaEnum    antennaType,$/;"	f	class:lefiLayer
setAntennaReturnFlag	lef/lefiMacro.cpp	/^lefiPinAntennaModel::setAntennaReturnFlag(int flag)$/;"	f	class:lefiPinAntennaModel
setAntennaSideAreaFactor	lef/lefiLayer.cpp	/^lefiAntennaModel::setAntennaSideAreaFactor(double value)$/;"	f	class:lefiAntennaModel
setAntennaSideAreaFactor	lef/lefiLayer.cpp	/^lefiLayer::setAntennaSideAreaFactor(double value)$/;"	f	class:lefiLayer
setAntennaSideAreaRatio	lef/lefiLayer.cpp	/^lefiAntennaModel::setAntennaSideAreaRatio(double value)$/;"	f	class:lefiAntennaModel
setAntennaSideAreaRatio	lef/lefiLayer.cpp	/^lefiLayer::setAntennaSideAreaRatio(double value)$/;"	f	class:lefiLayer
setAntennaValue	lef/lefiLayer.cpp	/^lefiAntennaModel::setAntennaValue(lefiAntennaEnum   antennaType,$/;"	f	class:lefiAntennaModel
setAntennaValue	lef/lefiLayer.cpp	/^lefiLayer::setAntennaValue(lefiAntennaEnum  antennaType,$/;"	f	class:lefiLayer
setArea	lef/lefiLayer.cpp	/^lefiLayer::setArea(double num)$/;"	f	class:lefiLayer
setArraySpacingCut	lef/lefiLayer.cpp	/^lefiLayer::setArraySpacingCut(double cutSpacing)$/;"	f	class:lefiLayer
setArraySpacingLongArray	lef/lefiLayer.cpp	/^lefiLayer::setArraySpacingLongArray()$/;"	f	class:lefiLayer
setArraySpacingWidth	lef/lefiLayer.cpp	/^lefiLayer::setArraySpacingWidth(double viaWidth)$/;"	f	class:lefiLayer
setBuffer	lef/lefiMacro.cpp	/^lefiMacro::setBuffer()$/;"	f	class:lefiMacro
setCapMultiplier	lef/lefiLayer.cpp	/^lefiLayer::setCapMultiplier(double num)$/;"	f	class:lefiLayer
setCapacitance	lef/lefiLayer.cpp	/^lefiLayer::setCapacitance(double num)$/;"	f	class:lefiLayer
setCapacitance	lef/lefiMacro.cpp	/^lefiPin::setCapacitance(double capacitance)$/;"	f	class:lefiPin
setCapacitance	lef/lefiUnits.cpp	/^lefiUnits::setCapacitance(double num)$/;"	f	class:lefiUnits
setCapacitancePoint	lef/lefiLayer.cpp	/^lefiLayer::setCapacitancePoint(double   width,$/;"	f	class:lefiLayer
setClass	lef/lefiMacro.cpp	/^lefiMacro::setClass(const char *name)$/;"	f	class:lefiMacro
setClass	lef/lefiMisc.cpp	/^lefiSite::setClass(const char *cls)$/;"	f	class:lefiSite
setClockType	lef/lefiMacro.cpp	/^lefiMacro::setClockType(const char *name)$/;"	f	class:lefiMacro
setCurrent	lef/lefiUnits.cpp	/^lefiUnits::setCurrent(double num)$/;"	f	class:lefiUnits
setCurrentDensity	lef/lefiLayer.cpp	/^lefiLayer::setCurrentDensity(double num)$/;"	f	class:lefiLayer
setCurrentPoint	lef/lefiLayer.cpp	/^lefiLayer::setCurrentPoint(double   width,$/;"	f	class:lefiLayer
setCurrentSource	lef/lefiMacro.cpp	/^lefiPin::setCurrentSource(const char *name)$/;"	f	class:lefiPin
setDatabase	lef/lefiUnits.cpp	/^lefiUnits::setDatabase(const char   *name,$/;"	f	class:lefiUnits
setDcOneEntry	lef/lefiLayer.cpp	/^lefiLayer::setDcOneEntry(double num)$/;"	f	class:lefiLayer
setDefault	lef/lefiViaRule.cpp	/^lefiViaRule::setDefault()$/;"	f	class:lefiViaRule
setDensityCheckStep	lef/lefiLayer.cpp	/^lefiLayer::setDensityCheckStep(double num)$/;"	f	class:lefiLayer
setDensityCheckWindow	lef/lefiLayer.cpp	/^lefiLayer::setDensityCheckWindow(double length,$/;"	f	class:lefiLayer
setDiagMinEdgeLength	lef/lefiLayer.cpp	/^lefiLayer::setDiagMinEdgeLength(double value)$/;"	f	class:lefiLayer
setDiagPitch	lef/lefiLayer.cpp	/^lefiLayer::setDiagPitch(double dist)$/;"	f	class:lefiLayer
setDiagPitchXY	lef/lefiLayer.cpp	/^lefiLayer::setDiagPitchXY(double    xdist,$/;"	f	class:lefiLayer
setDiagSpacing	lef/lefiLayer.cpp	/^lefiLayer::setDiagSpacing(double spacing)$/;"	f	class:lefiLayer
setDiagWidth	lef/lefiLayer.cpp	/^lefiLayer::setDiagWidth(double width)$/;"	f	class:lefiLayer
setDirection	lef/lefiLayer.cpp	/^lefiLayer::setDirection(const char *dir)$/;"	f	class:lefiLayer
setDirection	lef/lefiMacro.cpp	/^lefiPin::setDirection(const char *name)$/;"	f	class:lefiPin
setEEQ	lef/lefiMacro.cpp	/^lefiMacro::setEEQ(const char *name)$/;"	f	class:lefiMacro
setEdgeCap	lef/lefiLayer.cpp	/^lefiLayer::setEdgeCap(double num)$/;"	f	class:lefiLayer
setEnclosure	lef/lefiViaRule.cpp	/^lefiViaRule::setEnclosure(double    overhang1,$/;"	f	class:lefiViaRule
setEnclosure	lef/lefiViaRule.cpp	/^lefiViaRuleLayer::setEnclosure(double   overhang1,$/;"	f	class:lefiViaRuleLayer
setFallAtt1	lef/lefiMacro.cpp	/^lefiTiming::setFallAtt1(double  one,$/;"	f	class:lefiTiming
setFallCS	lef/lefiMacro.cpp	/^lefiTiming::setFallCS(double    one,$/;"	f	class:lefiTiming
setFallRS	lef/lefiMacro.cpp	/^lefiTiming::setFallRS(double    one,$/;"	f	class:lefiTiming
setFallSatcur	lef/lefiMacro.cpp	/^lefiPin::setFallSatcur(double current)$/;"	f	class:lefiPin
setFallSlewLimit	lef/lefiMacro.cpp	/^lefiPin::setFallSlewLimit(double num)$/;"	f	class:lefiPin
setFallThresh	lef/lefiMacro.cpp	/^lefiPin::setFallThresh(double capacitance)$/;"	f	class:lefiPin
setFallTo	lef/lefiMacro.cpp	/^lefiTiming::setFallTo(double    one,$/;"	f	class:lefiTiming
setFallVoltage	lef/lefiMacro.cpp	/^lefiPin::setFallVoltage(double voltage)$/;"	f	class:lefiPin
setFillActiveSpacing	lef/lefiLayer.cpp	/^lefiLayer::setFillActiveSpacing(double num)$/;"	f	class:lefiLayer
setFixedMask	lef/lefiMacro.cpp	/^lefiMacro::setFixedMask(int isFixedMask)$/;"	f	class:lefiMacro
setForeign	lef/lefiVia.cpp	/^lefiVia::setForeign(const char  *name,$/;"	f	class:lefiVia
setFrequency	lef/lefiUnits.cpp	/^lefiUnits::setFrequency(double num)$/;"	f	class:lefiUnits
setGenerate	lef/lefiMacro.cpp	/^lefiMacro::setGenerate(const char   *name,$/;"	f	class:lefiMacro
setGenerate	lef/lefiViaRule.cpp	/^lefiViaRule::setGenerate()$/;"	f	class:lefiViaRule
setGenerator	lef/lefiMacro.cpp	/^lefiMacro::setGenerator(const char *name)$/;"	f	class:lefiMacro
setGeometries	lef/lefiMacro.cpp	/^lefiObstruction::setGeometries(lefiGeometries *g)$/;"	f	class:lefiObstruction
setGroundSensitivity	lef/lefiMacro.cpp	/^lefiPin::setGroundSensitivity(const char *pinName)$/;"	f	class:lefiPin
setHardspacing	lef/lefiNonDefault.cpp	/^lefiNonDefault::setHardspacing()$/;"	f	class:lefiNonDefault
setHeight	lef/lefiLayer.cpp	/^lefiLayer::setHeight(double num)$/;"	f	class:lefiLayer
setHorizontal	lef/lefiViaRule.cpp	/^lefiViaRule::setHorizontal()$/;"	f	class:lefiViaRule
setHorizontal	lef/lefiViaRule.cpp	/^lefiViaRuleLayer::setHorizontal()$/;"	f	class:lefiViaRuleLayer
setInMargin	lef/lefiMacro.cpp	/^lefiPin::setInMargin(double high,$/;"	f	class:lefiPin
setInfluence	lef/lefiLayer.cpp	/^lefiLayer::setInfluence()$/;"	f	class:lefiLayer
setInfluence	lef/lefiLayer.cpp	/^lefiSpacingTable::setInfluence()$/;"	f	class:lefiSpacingTable
setInverter	lef/lefiMacro.cpp	/^lefiMacro::setInverter()$/;"	f	class:lefiMacro
setLEQ	lef/lefiMacro.cpp	/^lefiMacro::setLEQ(const char *name)$/;"	f	class:lefiMacro
setLEQ	lef/lefiMacro.cpp	/^lefiPin::setLEQ(const char *name)$/;"	f	class:lefiPin
setLayer	lef/lefiViaRule.cpp	/^lefiViaRule::setLayer(const char *name)$/;"	f	class:lefiViaRule
setLayerType	lef/lefiLayer.cpp	/^lefiLayer::setLayerType(const char *layerType)$/;"	f	class:lefiLayer
setLeakage	lef/lefiMacro.cpp	/^lefiPin::setLeakage(double current)$/;"	f	class:lefiPin
setMask	lef/lefiLayer.cpp	/^lefiLayer::setMask(int num)$/;"	f	class:lefiLayer
setMaxAdjacentSlotSpacing	lef/lefiLayer.cpp	/^lefiLayer::setMaxAdjacentSlotSpacing(double num)$/;"	f	class:lefiLayer
setMaxCoaxialSlotSpacing	lef/lefiLayer.cpp	/^lefiLayer::setMaxCoaxialSlotSpacing(double num)$/;"	f	class:lefiLayer
setMaxEdgeSlotSpacing	lef/lefiLayer.cpp	/^lefiLayer::setMaxEdgeSlotSpacing(double num)$/;"	f	class:lefiLayer
setMaxFloatingArea	lef/lefiLayer.cpp	/^lefiLayer::setMaxFloatingArea(double num)$/;"	f	class:lefiLayer
setMaxStackVia	lef/lefiMisc.cpp	/^lefiMaxStackVia::setMaxStackVia(int value)$/;"	f	class:lefiMaxStackVia
setMaxStackViaRange	lef/lefiMisc.cpp	/^lefiMaxStackVia::setMaxStackViaRange(const char *bottomLayer,$/;"	f	class:lefiMaxStackVia
setMaxdelay	lef/lefiMacro.cpp	/^lefiPin::setMaxdelay(double dtime)$/;"	f	class:lefiPin
setMaximumDensity	lef/lefiLayer.cpp	/^lefiLayer::setMaximumDensity(double num)$/;"	f	class:lefiLayer
setMaxload	lef/lefiMacro.cpp	/^lefiPin::setMaxload(double capacitance)$/;"	f	class:lefiPin
setMaxwidth	lef/lefiLayer.cpp	/^lefiLayer::setMaxwidth(double width)$/;"	f	class:lefiLayer
setMetalOverhang	lef/lefiViaRule.cpp	/^lefiViaRule::setMetalOverhang(double d)$/;"	f	class:lefiViaRule
setMetalOverhang	lef/lefiViaRule.cpp	/^lefiViaRuleLayer::setMetalOverhang(double d)$/;"	f	class:lefiViaRuleLayer
setMinSize	lef/lefiLayer.cpp	/^lefiLayer::setMinSize(lefiGeometries *geom)$/;"	f	class:lefiLayer
setMinimumDensity	lef/lefiLayer.cpp	/^lefiLayer::setMinimumDensity(double num)$/;"	f	class:lefiLayer
setMinwidth	lef/lefiLayer.cpp	/^lefiLayer::setMinwidth(double width)$/;"	f	class:lefiLayer
setMustjoin	lef/lefiMacro.cpp	/^lefiPin::setMustjoin(const char *name)$/;"	f	class:lefiPin
setName	lef/lefiArray.cpp	/^lefiArray::setName(const char *name)$/;"	f	class:lefiArray
setName	lef/lefiLayer.cpp	/^lefiLayer::setName(const char *name)$/;"	f	class:lefiLayer
setName	lef/lefiMacro.cpp	/^lefiMacro::setName(const char *name)$/;"	f	class:lefiMacro
setName	lef/lefiMacro.cpp	/^lefiPin::setName(const char *name)$/;"	f	class:lefiPin
setName	lef/lefiMisc.cpp	/^lefiSite::setName(const char *name)$/;"	f	class:lefiSite
setName	lef/lefiNonDefault.cpp	/^lefiNonDefault::setName(const char *name)$/;"	f	class:lefiNonDefault
setName	lef/lefiVia.cpp	/^lefiVia::setName(const char *name,$/;"	f	class:lefiVia
setName	lef/lefiVia.cpp	/^lefiViaLayer::setName(const char *name)$/;"	f	class:lefiViaLayer
setName	lef/lefiViaRule.cpp	/^lefiViaRule::setName(const char *name)$/;"	f	class:lefiViaRule
setName	lef/lefiViaRule.cpp	/^lefiViaRuleLayer::setName(const char *name)$/;"	f	class:lefiViaRuleLayer
setNetExpr	lef/lefiMacro.cpp	/^lefiPin::setNetExpr(const char *name)$/;"	f	class:lefiPin
setNumProperty	lef/lefiMacro.cpp	/^lefiMacro::setNumProperty(const char    *name,$/;"	f	class:lefiMacro
setNumProperty	lef/lefiMacro.cpp	/^lefiPin::setNumProperty(const char  *name,$/;"	f	class:lefiPin
setNumber	lef/lefiProp.cpp	/^lefiProp::setNumber(double d)$/;"	f	class:lefiProp
setOffset	lef/lefiLayer.cpp	/^lefiLayer::setOffset(double num)$/;"	f	class:lefiLayer
setOffset	lef/lefiVia.cpp	/^lefiVia::setOffset(double   xBot,$/;"	f	class:lefiVia
setOffsetXY	lef/lefiLayer.cpp	/^lefiLayer::setOffsetXY(double   xdist,$/;"	f	class:lefiLayer
setOneEntry	lef/lefiLayer.cpp	/^lefiLayerDensity::setOneEntry(double entry)$/;"	f	class:lefiLayerDensity
setOrigin	lef/lefiMacro.cpp	/^lefiMacro::setOrigin(double x,$/;"	f	class:lefiMacro
setOrigin	lef/lefiVia.cpp	/^lefiVia::setOrigin(double   xOffset,$/;"	f	class:lefiVia
setOutMargin	lef/lefiMacro.cpp	/^lefiPin::setOutMargin(double    high,$/;"	f	class:lefiPin
setOutResistance	lef/lefiMacro.cpp	/^lefiPin::setOutResistance(double    high,$/;"	f	class:lefiPin
setOverhang	lef/lefiViaRule.cpp	/^lefiViaRule::setOverhang(double d)$/;"	f	class:lefiViaRule
setOverhang	lef/lefiViaRule.cpp	/^lefiViaRuleLayer::setOverhang(double d)$/;"	f	class:lefiViaRuleLayer
setOverhangToEnclosure	lef/lefiViaRule.cpp	/^lefiViaRule::setOverhangToEnclosure(double d)$/;"	f	class:lefiViaRule
setOverhangToEnclosure	lef/lefiViaRule.cpp	/^lefiViaRuleLayer::setOverhangToEnclosure(double d)$/;"	f	class:lefiViaRuleLayer
setPattern	lef/lefiVia.cpp	/^lefiVia::setPattern(const char *cutPattern)$/;"	f	class:lefiVia
setPitch	lef/lefiLayer.cpp	/^lefiLayer::setPitch(double num)$/;"	f	class:lefiLayer
setPitchXY	lef/lefiLayer.cpp	/^lefiLayer::setPitchXY(double    xdist,$/;"	f	class:lefiLayer
setPower	lef/lefiMacro.cpp	/^lefiMacro::setPower(double p)$/;"	f	class:lefiMacro
setPower	lef/lefiMacro.cpp	/^lefiPin::setPower(double power)$/;"	f	class:lefiPin
setPower	lef/lefiUnits.cpp	/^lefiUnits::setPower(double num)$/;"	f	class:lefiUnits
setPropInteger	lef/lefiProp.cpp	/^lefiProp::setPropInteger()$/;"	f	class:lefiProp
setPropNameMapString	lef/lefiProp.cpp	/^lefiProp::setPropNameMapString(const char *string)$/;"	f	class:lefiProp
setPropQString	lef/lefiProp.cpp	/^lefiProp::setPropQString(const char *string)$/;"	f	class:lefiProp
setPropReal	lef/lefiProp.cpp	/^lefiProp::setPropReal()$/;"	f	class:lefiProp
setPropString	lef/lefiProp.cpp	/^lefiProp::setPropString()$/;"	f	class:lefiProp
setPropType	lef/lefiProp.cpp	/^lefiProp::setPropType(const char    *typ,$/;"	f	class:lefiProp
setPropType	lef/lefiPropType.cpp	/^lefiPropType::setPropType(const char    *name,$/;"	f	class:lefiPropType
setProperty	lef/lefiMacro.cpp	/^lefiMacro::setProperty(const char   *name,$/;"	f	class:lefiMacro
setProperty	lef/lefiMacro.cpp	/^lefiPin::setProperty(const char *name,$/;"	f	class:lefiPin
setProtrusion	lef/lefiLayer.cpp	/^lefiLayer::setProtrusion(double width1,$/;"	f	class:lefiLayer
setPulldownres	lef/lefiMacro.cpp	/^lefiPin::setPulldownres(double resistance)$/;"	f	class:lefiPin
setRange	lef/lefiProp.cpp	/^lefiProp::setRange(double   left,$/;"	f	class:lefiProp
setRect	lef/lefiViaRule.cpp	/^lefiViaRule::setRect(double xl,$/;"	f	class:lefiViaRule
setRect	lef/lefiViaRule.cpp	/^lefiViaRuleLayer::setRect(double    xl,$/;"	f	class:lefiViaRuleLayer
setResPerCut	lef/lefiLayer.cpp	/^lefiLayer::setResPerCut(double value)$/;"	f	class:lefiLayer
setResistance	lef/lefiLayer.cpp	/^lefiLayer::setResistance(double num)$/;"	f	class:lefiLayer
setResistance	lef/lefiMacro.cpp	/^lefiPin::setResistance(double resistance)$/;"	f	class:lefiPin
setResistance	lef/lefiUnits.cpp	/^lefiUnits::setResistance(double num)$/;"	f	class:lefiUnits
setResistance	lef/lefiVia.cpp	/^lefiVia::setResistance(double num)$/;"	f	class:lefiVia
setResistance	lef/lefiViaRule.cpp	/^lefiViaRule::setResistance(double d)$/;"	f	class:lefiViaRule
setResistance	lef/lefiViaRule.cpp	/^lefiViaRuleLayer::setResistance(double d)$/;"	f	class:lefiViaRuleLayer
setResistancePoint	lef/lefiLayer.cpp	/^lefiLayer::setResistancePoint(double    width,$/;"	f	class:lefiLayer
setRiseAtt1	lef/lefiMacro.cpp	/^lefiTiming::setRiseAtt1(double  one,$/;"	f	class:lefiTiming
setRiseCS	lef/lefiMacro.cpp	/^lefiTiming::setRiseCS(double    one,$/;"	f	class:lefiTiming
setRiseRS	lef/lefiMacro.cpp	/^lefiTiming::setRiseRS(double    one,$/;"	f	class:lefiTiming
setRiseSatcur	lef/lefiMacro.cpp	/^lefiPin::setRiseSatcur(double current)$/;"	f	class:lefiPin
setRiseSlewLimit	lef/lefiMacro.cpp	/^lefiPin::setRiseSlewLimit(double num)$/;"	f	class:lefiPin
setRiseThresh	lef/lefiMacro.cpp	/^lefiPin::setRiseThresh(double capacitance)$/;"	f	class:lefiPin
setRiseTo	lef/lefiMacro.cpp	/^lefiTiming::setRiseTo(double    one,$/;"	f	class:lefiTiming
setRiseVoltage	lef/lefiMacro.cpp	/^lefiPin::setRiseVoltage(double voltage)$/;"	f	class:lefiPin
setRowCol	lef/lefiVia.cpp	/^lefiVia::setRowCol(int  numRows,$/;"	f	class:lefiVia
setSDFcond	lef/lefiMacro.cpp	/^lefiTiming::setSDFcond(const char *cond)$/;"	f	class:lefiTiming
setSDFcondEnd	lef/lefiMacro.cpp	/^lefiTiming::setSDFcondEnd(const char *condEnd)$/;"	f	class:lefiTiming
setSDFcondStart	lef/lefiMacro.cpp	/^lefiTiming::setSDFcondStart(const char *condStart)$/;"	f	class:lefiTiming
setShape	lef/lefiMacro.cpp	/^lefiPin::setShape(const char *name)$/;"	f	class:lefiPin
setShrinkage	lef/lefiLayer.cpp	/^lefiLayer::setShrinkage(double num)$/;"	f	class:lefiLayer
setSiteName	lef/lefiMacro.cpp	/^lefiMacro::setSiteName(const char *name)$/;"	f	class:lefiMacro
setSitePattern	lef/lefiMacro.cpp	/^lefiMacro::setSitePattern(lefiSitePattern *p)$/;"	f	class:lefiMacro
setSize	lef/lefiMacro.cpp	/^lefiMacro::setSize(double   x,$/;"	f	class:lefiMacro
setSize	lef/lefiMisc.cpp	/^lefiSite::setSize(double    x,$/;"	f	class:lefiSite
setSlotLength	lef/lefiLayer.cpp	/^lefiLayer::setSlotLength(double num)$/;"	f	class:lefiLayer
setSlotWidth	lef/lefiLayer.cpp	/^lefiLayer::setSlotWidth(double num)$/;"	f	class:lefiLayer
setSlotWireLength	lef/lefiLayer.cpp	/^lefiLayer::setSlotWireLength(double num)$/;"	f	class:lefiLayer
setSlotWireWidth	lef/lefiLayer.cpp	/^lefiLayer::setSlotWireWidth(double num)$/;"	f	class:lefiLayer
setSource	lef/lefiMacro.cpp	/^lefiMacro::setSource(const char *name)$/;"	f	class:lefiMacro
setSpTwoWidthsHasPRL	lef/lefiLayer.cpp	/^lefiLayer::setSpTwoWidthsHasPRL(int hasPRL)$/;"	f	class:lefiLayer
setSpacing	lef/lefiViaRule.cpp	/^lefiViaRule::setSpacing(double  x,$/;"	f	class:lefiViaRule
setSpacing	lef/lefiViaRule.cpp	/^lefiViaRuleLayer::setSpacing(double x,$/;"	f	class:lefiViaRuleLayer
setSpacingAdjacent	lef/lefiLayer.cpp	/^lefiLayer::setSpacingAdjacent(int       numCuts,$/;"	f	class:lefiLayer
setSpacingAdjacentExcept	lef/lefiLayer.cpp	/^lefiLayer::setSpacingAdjacentExcept()$/;"	f	class:lefiLayer
setSpacingArea	lef/lefiLayer.cpp	/^lefiLayer::setSpacingArea(double cutArea)$/;"	f	class:lefiLayer
setSpacingCenterToCenter	lef/lefiLayer.cpp	/^lefiLayer::setSpacingCenterToCenter()$/;"	f	class:lefiLayer
setSpacingEndOfNotchWidth	lef/lefiLayer.cpp	/^lefiLayer::setSpacingEndOfNotchWidth(double eonWidth,$/;"	f	class:lefiLayer
setSpacingEol	lef/lefiLayer.cpp	/^lefiLayer::setSpacingEol(double width,$/;"	f	class:lefiLayer
setSpacingLayerStack	lef/lefiLayer.cpp	/^lefiLayer::setSpacingLayerStack()$/;"	f	class:lefiLayer
setSpacingLength	lef/lefiLayer.cpp	/^lefiLayer::setSpacingLength(double num)$/;"	f	class:lefiLayer
setSpacingLengthRange	lef/lefiLayer.cpp	/^lefiLayer::setSpacingLengthRange(double min,$/;"	f	class:lefiLayer
setSpacingMin	lef/lefiLayer.cpp	/^lefiLayer::setSpacingMin(double dist)$/;"	f	class:lefiLayer
setSpacingName	lef/lefiLayer.cpp	/^lefiLayer::setSpacingName(const char *spacingName)$/;"	f	class:lefiLayer
setSpacingNotchLength	lef/lefiLayer.cpp	/^lefiLayer::setSpacingNotchLength(double notchLength)$/;"	f	class:lefiLayer
setSpacingParSW	lef/lefiLayer.cpp	/^lefiLayer::setSpacingParSW(double   space,$/;"	f	class:lefiLayer
setSpacingParTwoEdges	lef/lefiLayer.cpp	/^lefiLayer::setSpacingParTwoEdges()$/;"	f	class:lefiLayer
setSpacingParallelOverlap	lef/lefiLayer.cpp	/^lefiLayer::setSpacingParallelOverlap()$/;"	f	class:lefiLayer
setSpacingRange	lef/lefiLayer.cpp	/^lefiLayer::setSpacingRange(double   left,$/;"	f	class:lefiLayer
setSpacingRangeInfluence	lef/lefiLayer.cpp	/^lefiLayer::setSpacingRangeInfluence(double infLength)$/;"	f	class:lefiLayer
setSpacingRangeInfluenceRange	lef/lefiLayer.cpp	/^lefiLayer::setSpacingRangeInfluenceRange(double min,$/;"	f	class:lefiLayer
setSpacingRangeRange	lef/lefiLayer.cpp	/^lefiLayer::setSpacingRangeRange(double  min,$/;"	f	class:lefiLayer
setSpacingRangeUseLength	lef/lefiLayer.cpp	/^lefiLayer::setSpacingRangeUseLength()$/;"	f	class:lefiLayer
setSpacingSamenet	lef/lefiLayer.cpp	/^lefiLayer::setSpacingSamenet()$/;"	f	class:lefiLayer
setSpacingSamenetPGonly	lef/lefiLayer.cpp	/^lefiLayer::setSpacingSamenetPGonly()$/;"	f	class:lefiLayer
setSpacingTableOrtho	lef/lefiLayer.cpp	/^lefiLayer::setSpacingTableOrtho()$/;"	f	class:lefiLayer
setSplitWireWidth	lef/lefiLayer.cpp	/^lefiLayer::setSplitWireWidth(double num)$/;"	f	class:lefiLayer
setStable	lef/lefiMacro.cpp	/^lefiTiming::setStable(double        one,$/;"	f	class:lefiTiming
setSupplySensitivity	lef/lefiMacro.cpp	/^lefiPin::setSupplySensitivity(const char *pinName)$/;"	f	class:lefiPin
setTableName	lef/lefiMisc.cpp	/^lefiIRDrop::setTableName(const char *name)$/;"	f	class:lefiIRDrop
setTableSize	lef/lefiArray.cpp	/^lefiArray::setTableSize(int tsize)$/;"	f	class:lefiArray
setTables	lef/lefiMacro.cpp	/^lefiPin::setTables(const char   *highName,$/;"	f	class:lefiPin
setTaperRule	lef/lefiMacro.cpp	/^lefiPin::setTaperRule(const char *name)$/;"	f	class:lefiPin
setThickness	lef/lefiLayer.cpp	/^lefiLayer::setThickness(double num)$/;"	f	class:lefiLayer
setTieoffr	lef/lefiMacro.cpp	/^lefiPin::setTieoffr(double resistance)$/;"	f	class:lefiPin
setTime	lef/lefiUnits.cpp	/^lefiUnits::setTime(double num)$/;"	f	class:lefiUnits
setTopOfStack	lef/lefiVia.cpp	/^lefiVia::setTopOfStack()$/;"	f	class:lefiVia
setType	lef/lefiLayer.cpp	/^lefiLayer::setType(const char *typ)$/;"	f	class:lefiLayer
setUse	lef/lefiMacro.cpp	/^lefiPin::setUse(const char *name)$/;"	f	class:lefiPin
setVHI	lef/lefiMacro.cpp	/^lefiPin::setVHI(double voltage)$/;"	f	class:lefiPin
setVLO	lef/lefiMacro.cpp	/^lefiPin::setVLO(double voltage)$/;"	f	class:lefiPin
setValues	lef/lefiMisc.cpp	/^lefiIRDrop::setValues(double    value1,$/;"	f	class:lefiIRDrop
setVertical	lef/lefiViaRule.cpp	/^lefiViaRule::setVertical()$/;"	f	class:lefiViaRule
setVertical	lef/lefiViaRule.cpp	/^lefiViaRuleLayer::setVertical()$/;"	f	class:lefiViaRuleLayer
setViaRule	lef/lefiVia.cpp	/^lefiVia::setViaRule(const char  *viaRuleName,$/;"	f	class:lefiVia
setVoltage	lef/lefiUnits.cpp	/^lefiUnits::setVoltage(double num)$/;"	f	class:lefiUnits
setWidth	lef/lefiLayer.cpp	/^lefiLayer::setWidth(double num)$/;"	f	class:lefiLayer
setWidth	lef/lefiViaRule.cpp	/^lefiViaRule::setWidth(double    x,$/;"	f	class:lefiViaRule
setWidth	lef/lefiViaRule.cpp	/^lefiViaRuleLayer::setWidth(double   minW,$/;"	f	class:lefiViaRuleLayer
setWireExtension	lef/lefiLayer.cpp	/^lefiLayer::setWireExtension(double num)$/;"	f	class:lefiLayer
setXSymmetry	lef/lefiMacro.cpp	/^lefiMacro::setXSymmetry()$/;"	f	class:lefiMacro
setXSymmetry	lef/lefiMisc.cpp	/^lefiSite::setXSymmetry()$/;"	f	class:lefiSite
setYSymmetry	lef/lefiMacro.cpp	/^lefiMacro::setYSymmetry()$/;"	f	class:lefiMacro
setYSymmetry	lef/lefiMisc.cpp	/^lefiSite::setYSymmetry()$/;"	f	class:lefiSite
setup	lef/lefiCrossTalk.cpp	/^lefiCorrectionTable::setup(int i)$/;"	f	class:lefiCorrectionTable
setup	lef/lefiCrossTalk.cpp	/^lefiNoiseTable::setup(int i)$/;"	f	class:lefiNoiseTable
shape	lef/lefiMacro.cpp	/^lefiPin::shape() const$/;"	f	class:lefiPin
shape_	lef/lefiMacro.hpp	/^  char shape_[12];$/;"	m	class:lefiPin
shiftBuf	lef/lefrData.hpp	/^    char*  shiftBuf; $/;"	m	class:lefrData
shiftBufLength	lef/lefrData.hpp	/^    int  shiftBufLength; $/;"	m	class:lefrData
shrinkage	lef/lefiLayer.cpp	/^lefiLayer::shrinkage() const$/;"	f	class:lefiLayer
shrinkage_	lef/lefiLayer.hpp	/^  double shrinkage_;$/;"	m	class:lefiLayer
site	lef/lef.y	/^site: start_site site_options end_site$/;"	l
site	lef/lefiArray.cpp	/^lefiArray::site(int index,$/;"	f	class:lefiArray
siteCB	lefdiff/diffLefRW.cpp	/^int siteCB(lefrCallbackType_e c, lefiSite* site, lefiUserData ud) {$/;"	f
siteCB	lefrw/lefrw.cpp	/^int siteCB(lefrCallbackType_e c, lefiSite* site, lefiUserData) {$/;"	f
siteCB	lefwrite/lefwriteCbs.cpp	/^int siteCB(lefwCallbackType_e c, lefiUserData ud) {$/;"	f
siteClass	lef/lefiMisc.cpp	/^lefiSite::siteClass() const$/;"	f	class:lefiSite
siteClass_	lef/lefiMisc.hpp	/^  char   siteClass_[8];$/;"	m	class:lefiSite
siteDef	lef/lefrData.hpp	/^    int  siteDef; $/;"	m	class:lefrData
siteName	lef/lefiMacro.cpp	/^lefiMacro::siteName() const$/;"	f	class:lefiMacro
siteName	lef/lefiMacro.cpp	/^lefiMacroSite::siteName() const$/;"	f	class:lefiMacroSite
siteName	lef/lefiMisc.cpp	/^lefiSite::siteName(int index) const$/;"	f	class:lefiSite
siteName	lef/lefrData.hpp	/^    char*  siteName; $/;"	m	class:lefrData
siteNameSize_	lef/lefiMacro.hpp	/^  int siteNameSize_;$/;"	m	class:lefiMacro
siteName_	lef/lefiMacro.hpp	/^  char* siteName_;$/;"	m	class:lefiMacro
siteName_	lef/lefiMacro.hpp	/^  const char            *siteName_;$/;"	m	class:lefiMacroSite
siteNames_	lef/lefiMisc.hpp	/^  char** siteNames_;$/;"	m	class:lefiSite
siteOrient	lef/lefiMisc.cpp	/^lefiSite::siteOrient(int index) const$/;"	f	class:lefiSite
siteOrientStr	lef/lefiMisc.cpp	/^lefiSite::siteOrientStr(int index) const$/;"	f	class:lefiSite
siteOrients_	lef/lefiMisc.hpp	/^  int*   siteOrients_;$/;"	m	class:lefiSite
sitePattern	lef/lef.y	/^sitePattern: T_STRING int_number int_number orientation$/;"	l
sitePattern	lef/lefiArray.cpp	/^lefiArray::sitePattern(int index) const$/;"	f	class:lefiArray
sitePattern	lef/lefiMacro.cpp	/^lefiMacro::sitePattern(int index) const$/;"	f	class:lefiMacro
sitePattern	lef/lefiMacro.cpp	/^lefiMacroSite::sitePattern() const$/;"	f	class:lefiMacroSite
sitePattern_	lef/lefiMacro.hpp	/^  const lefiSitePattern *sitePattern_;$/;"	m	class:lefiMacroSite
siteType	lef/lefiArray.cpp	/^lefiArray::siteType(int index,$/;"	f	class:lefiArray
siteWarnings	lef/lefrData.hpp	/^    int  siteWarnings; $/;"	m	class:lefrData
site_class	lef/lef.y	/^site_class:$/;"	l
site_option	lef/lef.y	/^site_option:$/;"	l
site_options	lef/lef.y	/^site_options:$/;"	l
site_rowpattern	lef/lef.y	/^site_rowpattern: T_STRING orientation {lefData->lefDumbMode = 1; lefData->lefNoNum = 1;}$/;"	l
site_rowpattern_statement	lef/lef.y	/^site_rowpattern_statement: K_ROWPATTERN {lefData->lefDumbMode = 1; lefData->lefNoNum = 1;}$/;"	l
site_rowpatterns	lef/lef.y	/^site_rowpatterns:$/;"	l
site_symmetries	lef/lef.y	/^site_symmetries:$/;"	l
site_symmetry	lef/lef.y	/^site_symmetry:$/;"	l
site_symmetry_statement	lef/lef.y	/^site_symmetry_statement: K_SYMMETRY site_symmetries ';'$/;"	l
site_word	lef/lef.y	/^site_word: K_SITE$/;"	l
sitesAllocated_	lef/lefiMacro.hpp	/^  int sitesAllocated_;$/;"	m	class:lefiMacro
sizeDef	lef/lefrData.hpp	/^    int  sizeDef; $/;"	m	class:lefrData
sizeX	lef/lefiMacro.cpp	/^lefiMacro::sizeX() const$/;"	f	class:lefiMacro
sizeX	lef/lefiMisc.cpp	/^lefiSite::sizeX() const$/;"	f	class:lefiSite
sizeX_	lef/lefiMacro.hpp	/^  double sizeX_;$/;"	m	class:lefiMacro
sizeX_	lef/lefiMisc.hpp	/^  double sizeX_;$/;"	m	class:lefiSite
sizeY	lef/lefiMacro.cpp	/^lefiMacro::sizeY() const$/;"	f	class:lefiMacro
sizeY	lef/lefiMisc.cpp	/^lefiSite::sizeY() const$/;"	f	class:lefiSite
sizeY_	lef/lefiMacro.hpp	/^  double sizeY_;$/;"	m	class:lefiMacro
sizeY_	lef/lefiMisc.hpp	/^  double sizeY_;$/;"	m	class:lefiSite
slew_spec	lef/lef.y	/^slew_spec:$/;"	l
slotLength	lef/lefiLayer.cpp	/^lefiLayer::slotLength() const$/;"	f	class:lefiLayer
slotLength_	lef/lefiLayer.hpp	/^  double slotLength_; $/;"	m	class:lefiLayer
slotWidth	lef/lefiLayer.cpp	/^lefiLayer::slotWidth() const$/;"	f	class:lefiLayer
slotWidth_	lef/lefiLayer.hpp	/^  double slotWidth_; $/;"	m	class:lefiLayer
slotWireLength	lef/lefiLayer.cpp	/^lefiLayer::slotWireLength() const$/;"	f	class:lefiLayer
slotWireLength_	lef/lefiLayer.hpp	/^  double slotWireLength_; $/;"	m	class:lefiLayer
slotWireWidth	lef/lefiLayer.cpp	/^lefiLayer::slotWireWidth() const$/;"	f	class:lefiLayer
slotWireWidth_	lef/lefiLayer.hpp	/^  double slotWireWidth_; $/;"	m	class:lefiLayer
source	lef/lefiMacro.cpp	/^lefiMacro::source() const$/;"	f	class:lefiMacro
source_	lef/lefiMacro.hpp	/^  char source_[12];$/;"	m	class:lefiMacro
spParallelLength	lef/lefrData.hpp	/^    int  spParallelLength; $/;"	m	class:lefrData
sp_options	lef/lef.y	/^sp_options:$/;"	l
space	lef/lefiMisc.cpp	/^lefiGcellPattern::space() const$/;"	f	class:lefiGcellPattern
space	lef/lefiMisc.cpp	/^lefiTrackPattern::space() const$/;"	f	class:lefiTrackPattern
spaceMissing	lef/lefrData.hpp	/^    int  spaceMissing; $/;"	m	class:lefrData
space_	lef/lefiMisc.hpp	/^  double space_;$/;"	m	class:lefiGcellPattern
space_	lef/lefiMisc.hpp	/^  double space_;$/;"	m	class:lefiTrackPattern
spacing	lef/lef.y	/^spacing:  samenet_keyword T_STRING T_STRING int_number ';'$/;"	l
spacing	lef/lefiLayer.cpp	/^lefiInfluence::spacing(int index) const$/;"	f	class:lefiInfluence
spacing	lef/lefiLayer.cpp	/^lefiLayer::spacing(int index) const$/;"	f	class:lefiLayer
spacingAdjacentCuts	lef/lefiLayer.cpp	/^lefiLayer::spacingAdjacentCuts(int index) const$/;"	f	class:lefiLayer
spacingAdjacentCuts_	lef/lefiLayer.hpp	/^  int*    spacingAdjacentCuts_;    \/\/ 5.5$/;"	m	class:lefiLayer
spacingAdjacentWithin	lef/lefiLayer.cpp	/^lefiLayer::spacingAdjacentWithin(int index) const$/;"	f	class:lefiLayer
spacingAdjacentWithin_	lef/lefiLayer.hpp	/^  double* spacingAdjacentWithin_;  \/\/ 5.5$/;"	m	class:lefiLayer
spacingArea	lef/lefiLayer.cpp	/^lefiLayer::spacingArea(int index) const$/;"	f	class:lefiLayer
spacingBeginCB	lefrw/lefrw.cpp	/^int spacingBeginCB(lefrCallbackType_e c, void*, lefiUserData){$/;"	f
spacingCB	lefdiff/diffLefRW.cpp	/^int spacingCB(lefrCallbackType_e c, lefiSpacing* spacing, lefiUserData ud) {$/;"	f
spacingCB	lefrw/lefrw.cpp	/^int spacingCB(lefrCallbackType_e c, lefiSpacing* spacing, lefiUserData) {$/;"	f
spacingCutArea_	lef/lefiLayer.hpp	/^  double* spacingCutArea_;         \/\/ 5.7$/;"	m	class:lefiLayer
spacingEndCB	lefrw/lefrw.cpp	/^int spacingEndCB(lefrCallbackType_e c, void*, lefiUserData){$/;"	f
spacingEndOfNotchLength	lef/lefiLayer.cpp	/^lefiLayer::spacingEndOfNotchLength(int index) const$/;"	f	class:lefiLayer
spacingEndOfNotchSpacing	lef/lefiLayer.cpp	/^lefiLayer::spacingEndOfNotchSpacing(int index) const$/;"	f	class:lefiLayer
spacingEndOfNotchWidth	lef/lefiLayer.cpp	/^lefiLayer::spacingEndOfNotchWidth(int index) const$/;"	f	class:lefiLayer
spacingEolWidth	lef/lefiLayer.cpp	/^lefiLayer::spacingEolWidth(int index) const$/;"	f	class:lefiLayer
spacingEolWithin	lef/lefiLayer.cpp	/^lefiLayer::spacingEolWithin(int index) const$/;"	f	class:lefiLayer
spacingLengthThreshold	lef/lefiLayer.cpp	/^lefiLayer::spacingLengthThreshold(int index) const$/;"	f	class:lefiLayer
spacingLengthThresholdRangeMax	lef/lefiLayer.cpp	/^lefiLayer::spacingLengthThresholdRangeMax(int index) const$/;"	f	class:lefiLayer
spacingLengthThresholdRangeMin	lef/lefiLayer.cpp	/^lefiLayer::spacingLengthThresholdRangeMin(int index) const$/;"	f	class:lefiLayer
spacingName	lef/lefiLayer.cpp	/^lefiLayer::spacingName(int index) const$/;"	f	class:lefiLayer
spacingName_	lef/lefiLayer.hpp	/^  char**  spacingName_;$/;"	m	class:lefiLayer
spacingNotchLength	lef/lefiLayer.cpp	/^lefiLayer::spacingNotchLength(int index) const$/;"	f	class:lefiLayer
spacingParSpace	lef/lefiLayer.cpp	/^lefiLayer::spacingParSpace(int index) const$/;"	f	class:lefiLayer
spacingParWithin	lef/lefiLayer.cpp	/^lefiLayer::spacingParWithin(int index) const$/;"	f	class:lefiLayer
spacingRangeInfluence	lef/lefiLayer.cpp	/^lefiLayer::spacingRangeInfluence(int index) const$/;"	f	class:lefiLayer
spacingRangeInfluenceMax	lef/lefiLayer.cpp	/^lefiLayer::spacingRangeInfluenceMax(int index) const$/;"	f	class:lefiLayer
spacingRangeInfluenceMin	lef/lefiLayer.cpp	/^lefiLayer::spacingRangeInfluenceMin(int index) const$/;"	f	class:lefiLayer
spacingRangeMax	lef/lefiLayer.cpp	/^lefiLayer::spacingRangeMax(int index) const$/;"	f	class:lefiLayer
spacingRangeMin	lef/lefiLayer.cpp	/^lefiLayer::spacingRangeMin(int index) const$/;"	f	class:lefiLayer
spacingRangeRangeMax	lef/lefiLayer.cpp	/^lefiLayer::spacingRangeRangeMax(int index) const$/;"	f	class:lefiLayer
spacingRangeRangeMin	lef/lefiLayer.cpp	/^lefiLayer::spacingRangeRangeMin(int index) const$/;"	f	class:lefiLayer
spacingRule	lef/lefiNonDefault.cpp	/^lefiNonDefault::spacingRule(int index) const$/;"	f	class:lefiNonDefault
spacingRules_	lef/lefiNonDefault.hpp	/^  lefiSpacing** spacingRules_;$/;"	m	class:lefiNonDefault
spacingStepX	lef/lefiViaRule.cpp	/^lefiViaRuleLayer::spacingStepX() const$/;"	f	class:lefiViaRuleLayer
spacingStepX_	lef/lefiViaRule.hpp	/^  double spacingStepX_;$/;"	m	class:lefiViaRuleLayer
spacingStepY	lef/lefiViaRule.cpp	/^lefiViaRuleLayer::spacingStepY() const$/;"	f	class:lefiViaRuleLayer
spacingStepY_	lef/lefiViaRule.hpp	/^  double spacingStepY_;$/;"	m	class:lefiViaRuleLayer
spacingTable	lef/lefiLayer.cpp	/^lefiLayer::spacingTable(int index)$/;"	f	class:lefiLayer
spacingTableAllocated_	lef/lefiLayer.hpp	/^  int spacingTableAllocated_;$/;"	m	class:lefiLayer
spacingTableOrtho_	lef/lefiLayer.hpp	/^  lefiOrthogonal* spacingTableOrtho_;$/;"	m	class:lefiLayer
spacingTable_	lef/lefiLayer.hpp	/^  lefiSpacingTable** spacingTable_;$/;"	m	class:lefiLayer
spacingWarnings	lef/lefrData.hpp	/^    int  spacingWarnings; $/;"	m	class:lefrData
spacing_	lef/lefiLayer.hpp	/^  double* spacing_;          \/\/ for Cut & routing Layer, spacing is multiple$/;"	m	class:lefiLayer
spacing_	lef/lefiLayer.hpp	/^  double* spacing_;$/;"	m	class:lefiInfluence
spacing_	lef/lefiNonDefault.hpp	/^  double* spacing_;$/;"	m	class:lefiNonDefault
spacing_cut_layer_opt	lef/lef.y	/^spacing_cut_layer_opt:                      \/\/ 5.7 $/;"	l
spacing_rule	lef/lef.y	/^spacing_rule: start_spacing spacings end_spacing $/;"	l
spacing_type	lef/lef.y	/^spacing_type:$/;"	l
spacing_value	lef/lef.y	/^spacing_value:$/;"	l
spacings	lef/lef.y	/^spacings:$/;"	l
spacingsAllocated_	lef/lefiLayer.hpp	/^  int spacingsAllocated_;$/;"	m	class:lefiLayer
splitWireWidth	lef/lefiLayer.cpp	/^lefiLayer::splitWireWidth() const$/;"	f	class:lefiLayer
splitWireWidth_	lef/lefiLayer.hpp	/^  double splitWireWidth_; $/;"	m	class:lefiLayer
ssPinName_	lef/lefiMacro.hpp	/^  char* ssPinName_;$/;"	m	class:lefiPin
stableHold	lef/lefiMacro.cpp	/^lefiTiming::stableHold()$/;"	f	class:lefiTiming
stableHold_	lef/lefiMacro.hpp	/^  double stableHold_;$/;"	m	class:lefiTiming
stableRiseFall	lef/lefiMacro.cpp	/^lefiTiming::stableRiseFall()$/;"	f	class:lefiTiming
stableRiseFall_	lef/lefiMacro.hpp	/^  char* stableRiseFall_;$/;"	m	class:lefiTiming
stableSetup	lef/lefiMacro.cpp	/^lefiTiming::stableSetup()$/;"	f	class:lefiTiming
stableSetup_	lef/lefiMacro.hpp	/^  double stableSetup_;$/;"	m	class:lefiTiming
start	lef/lefiMisc.cpp	/^lefiGcellPattern::start() const$/;"	f	class:lefiGcellPattern
start	lef/lefiMisc.cpp	/^lefiTrackPattern::start() const$/;"	f	class:lefiTrackPattern
startList	lef/lefiMisc.cpp	/^lefiGeometries::startList(double    x,$/;"	f	class:lefiGeometries
start_	lef/lefiMisc.hpp	/^  double start_;$/;"	m	class:lefiGcellPattern
start_	lef/lefiMisc.hpp	/^  double start_;$/;"	m	class:lefiTrackPattern
start_array	lef/lef.y	/^start_array: K_ARRAY {lefData->lefDumbMode = 1; lefData->lefNoNum = 1;} T_STRING$/;"	l
start_foreign	lef/lef.y	/^start_foreign:        K_FOREIGN {lefData->lefDumbMode = 1; lefData->lefNoNum= 1;} T_STRING$/;"	l
start_irdrop	lef/lef.y	/^start_irdrop: K_IRDROP$/;"	l
start_layer	lef/lef.y	/^start_layer: K_LAYER {lefData->lefDumbMode = 1; lefData->lefNoNum = 1; } T_STRING$/;"	l
start_macro	lef/lef.y	/^start_macro: K_MACRO {lefData->lefDumbMode = 1; lefData->lefNoNum = 1;} T_STRING $/;"	l
start_macro_obs	lef/lef.y	/^start_macro_obs: K_OBS$/;"	l
start_macro_pin	lef/lef.y	/^start_macro_pin: K_PIN {lefData->lefDumbMode = 1; lefData->lefNoNum = 1; lefData->pinDef = 1;} T_STRING $/;"	l
start_macro_port	lef/lef.y	/^start_macro_port: K_PORT$/;"	l
start_site	lef/lef.y	/^start_site: K_SITE {lefData->lefDumbMode = 1; lefData->lefNoNum = 1;} T_STRING $/;"	l
start_spacing	lef/lef.y	/^start_spacing: K_SPACING$/;"	l
start_timing	lef/lef.y	/^start_timing: K_TIMING $/;"	l
start_units	lef/lef.y	/^start_units: K_UNITS$/;"	l
start_via	lef/lef.y	/^start_via: via_keyword T_STRING $/;"	l
stepPattern	lef/lef.y	/^stepPattern: K_DO int_number K_BY int_number K_STEP int_number int_number$/;"	l
strdup	lef/lefiDefs.hpp	177;"	d
string	lef/lefiProp.cpp	/^lefiProp::string() const$/;"	f	class:lefiProp
stringData_	lef/lefiProp.hpp	/^  char* stringData_;    \/\/ if it is a string the data is here.$/;"	m	class:lefiProp
stringLength_	lef/lefiProp.hpp	/^  int stringLength_;    \/\/ allocated size of stringData.$/;"	m	class:lefiProp
strip_case	lef/lef_keywords.cpp	/^strip_case(const char *str)$/;"	f
supplySensitivity	lef/lefiMacro.cpp	/^lefiPin::supplySensitivity() const$/;"	f	class:lefiPin
suppresMsg	lef/lefrSettings.cpp	/^lefrSettings::suppresMsg(int msgId)$/;"	f	class:lefrSettings
symDef	lef/lefrData.hpp	/^    int  symDef; $/;"	m	class:lefrData
symmetry_	lef/lefiMisc.hpp	/^  int    symmetry_;   \/\/ bit 0-x   bit 1-y   bit 2-90$/;"	m	class:lefiSite
tableEntriesAllocated_	lef/lefiMacro.hpp	/^  int tableEntriesAllocated_;$/;"	m	class:lefiTiming
tableEntries_	lef/lefiLayer.hpp	/^  double* tableEntries_;$/;"	m	class:lefiLayerDensity
tableEntry	lef/lefiLayer.cpp	/^lefiLayerDensity::tableEntry(int index) const$/;"	f	class:lefiLayerDensity
tableEntry	lef/lefiMacro.cpp	/^lefiTiming::tableEntry(int      num,$/;"	f	class:lefiTiming
tableHighName	lef/lefiMacro.cpp	/^lefiPin::tableHighName() const$/;"	f	class:lefiPin
tableLowName	lef/lefiMacro.cpp	/^lefiPin::tableLowName() const$/;"	f	class:lefiPin
tableSize	lef/lefiArray.cpp	/^lefiArray::tableSize() const$/;"	f	class:lefiArray
tableSize_	lef/lefiArray.hpp	/^  int tableSize_;$/;"	m	class:lefiArray
table_	lef/lefiMacro.hpp	/^  double* table_;  \/\/ three numbers per entry $/;"	m	class:lefiTiming
table_entry	lef/lef.y	/^table_entry: '(' int_number int_number int_number ')'$/;"	l
tagName	lef/lefiTBExt.cpp	/^static char tagName[200] = "CDNDESYS";$/;"	v	file:
tagNum	lef/lefiTBExt.cpp	/^static char tagNum[24] = "CDNCHKSM";$/;"	v	file:
taperRule	lef/lefiMacro.cpp	/^lefiPin::taperRule() const$/;"	f	class:lefiPin
taperRule_	lef/lefiMacro.hpp	/^  char* taperRule_;$/;"	m	class:lefiPin
temp_name	lef/lefrData.hpp	/^    char       temp_name[258];$/;"	m	class:lefrData
then	lef/lef.y	/^then:$/;"	l
thickness	lef/lefiLayer.cpp	/^lefiLayer::thickness() const$/;"	f	class:lefiLayer
thickness_	lef/lefiLayer.hpp	/^  double thickness_;$/;"	m	class:lefiLayer
tieoffr	lef/lefiMacro.cpp	/^lefiPin::tieoffr() const$/;"	f	class:lefiPin
tieoffr_	lef/lefiMacro.hpp	/^  double tieoffr_;$/;"	m	class:lefiPin
time	lef/lefiUnits.cpp	/^lefiUnits::time() const$/;"	f	class:lefiUnits
time_	lef/lefiUnits.hpp	/^  double time_;$/;"	m	class:lefiUnits
timing	lef/lef.y	/^timing: start_timing timing_options end_timing$/;"	l
timingCB	lefdiff/diffLefRW.cpp	/^int timingCB(lefrCallbackType_e c, lefiTiming* timing, lefiUserData ud) {$/;"	f
timingCB	lefrw/lefrw.cpp	/^int timingCB(lefrCallbackType_e c, lefiTiming* timing, lefiUserData) {$/;"	f
timingWarnings	lef/lefrData.hpp	/^    int  timingWarnings; $/;"	m	class:lefrData
timing_option	lef/lef.y	/^timing_option:$/;"	l
timing_options	lef/lef.y	/^timing_options:$/;"	l
toAllocated_	lef/lefiMacro.hpp	/^  int toAllocated_;$/;"	m	class:lefiTiming
toPin	lef/lefiMacro.cpp	/^lefiTiming::toPin(int index)$/;"	f	class:lefiTiming
to_	lef/lefiMacro.hpp	/^  char** to_;$/;"	m	class:lefiTiming
to_pin_trigger	lef/lef.y	/^to_pin_trigger:$/;"	l
token	lef/lefiDefs.hpp	/^struct token {$/;"	s
tokenSize	lef/lefrData.hpp	/^    int                 tokenSize;$/;"	m	class:lefrData
topLayer_	lef/lefiMisc.hpp	/^  char* topLayer_;$/;"	m	class:lefiMaxStackVia
topLayer_	lef/lefiVia.hpp	/^  char* topLayer_;             \/\/ 5.6$/;"	m	class:lefiVia
topMaskNum	clef/lefiTypedefs.h	/^  int    topMaskNum;$/;"	m	struct:lefiGeomVia
topMaskNum	clef/lefiTypedefs.h	/^  int    topMaskNum;$/;"	m	struct:lefiGeomViaIter
topMaskNum	lef/lefiMisc.hpp	/^  int    topMaskNum;$/;"	m	struct:lefiGeomVia
topMaskNum	lef/lefiMisc.hpp	/^  int    topMaskNum;$/;"	m	struct:lefiGeomViaIter
topMetalLayer	lef/lefiVia.cpp	/^lefiVia::topMetalLayer() const$/;"	f	class:lefiVia
track	lef/lefiArray.cpp	/^lefiArray::track(int index) const$/;"	f	class:lefiArray
trackLayers	lef/lef.y	/^trackLayers:$/;"	l
trackPattern	lef/lef.y	/^trackPattern:$/;"	l
track_	lef/lefiArray.hpp	/^  lefiTrackPattern** track_;$/;"	m	class:lefiArray
tracksAllocated_	lef/lefiArray.hpp	/^  int tracksAllocated_;$/;"	m	class:lefiArray
transitionRiseOrFall	lef/lefiMacro.cpp	/^lefiTiming::transitionRiseOrFall()$/;"	f	class:lefiTiming
transitionRiseOrFall_	lef/lefiMacro.hpp	/^  char* transitionRiseOrFall_;$/;"	m	class:lefiTiming
transitionTableOne	lef/lefiMacro.cpp	/^lefiTiming::transitionTableOne()$/;"	f	class:lefiTiming
transitionTableOne_	lef/lefiMacro.hpp	/^  double transitionTableOne_;$/;"	m	class:lefiTiming
transitionTableThree	lef/lefiMacro.cpp	/^lefiTiming::transitionTableThree()$/;"	f	class:lefiTiming
transitionTableThree_	lef/lefiMacro.hpp	/^  double transitionTableThree_;$/;"	m	class:lefiTiming
transitionTableTwo	lef/lefiMacro.cpp	/^lefiTiming::transitionTableTwo()$/;"	f	class:lefiTiming
transitionTableTwo_	lef/lefiMacro.hpp	/^  double transitionTableTwo_;$/;"	m	class:lefiTiming
transitionUnateness	lef/lefiMacro.cpp	/^lefiTiming::transitionUnateness()$/;"	f	class:lefiTiming
transitionUnateness_	lef/lefiMacro.hpp	/^  char* transitionUnateness_;$/;"	m	class:lefiTiming
two	lef/lefiMisc.cpp	/^lefiMinFeature::two() const$/;"	f	class:lefiMinFeature
twoWidths	lef/lefiLayer.cpp	/^lefiSpacingTable::twoWidths() const$/;"	f	class:lefiSpacingTable
twoWidths_	lef/lefiLayer.hpp	/^  lefiTwoWidths*   twoWidths_;               \/\/ 5.7$/;"	m	class:lefiSpacingTable
two_	lef/lefiMisc.hpp	/^  double two_;$/;"	m	class:lefiMinFeature
two_pin_trigger	lef/lef.y	/^two_pin_trigger :$/;"	l
typ	lef/lefiArray.cpp	/^lefiArrayFloorPlan::typ(int index) const$/;"	f	class:lefiArrayFloorPlan
type	lef/lefiLayer.cpp	/^lefiLayer::type() const$/;"	f	class:lefiLayer
type	lef/lefiLayer.cpp	/^lefiLayerDensity::type() const$/;"	f	class:lefiLayerDensity
typeSize_	lef/lefiLayer.hpp	/^  int typeSize_;$/;"	m	class:lefiLayer
type_	lef/lefiLayer.hpp	/^  char* type_;$/;"	m	class:lefiLayer
type_	lef/lefiLayer.hpp	/^  char* type_;$/;"	m	class:lefiLayerDensity
types_	lef/lefiArray.hpp	/^  char** types_;$/;"	m	class:lefiArrayFloorPlan
types_	lef/lefiLayer.hpp	/^  char*   types_;                     \/\/ I: integer, R: real, S:string$/;"	m	class:lefiLayer
types_	lef/lefiNonDefault.hpp	/^  char*   types_;$/;"	m	class:lefiNonDefault
types_	lef/lefiViaRule.hpp	/^  char*   types_;$/;"	m	class:lefiViaRule
uc_token	lef/lefrData.hpp	/^    char       *uc_token; $/;"	m	class:lefrData
unateness	lef/lef.y	/^unateness:$/;"	l
unateness	lef/lefiMacro.cpp	/^lefiTiming::unateness()$/;"	f	class:lefiTiming
unateness_	lef/lefiMacro.hpp	/^  char* unateness_;$/;"	m	class:lefiTiming
unitsCB	lefdiff/diffLefRW.cpp	/^int unitsCB(lefrCallbackType_e c, lefiUnits* unit, lefiUserData ud) {$/;"	f
unitsCB	lefrw/lefrw.cpp	/^int unitsCB(lefrCallbackType_e c, lefiUnits* unit, lefiUserData) {$/;"	f
unitsCB	lefwrite/lefwriteCbs.cpp	/^int unitsCB(lefwCallbackType_e c, lefiUserData ud) {$/;"	f
unitsWarnings	lef/lefrData.hpp	/^    int  unitsWarnings; $/;"	m	class:lefrData
units_rule	lef/lef.y	/^units_rule: K_TIME K_NANOSECONDS int_number ';'$/;"	l
units_rules	lef/lef.y	/^units_rules: $/;"	l
units_section	lef/lef.y	/^units_section: start_units units_rules K_END K_UNITS$/;"	l
universalnoisemargin	lef/lef.y	/^universalnoisemargin: K_UNIVERSALNOISEMARGIN int_number int_number ';'$/;"	l
ur	lef/lefiDefs.hpp	/^    lefPOINT ll,ur;$/;"	m	struct:rect
use	lef/lefiMacro.cpp	/^lefiPin::use() const$/;"	f	class:lefiPin
use5_3	lef/lefrData.hpp	/^    int  use5_3; $/;"	m	class:lefrData
use5_4	lef/lefrData.hpp	/^    int  use5_4; $/;"	m	class:lefrData
useLenThr	lef/lefrData.hpp	/^    int  useLenThr; $/;"	m	class:lefrData
useMinSpacingCB	lefdiff/diffLefRW.cpp	/^int useMinSpacingCB(lefrCallbackType_e c, lefiUseMinSpacing* spacing,$/;"	f
useMinSpacingCB	lefrw/lefrw.cpp	/^int useMinSpacingCB(lefrCallbackType_e c, lefiUseMinSpacing* spacing,$/;"	f
useMinSpacingWarnings	lef/lefrData.hpp	/^    int  useMinSpacingWarnings; $/;"	m	class:lefrData
useViaName_	lef/lefiNonDefault.hpp	/^  char** useViaName_;              \/\/ 5.6$/;"	m	class:lefiNonDefault
useViaRuleName_	lef/lefiNonDefault.hpp	/^  char** useViaRuleName_;          \/\/ 5.6$/;"	m	class:lefiNonDefault
use_	lef/lefiMacro.hpp	/^  char use_[12];$/;"	m	class:lefiPin
useminspacing	lef/lef.y	/^useminspacing: K_USEMINSPACING spacing_type spacing_value ';'$/;"	l
userData	lefdiff/diffLefRW.cpp	/^void*   userData;$/;"	v
userData	lefwrite/lefwriteCbs.cpp	/^int   userData;$/;"	v
usevia	lef/lef.y	/^usevia: K_USEVIA T_STRING ';'$/;"	l
useviarule	lef/lef.y	/^useviarule:  K_USEVIARULE T_STRING ';'$/;"	l
validateMaskNumber	clef/xlefiUtil.cpp	/^bool  validateMaskNumber (int  num) {$/;"	f
validateMaskNumber	lef/lefrReader.cpp	/^validateMaskNumber(int num)$/;"	f
value	lef/lefiMisc.cpp	/^lefiUseMinSpacing::value() const$/;"	f	class:lefiUseMinSpacing
value1	lef/lefiMisc.cpp	/^lefiIRDrop::value1(int index) const$/;"	f	class:lefiIRDrop
value1Size_	lef/lefiMisc.hpp	/^  int     value1Size_;$/;"	m	class:lefiIRDrop
value1_	lef/lefiMisc.hpp	/^  double* value1_;$/;"	m	class:lefiIRDrop
value2	lef/lefiMisc.cpp	/^lefiIRDrop::value2(int index) const$/;"	f	class:lefiIRDrop
value2Size_	lef/lefiMisc.hpp	/^  int     value2Size_;$/;"	m	class:lefiIRDrop
value2_	lef/lefiMisc.hpp	/^  double* value2_;$/;"	m	class:lefiIRDrop
value_	lef/lefiMisc.hpp	/^  int   value_;$/;"	m	class:lefiMaxStackVia
value_	lef/lefiMisc.hpp	/^  int   value_;$/;"	m	class:lefiUseMinSpacing
valuesAllocated_	lef/lefiMisc.hpp	/^  int     valuesAllocated_;$/;"	m	class:lefiIRDrop
values_	lef/lefiLayer.hpp	/^  char**  values_;$/;"	m	class:lefiLayer
values_	lef/lefiNonDefault.hpp	/^  char**  values_;$/;"	m	class:lefiNonDefault
values_	lef/lefiViaRule.hpp	/^  char**  values_;$/;"	m	class:lefiViaRule
version	lef/lef.y	/^version: K_VERSION { lefData->lefDumbMode = 1; lefData->lefNoNum = 1;} T_STRING ';'$/;"	l
versionCB	lefdiff/diffLefRW.cpp	/^int versionCB(lefrCallbackType_e c, double num, lefiUserData ud) {$/;"	f
versionCB	lefrw/lefrw.cpp	/^int versionCB(lefrCallbackType_e c, double num, lefiUserData) {$/;"	f
versionCB	lefwrite/lefwriteCbs.cpp	/^int versionCB(lefwCallbackType_e c, lefiUserData ud) {$/;"	f
versionNum	lef/lefrData.hpp	/^    double  versionNum; $/;"	m	class:lefrData
versionNum	lef/lefwWriter.cpp	/^static double versionNum = 5.7;  \/\/ default to 5.7$/;"	v	file:
versionStrCB	lefrw/lefrw.cpp	/^int versionStrCB(lefrCallbackType_e c, const char* versionName, lefiUserData) {$/;"	f
via	lef/lef.y	/^via: start_via  { lefData->hasViaRule_layer = 0; } via_option end_via$/;"	l
viaCB	lefdiff/diffLefRW.cpp	/^int viaCB(lefrCallbackType_e c, lefiVia* via, lefiUserData ud) {$/;"	f
viaCB	lefrw/lefrw.cpp	/^int viaCB(lefrCallbackType_e c, lefiVia* via, lefiUserData) {$/;"	f
viaCB	lefwrite/lefwriteCbs.cpp	/^int viaCB(lefwCallbackType_e c, lefiUserData ud) {$/;"	f
viaLayer	lef/lefrData.hpp	/^    int  viaLayer; $/;"	m	class:lefrData
viaName	lef/lefiNonDefault.cpp	/^lefiNonDefault::viaName(int index) const$/;"	f	class:lefiNonDefault
viaName	lef/lefiViaRule.cpp	/^lefiViaRule::viaName(int index) const$/;"	f	class:lefiViaRule
viaName	lef/lefrData.hpp	/^    char*  viaName; $/;"	m	class:lefrData
viaRule	lef/lefiNonDefault.cpp	/^lefiNonDefault::viaRule(int index) const$/;"	f	class:lefiNonDefault
viaRuleCB	lefdiff/diffLefRW.cpp	/^int viaRuleCB(lefrCallbackType_e c, lefiViaRule* viaRule, lefiUserData ud) {$/;"	f
viaRuleCB	lefrw/lefrw.cpp	/^int viaRuleCB(lefrCallbackType_e c, lefiViaRule* viaRule, lefiUserData) {$/;"	f
viaRuleCB	lefwrite/lefwriteCbs.cpp	/^int viaRuleCB(lefwCallbackType_e c, lefiUserData ud) {$/;"	f
viaRuleHasDir	lef/lefrData.hpp	/^    int  viaRuleHasDir; $/;"	m	class:lefrData
viaRuleHasEnc	lef/lefrData.hpp	/^    int  viaRuleHasEnc; $/;"	m	class:lefrData
viaRuleLayer	lef/lefrData.hpp	/^    int  viaRuleLayer; $/;"	m	class:lefrData
viaRuleName	lef/lefiNonDefault.cpp	/^lefiNonDefault::viaRuleName(int index) const$/;"	f	class:lefiNonDefault
viaRuleName	lef/lefiVia.cpp	/^lefiVia::viaRuleName() const$/;"	f	class:lefiVia
viaRuleName	lef/lefrData.hpp	/^    char*  viaRuleName; $/;"	m	class:lefrData
viaRuleName_	lef/lefiVia.hpp	/^  char* viaRuleName_;          \/\/ 5.6$/;"	m	class:lefiVia
viaRuleWarnings	lef/lefrData.hpp	/^    int  viaRuleWarnings; $/;"	m	class:lefrData
viaRules_	lef/lefiNonDefault.hpp	/^  lefiVia** viaRules_;$/;"	m	class:lefiNonDefault
viaWarnings	lef/lefrData.hpp	/^    int  viaWarnings; $/;"	m	class:lefrData
viaWidth	lef/lefiLayer.cpp	/^lefiLayer::viaWidth() const$/;"	f	class:lefiLayer
viaWidth_	lef/lefiLayer.hpp	/^  double  viaWidth_;$/;"	m	class:lefiLayer
via_foreign	lef/lef.y	/^via_foreign:$/;"	l
via_geometries	lef/lef.y	/^via_geometries:$/;"	l
via_geometry	lef/lef.y	/^via_geometry:$/;"	l
via_keyword	lef/lef.y	/^via_keyword : K_VIA                 \/\/needed to have a VIA named via$/;"	l
via_layer	lef/lef.y	/^via_layer: K_LAYER {lefData->lefDumbMode = 1; lefData->lefNoNum = 1; } T_STRING ';'$/;"	l
via_layer_rule	lef/lef.y	/^via_layer_rule: via_layer via_geometries$/;"	l
via_more_options	lef/lef.y	/^via_more_options: \/\/ empty $/;"	l
via_name	lef/lef.y	/^via_name: via_keyword T_STRING ';'$/;"	l
via_name_value_pair	lef/lef.y	/^via_name_value_pair:$/;"	l
via_names	lef/lef.y	/^via_names:$/;"	l
via_option	lef/lef.y	/^via_option: via_viarule$/;"	l
via_other_option	lef/lef.y	/^via_other_option:$/;"	l
via_other_options	lef/lef.y	/^via_other_options: via_other_option$/;"	l
via_placement	lef/lef.y	/^via_placement:$/;"	l
via_prop_list	lef/lef.y	/^via_prop_list:$/;"	l
via_viarule	lef/lef.y	/^via_viarule: K_VIARULE {lefData->lefDumbMode = 1; lefData->lefNoNum = 1; } T_STRING ';'$/;"	l
via_viarule_option	lef/lef.y	/^via_viarule_option: K_ROWCOL int_number int_number ';'$/;"	l
via_viarule_options	lef/lef.y	/^via_viarule_options: \/\/ empty $/;"	l
viarule	lef/lef.y	/^viarule:$/;"	l
viarule_generate	lef/lef.y	/^viarule_generate:$/;"	l
viarule_generate_default	lef/lef.y	/^viarule_generate_default:  \/\/ optional $/;"	l
viarule_keyword	lef/lef.y	/^viarule_keyword : K_VIARULE { lefData->lefDumbMode = 1; lefData->lefNoNum = 1;} T_STRING$/;"	l
viarule_layer	lef/lef.y	/^viarule_layer: viarule_layer_name viarule_layer_options$/;"	l
viarule_layer_list	lef/lef.y	/^viarule_layer_list :$/;"	l
viarule_layer_name	lef/lef.y	/^viarule_layer_name: K_LAYER {lefData->lefDumbMode = 1; lefData->lefNoNum = 1; } T_STRING ';'$/;"	l
viarule_layer_option	lef/lef.y	/^viarule_layer_option:$/;"	l
viarule_layer_options	lef/lef.y	/^viarule_layer_options:$/;"	l
viarule_prop	lef/lef.y	/^viarule_prop: K_PROPERTY { lefData->lefDumbMode = 10000000;} viarule_prop_list ';'$/;"	l
viarule_prop	lef/lef.y	/^viarule_prop:$/;"	l
viarule_prop_list	lef/lef.y	/^viarule_prop_list:$/;"	l
viarule_props	lef/lef.y	/^viarule_props:$/;"	l
viasAllocated_	lef/lefiViaRule.hpp	/^  int viasAllocated_;$/;"	m	class:lefiViaRule
vias_	lef/lefiViaRule.hpp	/^  char** vias_;$/;"	m	class:lefiViaRule
victim	lef/lef.y	/^victim: K_VICTIMLENGTH int_number ';'$/;"	l
victim	lef/lefiCrossTalk.cpp	/^lefiCorrectionResistance::victim(int index)$/;"	f	class:lefiCorrectionResistance
victim	lef/lefiCrossTalk.cpp	/^lefiNoiseResistance::victim(int index) const$/;"	f	class:lefiNoiseResistance
victim_list	lef/lef.y	/^victim_list:$/;"	l
victimsAllocated_	lef/lefiCrossTalk.hpp	/^  int victimsAllocated_;$/;"	m	class:lefiCorrectionResistance
victimsAllocated_	lef/lefiCrossTalk.hpp	/^  int victimsAllocated_;$/;"	m	class:lefiNoiseResistance
victims_	lef/lefiCrossTalk.hpp	/^  lefiCorrectionVictim** victims_;$/;"	m	class:lefiCorrectionResistance
victims_	lef/lefiCrossTalk.hpp	/^  lefiNoiseVictim** victims_;$/;"	m	class:lefiNoiseResistance
vnoiselist	lef/lef.y	/^vnoiselist:$/;"	l
voltage	lef/lefiUnits.cpp	/^lefiUnits::voltage() const$/;"	f	class:lefiUnits
voltage_	lef/lefiUnits.hpp	/^  double voltage_;$/;"	m	class:lefiUnits
warningCB	lefrw/lefrw.cpp	/^void warningCB(const char* msg) {$/;"	f
what	lef/lefiDefs.hpp	/^    int what;$/;"	m	struct:token
width	lef/lefiLayer.cpp	/^lefiInfluence::width(int index) const$/;"	f	class:lefiInfluence
width	lef/lefiLayer.cpp	/^lefiLayer::width() const$/;"	f	class:lefiLayer
width	lef/lefiLayer.cpp	/^lefiLayerDensity::width(int index) const$/;"	f	class:lefiLayerDensity
width	lef/lefiLayer.cpp	/^lefiParallel::width(int index) const$/;"	f	class:lefiParallel
width	lef/lefiLayer.cpp	/^lefiTwoWidths::width(int index) const$/;"	f	class:lefiTwoWidths
widthMax	lef/lefiViaRule.cpp	/^lefiViaRuleLayer::widthMax() const$/;"	f	class:lefiViaRuleLayer
widthMax_	lef/lefiViaRule.hpp	/^  double widthMax_;$/;"	m	class:lefiViaRuleLayer
widthMin	lef/lefiViaRule.cpp	/^lefiViaRuleLayer::widthMin() const$/;"	f	class:lefiViaRuleLayer
widthMin_	lef/lefiViaRule.hpp	/^  double widthMin_;$/;"	m	class:lefiViaRuleLayer
widthPRL	lef/lefiLayer.cpp	/^lefiTwoWidths::widthPRL(int index) const$/;"	f	class:lefiTwoWidths
widthSpacing	lef/lefiLayer.cpp	/^lefiParallel::widthSpacing(int  iWidth,$/;"	f	class:lefiParallel
widthSpacing	lef/lefiLayer.cpp	/^lefiTwoWidths::widthSpacing(int iWidth,$/;"	f	class:lefiTwoWidths
widthSpacing_	lef/lefiLayer.hpp	/^  double* widthSpacing_;$/;"	m	class:lefiParallel
widthSpacing_	lef/lefiLayer.hpp	/^  double* widthSpacing_;$/;"	m	class:lefiTwoWidths
width_	lef/lefiLayer.hpp	/^  double width_;$/;"	m	class:lefiLayer
width_	lef/lefiLayer.hpp	/^  double* width_;$/;"	m	class:lefiInfluence
width_	lef/lefiLayer.hpp	/^  double* width_;$/;"	m	class:lefiParallel
width_	lef/lefiLayer.hpp	/^  double* width_;$/;"	m	class:lefiTwoWidths
width_	lef/lefiNonDefault.hpp	/^  double* width_;$/;"	m	class:lefiNonDefault
widths_	lef/lefiLayer.hpp	/^  double* widths_;$/;"	m	class:lefiLayerDensity
wireExtension	lef/lefiLayer.cpp	/^lefiLayer::wireExtension() const$/;"	f	class:lefiLayer
wireExtension_	lef/lefiLayer.hpp	/^  double wireExtension_;$/;"	m	class:lefiLayer
wireExtension_	lef/lefiNonDefault.hpp	/^  double* wireExtension_;$/;"	m	class:lefiNonDefault
wireextension	lef/lef.y	/^wireextension: K_NOWIREEXTENSIONATPIN K_ON ';'$/;"	l
x	clef/lefiTypedefs.h	/^  double x;$/;"	m	struct:lefiGeomVia
x	clef/lefiTypedefs.h	/^  double x;$/;"	m	struct:lefiGeomViaIter
x	clef/lefiTypedefs.h	/^  double x;$/;"	m	struct:lefiPoints
x	clef/lefiTypedefs.h	/^  double* x;$/;"	m	struct:lefiGeomPath
x	clef/lefiTypedefs.h	/^  double* x;$/;"	m	struct:lefiGeomPathIter
x	clef/lefiTypedefs.h	/^  double* x;$/;"	m	struct:lefiGeomPolygon
x	clef/lefiTypedefs.h	/^  double* x;$/;"	m	struct:lefiGeomPolygonIter
x	lef/lefiDefs.hpp	/^    double x;$/;"	m	struct:point
x	lef/lefiMisc.cpp	/^lefiSitePattern::x() const$/;"	f	class:lefiSitePattern
x	lef/lefiMisc.hpp	/^  double x;$/;"	m	struct:lefiGeomVia
x	lef/lefiMisc.hpp	/^  double x;$/;"	m	struct:lefiGeomViaIter
x	lef/lefiMisc.hpp	/^  double* x;$/;"	m	struct:lefiGeomPath
x	lef/lefiMisc.hpp	/^  double* x;$/;"	m	struct:lefiGeomPathIter
x	lef/lefiMisc.hpp	/^  double* x;$/;"	m	struct:lefiGeomPolygon
x	lef/lefiMisc.hpp	/^  double* x;$/;"	m	struct:lefiGeomPolygonIter
x	lef/lefiUtil.hpp	/^  double x;$/;"	m	struct:lefiPoints
xBotEnc	lef/lefiVia.cpp	/^lefiVia::xBotEnc() const$/;"	f	class:lefiVia
xBotEnc_	lef/lefiVia.hpp	/^  double xBotEnc_;             \/\/ 5.6$/;"	m	class:lefiVia
xBotOffset	lef/lefiVia.cpp	/^lefiVia::xBotOffset() const$/;"	f	class:lefiVia
xBotOs_	lef/lefiVia.hpp	/^  double xBotOs_;              \/\/ 5.6$/;"	m	class:lefiVia
xCutSize	lef/lefiVia.cpp	/^lefiVia::xCutSize() const$/;"	f	class:lefiVia
xCutSpacing	lef/lefiVia.cpp	/^lefiVia::xCutSpacing() const$/;"	f	class:lefiVia
xOffset	lef/lefiVia.cpp	/^lefiVia::xOffset() const$/;"	f	class:lefiVia
xOffset_	lef/lefiVia.hpp	/^  double xOffset_;             \/\/ 5.6$/;"	m	class:lefiVia
xSize_	lef/lefiVia.hpp	/^  double xSize_;               \/\/ 5.6$/;"	m	class:lefiVia
xSpacing_	lef/lefiVia.hpp	/^  double xSpacing_;            \/\/ 5.6$/;"	m	class:lefiVia
xStart	clef/lefiTypedefs.h	/^  double xStart;$/;"	m	struct:lefiGeomPathIter
xStart	clef/lefiTypedefs.h	/^  double xStart;$/;"	m	struct:lefiGeomPolygonIter
xStart	clef/lefiTypedefs.h	/^  double xStart;$/;"	m	struct:lefiGeomRectIter
xStart	clef/lefiTypedefs.h	/^  double xStart;$/;"	m	struct:lefiGeomViaIter
xStart	lef/lefiMisc.cpp	/^lefiSitePattern::xStart() const$/;"	f	class:lefiSitePattern
xStart	lef/lefiMisc.hpp	/^  double xStart;$/;"	m	struct:lefiGeomPathIter
xStart	lef/lefiMisc.hpp	/^  double xStart;$/;"	m	struct:lefiGeomPolygonIter
xStart	lef/lefiMisc.hpp	/^  double xStart;$/;"	m	struct:lefiGeomRectIter
xStart	lef/lefiMisc.hpp	/^  double xStart;$/;"	m	struct:lefiGeomViaIter
xStart_	lef/lefiMisc.hpp	/^  double xStart_;$/;"	m	class:lefiGeometries
xStart_	lef/lefiMisc.hpp	/^  double xStart_;$/;"	m	class:lefiSitePattern
xStep	clef/lefiTypedefs.h	/^  double xStep;$/;"	m	struct:lefiGeomPathIter
xStep	clef/lefiTypedefs.h	/^  double xStep;$/;"	m	struct:lefiGeomPolygonIter
xStep	clef/lefiTypedefs.h	/^  double xStep;$/;"	m	struct:lefiGeomRectIter
xStep	clef/lefiTypedefs.h	/^  double xStep;$/;"	m	struct:lefiGeomViaIter
xStep	lef/lefiMisc.cpp	/^lefiSitePattern::xStep() const$/;"	f	class:lefiSitePattern
xStep	lef/lefiMisc.hpp	/^  double xStep;$/;"	m	struct:lefiGeomPathIter
xStep	lef/lefiMisc.hpp	/^  double xStep;$/;"	m	struct:lefiGeomPolygonIter
xStep	lef/lefiMisc.hpp	/^  double xStep;$/;"	m	struct:lefiGeomRectIter
xStep	lef/lefiMisc.hpp	/^  double xStep;$/;"	m	struct:lefiGeomViaIter
xStep_	lef/lefiMisc.hpp	/^  double xStep_;$/;"	m	class:lefiGeometries
xStep_	lef/lefiMisc.hpp	/^  double xStep_;$/;"	m	class:lefiSitePattern
xTopEnc	lef/lefiVia.cpp	/^lefiVia::xTopEnc() const$/;"	f	class:lefiVia
xTopEnc_	lef/lefiVia.hpp	/^  double xTopEnc_;             \/\/ 5.6$/;"	m	class:lefiVia
xTopOffset	lef/lefiVia.cpp	/^lefiVia::xTopOffset() const$/;"	f	class:lefiVia
xTopOs_	lef/lefiVia.hpp	/^  double xTopOs_;              \/\/ 5.6$/;"	m	class:lefiVia
x_	lef/lefiMisc.hpp	/^  double x_;$/;"	m	class:lefiSitePattern
x_	lef/lefiMisc.hpp	/^  double* x_;$/;"	m	class:lefiGeometries
xh	clef/lefiTypedefs.h	/^      double xh;$/;"	m	struct:lefiGeomRect
xh	clef/lefiTypedefs.h	/^  double xh;$/;"	m	struct:lefiGeomRectIter
xh	lef/lefiMisc.hpp	/^      double xh;$/;"	m	struct:lefiGeomRect
xh	lef/lefiMisc.hpp	/^  double xh;$/;"	m	struct:lefiGeomRectIter
xh	lef/lefiVia.cpp	/^lefiVia::xh(int layerNum,$/;"	f	class:lefiVia
xh	lef/lefiVia.cpp	/^lefiViaLayer::xh(int index)$/;"	f	class:lefiViaLayer
xh	lef/lefiViaRule.cpp	/^lefiViaRuleLayer::xh() const$/;"	f	class:lefiViaRuleLayer
xh_	lef/lefiVia.hpp	/^  double* xh_;$/;"	m	class:lefiViaLayer
xh_	lef/lefiViaRule.hpp	/^  double xl_, yl_, xh_, yh_;$/;"	m	class:lefiViaRuleLayer
xl	clef/lefiTypedefs.h	/^      double xl;$/;"	m	struct:lefiGeomRect
xl	clef/lefiTypedefs.h	/^  double xl;$/;"	m	struct:lefiGeomRectIter
xl	lef/lefiMisc.hpp	/^      double xl;$/;"	m	struct:lefiGeomRect
xl	lef/lefiMisc.hpp	/^  double xl;$/;"	m	struct:lefiGeomRectIter
xl	lef/lefiVia.cpp	/^lefiVia::xl(int layerNum,$/;"	f	class:lefiVia
xl	lef/lefiVia.cpp	/^lefiViaLayer::xl(int index)$/;"	f	class:lefiViaLayer
xl	lef/lefiViaRule.cpp	/^lefiViaRuleLayer::xl() const$/;"	f	class:lefiViaRuleLayer
xl_	lef/lefiVia.hpp	/^  double* xl_;$/;"	m	class:lefiViaLayer
xl_	lef/lefiViaRule.hpp	/^  double xl_, yl_, xh_, yh_;$/;"	m	class:lefiViaRuleLayer
y	clef/lefiTypedefs.h	/^  double y;$/;"	m	struct:lefiGeomVia
y	clef/lefiTypedefs.h	/^  double y;$/;"	m	struct:lefiGeomViaIter
y	clef/lefiTypedefs.h	/^  double y;$/;"	m	struct:lefiPoints
y	clef/lefiTypedefs.h	/^  double* y;$/;"	m	struct:lefiGeomPath
y	clef/lefiTypedefs.h	/^  double* y;$/;"	m	struct:lefiGeomPathIter
y	clef/lefiTypedefs.h	/^  double* y;$/;"	m	struct:lefiGeomPolygon
y	clef/lefiTypedefs.h	/^  double* y;$/;"	m	struct:lefiGeomPolygonIter
y	lef/lefiDefs.hpp	/^    double y;$/;"	m	struct:point
y	lef/lefiMisc.cpp	/^lefiSitePattern::y() const$/;"	f	class:lefiSitePattern
y	lef/lefiMisc.hpp	/^  double y;$/;"	m	struct:lefiGeomVia
y	lef/lefiMisc.hpp	/^  double y;$/;"	m	struct:lefiGeomViaIter
y	lef/lefiMisc.hpp	/^  double* y;$/;"	m	struct:lefiGeomPath
y	lef/lefiMisc.hpp	/^  double* y;$/;"	m	struct:lefiGeomPathIter
y	lef/lefiMisc.hpp	/^  double* y;$/;"	m	struct:lefiGeomPolygon
y	lef/lefiMisc.hpp	/^  double* y;$/;"	m	struct:lefiGeomPolygonIter
y	lef/lefiUtil.hpp	/^  double y;$/;"	m	struct:lefiPoints
yBotEnc	lef/lefiVia.cpp	/^lefiVia::yBotEnc() const$/;"	f	class:lefiVia
yBotEnc_	lef/lefiVia.hpp	/^  double yBotEnc_;             \/\/ 5.6$/;"	m	class:lefiVia
yBotOffset	lef/lefiVia.cpp	/^lefiVia::yBotOffset() const$/;"	f	class:lefiVia
yBotOs_	lef/lefiVia.hpp	/^  double yBotOs_;              \/\/ 5.6$/;"	m	class:lefiVia
yCutSize	lef/lefiVia.cpp	/^lefiVia::yCutSize() const$/;"	f	class:lefiVia
yCutSpacing	lef/lefiVia.cpp	/^lefiVia::yCutSpacing() const$/;"	f	class:lefiVia
yOffset	lef/lefiVia.cpp	/^lefiVia::yOffset() const$/;"	f	class:lefiVia
yOffset_	lef/lefiVia.hpp	/^  double yOffset_;             \/\/ 5.6$/;"	m	class:lefiVia
ySize_	lef/lefiVia.hpp	/^  double ySize_;               \/\/ 5.6$/;"	m	class:lefiVia
ySpacing_	lef/lefiVia.hpp	/^  double ySpacing_;            \/\/ 5.6$/;"	m	class:lefiVia
yStart	clef/lefiTypedefs.h	/^  double yStart;$/;"	m	struct:lefiGeomPathIter
yStart	clef/lefiTypedefs.h	/^  double yStart;$/;"	m	struct:lefiGeomPolygonIter
yStart	clef/lefiTypedefs.h	/^  double yStart;$/;"	m	struct:lefiGeomRectIter
yStart	clef/lefiTypedefs.h	/^  double yStart;$/;"	m	struct:lefiGeomViaIter
yStart	lef/lefiMisc.cpp	/^lefiSitePattern::yStart() const$/;"	f	class:lefiSitePattern
yStart	lef/lefiMisc.hpp	/^  double yStart;$/;"	m	struct:lefiGeomPathIter
yStart	lef/lefiMisc.hpp	/^  double yStart;$/;"	m	struct:lefiGeomPolygonIter
yStart	lef/lefiMisc.hpp	/^  double yStart;$/;"	m	struct:lefiGeomRectIter
yStart	lef/lefiMisc.hpp	/^  double yStart;$/;"	m	struct:lefiGeomViaIter
yStart_	lef/lefiMisc.hpp	/^  double yStart_;$/;"	m	class:lefiGeometries
yStart_	lef/lefiMisc.hpp	/^  double yStart_;$/;"	m	class:lefiSitePattern
yStep	clef/lefiTypedefs.h	/^  double yStep;$/;"	m	struct:lefiGeomPathIter
yStep	clef/lefiTypedefs.h	/^  double yStep;$/;"	m	struct:lefiGeomPolygonIter
yStep	clef/lefiTypedefs.h	/^  double yStep;$/;"	m	struct:lefiGeomRectIter
yStep	clef/lefiTypedefs.h	/^  double yStep;$/;"	m	struct:lefiGeomViaIter
yStep	lef/lefiMisc.cpp	/^lefiSitePattern::yStep() const$/;"	f	class:lefiSitePattern
yStep	lef/lefiMisc.hpp	/^  double yStep;$/;"	m	struct:lefiGeomPathIter
yStep	lef/lefiMisc.hpp	/^  double yStep;$/;"	m	struct:lefiGeomPolygonIter
yStep	lef/lefiMisc.hpp	/^  double yStep;$/;"	m	struct:lefiGeomRectIter
yStep	lef/lefiMisc.hpp	/^  double yStep;$/;"	m	struct:lefiGeomViaIter
yStep_	lef/lefiMisc.hpp	/^  double yStep_;$/;"	m	class:lefiGeometries
yStep_	lef/lefiMisc.hpp	/^  double yStep_;$/;"	m	class:lefiSitePattern
yTopEnc	lef/lefiVia.cpp	/^lefiVia::yTopEnc() const$/;"	f	class:lefiVia
yTopEnc_	lef/lefiVia.hpp	/^  double yTopEnc_;             \/\/ 5.6$/;"	m	class:lefiVia
yTopOffset	lef/lefiVia.cpp	/^lefiVia::yTopOffset() const$/;"	f	class:lefiVia
yTopOs_	lef/lefiVia.hpp	/^  double yTopOs_;              \/\/ 5.6$/;"	m	class:lefiVia
y_	lef/lefiMisc.hpp	/^  double y_;$/;"	m	class:lefiSitePattern
y_	lef/lefiMisc.hpp	/^  double* y_;$/;"	m	class:lefiGeometries
yh	clef/lefiTypedefs.h	/^      double yh;$/;"	m	struct:lefiGeomRect
yh	clef/lefiTypedefs.h	/^  double yh;$/;"	m	struct:lefiGeomRectIter
yh	lef/lefiMisc.hpp	/^      double yh;$/;"	m	struct:lefiGeomRect
yh	lef/lefiMisc.hpp	/^  double yh;$/;"	m	struct:lefiGeomRectIter
yh	lef/lefiVia.cpp	/^lefiVia::yh(int layerNum,$/;"	f	class:lefiVia
yh	lef/lefiVia.cpp	/^lefiViaLayer::yh(int index)$/;"	f	class:lefiViaLayer
yh	lef/lefiViaRule.cpp	/^lefiViaRuleLayer::yh() const$/;"	f	class:lefiViaRuleLayer
yh_	lef/lefiVia.hpp	/^  double* yh_;$/;"	m	class:lefiViaLayer
yh_	lef/lefiViaRule.hpp	/^  double xl_, yl_, xh_, yh_;$/;"	m	class:lefiViaRuleLayer
yl	clef/lefiTypedefs.h	/^      double yl;$/;"	m	struct:lefiGeomRect
yl	clef/lefiTypedefs.h	/^  double yl;$/;"	m	struct:lefiGeomRectIter
yl	lef/lefiMisc.hpp	/^      double yl;$/;"	m	struct:lefiGeomRect
yl	lef/lefiMisc.hpp	/^  double yl;$/;"	m	struct:lefiGeomRectIter
yl	lef/lefiVia.cpp	/^lefiVia::yl(int layerNum,$/;"	f	class:lefiVia
yl	lef/lefiVia.cpp	/^lefiViaLayer::yl(int index)$/;"	f	class:lefiViaLayer
yl	lef/lefiViaRule.cpp	/^lefiViaRuleLayer::yl() const$/;"	f	class:lefiViaRuleLayer
yl_	lef/lefiVia.hpp	/^  double* yl_;$/;"	m	class:lefiViaLayer
yl_	lef/lefiViaRule.hpp	/^  double xl_, yl_, xh_, yh_;$/;"	m	class:lefiViaRuleLayer
yychar	lef/lef_keywords.cpp	145;"	d	file:
yydebug	lef/lef_keywords.cpp	146;"	d	file:
yyerror	lef/lef_keywords.cpp	/^yyerror(const char *s)$/;"	f
yyerror	lef/lef_keywords.cpp	143;"	d	file:
yylex	lef/lef_keywords.cpp	/^yylex()$/;"	f
yylex	lef/lef_keywords.cpp	142;"	d	file:
yylval	lef/lef_keywords.cpp	144;"	d	file:
yynerrs	lef/lef_keywords.cpp	147;"	d	file:
yyparse	lef/lef_keywords.cpp	141;"	d	file:
~lefiAntennaModel	lef/lefiLayer.cpp	/^lefiAntennaModel::~lefiAntennaModel()$/;"	f	class:lefiAntennaModel
~lefiAntennaPWL	lef/lefiLayer.cpp	/^lefiAntennaPWL::~lefiAntennaPWL()$/;"	f	class:lefiAntennaPWL
~lefiArray	lef/lefiArray.cpp	/^lefiArray::~lefiArray()$/;"	f	class:lefiArray
~lefiCorrectionEdge	lef/lefiCrossTalk.cpp	/^lefiCorrectionEdge::~lefiCorrectionEdge()$/;"	f	class:lefiCorrectionEdge
~lefiCorrectionResistance	lef/lefiCrossTalk.cpp	/^lefiCorrectionResistance::~lefiCorrectionResistance()$/;"	f	class:lefiCorrectionResistance
~lefiCorrectionTable	lef/lefiCrossTalk.cpp	/^lefiCorrectionTable::~lefiCorrectionTable()$/;"	f	class:lefiCorrectionTable
~lefiCorrectionVictim	lef/lefiCrossTalk.cpp	/^lefiCorrectionVictim::~lefiCorrectionVictim()$/;"	f	class:lefiCorrectionVictim
~lefiDensity	lef/lefiMacro.cpp	/^lefiDensity::~lefiDensity()$/;"	f	class:lefiDensity
~lefiGcellPattern	lef/lefiMisc.cpp	/^lefiGcellPattern::~lefiGcellPattern()$/;"	f	class:lefiGcellPattern
~lefiGeometries	lef/lefiMisc.cpp	/^lefiGeometries::~lefiGeometries()$/;"	f	class:lefiGeometries
~lefiIRDrop	lef/lefiMisc.cpp	/^lefiIRDrop::~lefiIRDrop()$/;"	f	class:lefiIRDrop
~lefiInfluence	lef/lefiLayer.cpp	/^lefiInfluence::~lefiInfluence()$/;"	f	class:lefiInfluence
~lefiLayer	lef/lefiLayer.cpp	/^lefiLayer::~lefiLayer()$/;"	f	class:lefiLayer
~lefiLayerDensity	lef/lefiLayer.cpp	/^lefiLayerDensity::~lefiLayerDensity()$/;"	f	class:lefiLayerDensity
~lefiMacro	lef/lefiMacro.cpp	/^lefiMacro::~lefiMacro()$/;"	f	class:lefiMacro
~lefiMaxStackVia	lef/lefiMisc.cpp	/^lefiMaxStackVia::~lefiMaxStackVia()$/;"	f	class:lefiMaxStackVia
~lefiMinFeature	lef/lefiMisc.cpp	/^lefiMinFeature::~lefiMinFeature()$/;"	f	class:lefiMinFeature
~lefiNoiseEdge	lef/lefiCrossTalk.cpp	/^lefiNoiseEdge::~lefiNoiseEdge()$/;"	f	class:lefiNoiseEdge
~lefiNoiseResistance	lef/lefiCrossTalk.cpp	/^lefiNoiseResistance::~lefiNoiseResistance()$/;"	f	class:lefiNoiseResistance
~lefiNoiseTable	lef/lefiCrossTalk.cpp	/^lefiNoiseTable::~lefiNoiseTable()$/;"	f	class:lefiNoiseTable
~lefiNoiseVictim	lef/lefiCrossTalk.cpp	/^lefiNoiseVictim::~lefiNoiseVictim()$/;"	f	class:lefiNoiseVictim
~lefiNonDefault	lef/lefiNonDefault.cpp	/^lefiNonDefault::~lefiNonDefault()$/;"	f	class:lefiNonDefault
~lefiObstruction	lef/lefiMacro.cpp	/^lefiObstruction::~lefiObstruction()$/;"	f	class:lefiObstruction
~lefiOrthogonal	lef/lefiLayer.cpp	/^lefiOrthogonal::~lefiOrthogonal()$/;"	f	class:lefiOrthogonal
~lefiParallel	lef/lefiLayer.cpp	/^lefiParallel::~lefiParallel()$/;"	f	class:lefiParallel
~lefiPin	lef/lefiMacro.cpp	/^lefiPin::~lefiPin()$/;"	f	class:lefiPin
~lefiPinAntennaModel	lef/lefiMacro.cpp	/^lefiPinAntennaModel::~lefiPinAntennaModel()$/;"	f	class:lefiPinAntennaModel
~lefiProp	lef/lefiProp.cpp	/^lefiProp::~lefiProp()$/;"	f	class:lefiProp
~lefiPropType	lef/lefiPropType.cpp	/^lefiPropType::~lefiPropType()$/;"	f	class:lefiPropType
~lefiSite	lef/lefiMisc.cpp	/^lefiSite::~lefiSite()$/;"	f	class:lefiSite
~lefiSitePattern	lef/lefiMisc.cpp	/^lefiSitePattern::~lefiSitePattern()$/;"	f	class:lefiSitePattern
~lefiSpacing	lef/lefiMisc.cpp	/^lefiSpacing::~lefiSpacing()$/;"	f	class:lefiSpacing
~lefiSpacingTable	lef/lefiLayer.cpp	/^lefiSpacingTable::~lefiSpacingTable()$/;"	f	class:lefiSpacingTable
~lefiTiming	lef/lefiMacro.cpp	/^lefiTiming::~lefiTiming()$/;"	f	class:lefiTiming
~lefiTrackPattern	lef/lefiMisc.cpp	/^lefiTrackPattern::~lefiTrackPattern()$/;"	f	class:lefiTrackPattern
~lefiTwoWidths	lef/lefiLayer.cpp	/^lefiTwoWidths::~lefiTwoWidths()$/;"	f	class:lefiTwoWidths
~lefiUnits	lef/lefiUnits.cpp	/^lefiUnits::~lefiUnits()$/;"	f	class:lefiUnits
~lefiUseMinSpacing	lef/lefiMisc.cpp	/^lefiUseMinSpacing::~lefiUseMinSpacing()$/;"	f	class:lefiUseMinSpacing
~lefiVia	lef/lefiVia.cpp	/^lefiVia::~lefiVia()$/;"	f	class:lefiVia
~lefiViaLayer	lef/lefiVia.cpp	/^lefiViaLayer::~lefiViaLayer()$/;"	f	class:lefiViaLayer
~lefiViaRule	lef/lefiViaRule.cpp	/^lefiViaRule::~lefiViaRule()$/;"	f	class:lefiViaRule
~lefiViaRuleLayer	lef/lefiViaRule.cpp	/^lefiViaRuleLayer::~lefiViaRuleLayer()$/;"	f	class:lefiViaRuleLayer
~lefrData	lef/lefrData.cpp	/^lefrData::~lefrData()$/;"	f	class:lefrData
